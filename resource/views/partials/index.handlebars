<div class="slideshow">
    <div class="slideshow__inner">
        <section class="slider-lastest owl-carousel owl-theme">
            <div class="slider-lastest__item slider-lastest__item--2">

            </div>

        </section>
        <div class="slideshow__search">
            <section class="slideshow__search-inner">
                <h2 class="slideshow__search-heading">Đặt dịch vụ giúp việc</h2>
                <div class="slideshow__search-component">
                    <div class="slideshow__form-group slideshow__form-group--button">
                        <button id="short-term-btn" type="button"
                            class="btn btn__short-term btn__form-term active-term">Theo ngày</button>
                        <button id="long-term-btn" type="button" class="btn btn__long-term btn__form-term">Dài
                            hạn</button>
                    </div>
                    <div id="short-term">
                        <form id="short-term-form" method='get' action="/request" class="form__short-term">
                            <div class="form-group slideshow__form-group slideshow__form-group--adjust">


                                <div class="wrapper-province extra-province" style="margin:0;">
                                    <div class="wrapper-province__select-btn extra-short extra-border-left">
                                        <span style="white-space:nowrap">Chọn Tỉnh</span>
                                        <i class="fa-solid fa-chevron-down"></i>
                                    </div>
                                    <div class="wrapper-province__content" style="position:relative;z-index:999;">
                                        <div class="warapper-province__search" style="display:flex; gap:5px;">
                                            <input name="province" class="wrapper-province__input" spellcheck="false"
                                                type="text" placeholder="Tìm kiếm" style="width:100%">
                                            <i class="fa-solid fa-magnifying-glass"></i>
                                        </div>
                                        <ul class="wrapper-province__options"></ul>
                                    </div>
                                </div>





                                <div class="wrapper-district extra-district" style="margin:0;">
                                    <div class="wrapper-district__select-btn extra-short">
                                        <span style="white-space:nowrap">Chọn Quận</span>
                                        <i class="fa-solid fa-chevron-down"></i>
                                    </div>
                                    <div class="wrapper-district__content" style="position:relative;z-index:999;">
                                        <div class="warapper-district__search" style="display:flex; gap:5px;">
                                            <input name="district" class="wrapper-district__input" spellcheck="false"
                                                type="text" placeholder="Tìm kiếm" style="width:100%">
                                            <i class="fa-solid fa-magnifying-glass"></i>
                                        </div>
                                        <ul class="wrapper-district__options"></ul>
                                    </div>
                                </div>



                                <div class="wrapper-service extra-service" style="margin:0;">
                                    <div class="wrapper-service__select-btn extra-short">
                                        <span style="white-space:nowrap">Chọn Dịch Vụ</span>
                                        <i class="fa-solid fa-chevron-down"></i>
                                    </div>
                                    <div class="wrapper-service__content" style="position:relative;">
                                        <div class="warapper-service__search"
                                            style="display:flex; gap:5px;align-items:center">
                                            <input name="service" class="wrapper-service__input" spellcheck="false"
                                                type="text" placeholder="Tìm kiếm" style="width:100%">
                                            <i class="fa-solid fa-magnifying-glass"></i>
                                        </div>
                                        <ul class="wrapper-service__options"></ul>
                                    </div>
                                </div>


                                <div class="form__group form-label__start-date" style="margin-top:0px;">
                                    <div class="form__text-input form-control"
                                        style="border-radius:0px;height:100%;border: 1px solid #d4d4d4;">
                                        <input style="    font-size: 1.4rem;
    height: 20px;
    font-weight: 600;" id="myID2" placeholder="Chọn ngày"
                                            type="text" class="form__input" value="{{order.dates}}" name="dates"
                                            required class="input-date status">

                                        <img src="/icon/error.svg" alt="" class="form__input-icon-error">
                                    </div>
                                    <p class="form__error"></p>
                                </div>
                            </div>
                            <div class="form-group slideshow__form-group slideshow__form-group--remain">

                                <div class="container-homecare">
                                    <div class="time-picker-wrapper-homecare">
                                        <div class="time-picker-homecare">
                                            <div class="time-input-homecare" id="start-time-input">
                                                <span class="selected-time-homecare">Giờ bắt đầu</span>
                                                <div class="dropdown-homecare">
                                                    <div class="time-list-homecare" id="start-time-list"></div>
                                                </div>
                                            </div>
                                            <input type="hidden" name="startTime" class="start-time-input-short">
                                        </div>

                                        <div class="time-picker-homecare">
                                            <div class="time-input-homecare" id="end-time-input">
                                                <span class="selected-time-homecare">Giờ kết thúc</span>
                                                <div class="dropdown-homecare">
                                                    <div class="time-list-homecare" id="end-time-list"></div>
                                                </div>
                                            </div>
                                            <input type="hidden" name="endTime" class="end-time-input-short">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <input type="hidden" name="requestType" value="Ngắn hạn">
                        </form>
                        <button id="submitForm1" class="btn btn-find btn-find-short-term" form="short-term-form">Tìm kiếm</button>
                    </div>
                    <div id="long-term">
                        <form id="long-term-form" method="get" action="/request"
                            class="form__long-term hide-form">

                            <div class="form-group slideshow__form-group slideshow__form-group--adjust">

                                <div class="wrapper-province__long extra-province" style="margin:0;">
                                    <div class="wrapper-province__select-btn extra-short extra-border-left">
                                        <span style="white-space:nowrap">Chọn Tỉnh</span>
                                        <i class="fa-solid fa-chevron-down"></i>
                                    </div>
                                    <div class="wrapper-province__content" style="position:relative;z-index: index 999;">
                                        <div class="warapper-province__search" style="display:flex; gap:5px;">
                                            <input name="province" class="wrapper-province__input" spellcheck="false"
                                                type="text" placeholder="Tìm kiếm" style="width:100%">
                                            <i class="fa-solid fa-magnifying-glass"></i>
                                        </div>
                                        <ul class="wrapper-province__options"></ul>
                                    </div>
                                </div>


                                <div class="wrapper-district extra-district wrapper-district__long" style="margin:0;">
                                    <div class="wrapper-district__select-btn extra-short">
                                        <span style="white-space:nowrap">Chọn Quận</span>
                                        <i class="fa-solid fa-chevron-down"></i>
                                    </div>
                                    <div class="wrapper-district__content" style="position:relative;z-index:999;">
                                        <div class="warapper-district__search" style="display:flex; gap:5px;">
                                            <input name="district" class="wrapper-district__input" spellcheck="false"
                                                type="text" placeholder="Tìm kiếm" style="width:100%">
                                            <i class="fa-solid fa-magnifying-glass"></i>
                                        </div>
                                        <ul class="wrapper-district__options"></ul>
                                    </div>
                                </div>

                                <div class="wrapper-service extra-service wrapper-service__long" style="margin:0;">
                                    <div class="wrapper-service__select-btn extra-short">
                                        <span style="white-space:nowrap">Chọn Dịch Vụ</span>
                                        <i class="fa-solid fa-chevron-down"></i>
                                    </div>
                                    <div class="wrapper-service__content" style="position:relative;">
                                        <div class="warapper-service__search" style="display:flex; gap:5px;">
                                            <input name="service" class="wrapper-service__input" spellcheck="false"
                                                type="text" placeholder="Tìm kiếm" style="width:100%">
                                            <i class="fa-solid fa-magnifying-glass"></i>
                                        </div>
                                        <ul class="wrapper-service__options"></ul>
                                    </div>
                                </div>

                                <div class="form__group form-label__start-date" style="margin-top:0px;">
                                    <div class="form__text-input form-control"
                                        style="border-radius:0px;height:100%;border: 1px solid #d4d4d4;">
                                        <input style="    font-size: 1.4rem;
    height: 20px;
    font-weight: 600;" id="myID7"
                                            placeholder="Ngày Bắt Đầu" type="text" class="form__input" name="startDate"
                                            required class="input-date status">
                                        <!-- <img src="/icon/evelope.svg" alt="evelope" class="form__input-icon"> -->
                                        <img src="/icon/error.svg" alt="" class="form__input-icon-error">
                                    </div>
                                    <p class="form__error"></p>
                                </div>
                                <div class="form__group form-label__start-date" style="margin-top:0px;">
                                    <div class="form__text-input form-control"
                                        style="border-radius:0px;height:100%;border: 1px solid #d4d4d4;">
                                        <input style="    font-size: 1.4rem;
    height: 20px;
    font-weight: 600;" id="myID8"
                                            placeholder="Ngày Kết Thúc" type="text" class="form__input" name="endDate"
                                            required class="input-date status">
                                        <img src="/icon/error.svg" alt="" class="form__input-icon-error">
                                    </div>
                                    <p class="form__error"></p>
                                </div>
                            </div>
                            <div class="form-group slideshow__form-group slideshow__form-group--remain">

                                <div class="container-homecare-long">
                                    <div class="time-picker-wrapper-homecare-long">
                                        <div class="time-picker-homecare-long">
                                            <div class="time-input-homecare-long" id="start-time-input-long">
                                                <span class="selected-time-homecare-long">Giờ bắt đầu</span>
                                                <div class="dropdown-homecare-long">
                                                    <div class="time-list-homecare-long" id="start-time-list-long">
                                                    </div>
                                                </div>
                                            </div>
                                            <input type="hidden" name="startTime" id="start-time-value-long">
                                        </div>

                                        <div class="time-picker-homecare-long">
                                            <div class="time-input-homecare-long" id="end-time-input-long">
                                                <span class="selected-time-homecare-long">Giờ kết thúc</span>
                                                <div class="dropdown-homecare-long">
                                                    <div class="time-list-homecare-long" id="end-time-list-long"></div>
                                                </div>
                                            </div>
                                            <input type="hidden" name="endTime" id="end-time-value-long">
                                        </div>
                                    </div>
                                </div>


                            </div>

                            <input type="hidden" name="requestType" value="Dài hạn">
                        </form>
                        <button class="btn btn-find btn-long hide-form" id="submitForm2"
                            style="border-radius:10px;border: 1px solid #d4d4d4;" form="long-term-form">Tìm kiếm</button>
                    </div>
                </div>
            </section>
        </div>
       
       
    </div>
</div>

<section id="introduce" class="about section-padding">
    <div class="container">
        <div class="row align-items-center">
            <!-- Phần giới thiệu bên trái -->
            <div class="col-lg-6 col-md-12 mb-4 mb-lg-0">
                <div class="about__content-wrapper">
                    <span class="about__subtitle">Chất lượng & Uy tín</span>
                    <h2 class="about__heading">Tất cả vì sự hài lòng của quý khách hàng</h2>
                    <p class="about__content">
                        Chúng tôi, <strong>Procleaner</strong>, là tập hợp những cá nhân xuất thân từ thực tế cuộc sống
                        của những người giúp việc, được
                        sự chắp cánh của những cộng sự am hiểu công nghệ và giàu kinh nghiệm quản lý.
                    </p>
                    <p class="about__content">
                        Procleaner mong muốn đem đến cho Quý khách hàng những <span class="text-highlight">dịch vụ chất
                            lượng cao nhất</span> với đội ngũ
                        nhân viên được huấn luyện theo quy trình chuyên nghiệp.
                    </p>
                    <div class="about__features">
                        <div class="about__feature-item">
                            <div class="feature-icon">
                                <i class="fa-solid fa-shield-halved"></i>
                            </div>
                            <div class="feature-text">
                                <h4>An toàn & Bảo mật</h4>
                                <p>Nhân viên có lý lịch rõ ràng và được kiểm tra kỹ càng</p>
                            </div>
                        </div>
                        <div class="about__feature-item">
                            <div class="feature-icon">
                                <i class="fa-solid fa-award"></i>
                            </div>
                            <div class="feature-text">
                                <h4>Chất lượng cao</h4>
                                <p>Được đào tạo bài bản về kỹ năng chuyên môn và giao tiếp</p>
                            </div>
                        </div>
                    </div>
                    <div class="about__app-download">
                        <h4 class="download-title">Tải ứng dụng ngay</h4>
                        <div class="download-buttons">
                            <a href="https://play.google.com/store" class="google-play" target="_blank">
                                <img src="/img/google_app_new.png" alt="Google Play" class="btn-google-play__img">
                            </a>
                            <a href="https://www.apple.com/app-store/" class="apple-store" target="_blank">
                                <img src="/img/apple_app_store.png" alt="App Store" class="btn-apple-store__img">
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Phần hình ảnh bên phải -->
            <div class="col-lg-6 col-md-12">
                <div class="about__image-wrapper">
                    <img src="/img/z6456445192354_e0733262e91190e41e872e332a568684.jpg" alt="Pro Cleaner Service"
                        class="about__image img-fluid rounded shadow">
                    <div class="about__experience-badge">
                        <div class="badge-content">
                            <span class="years">5+</span>
                            <span class="text">Năm kinh nghiệm</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quy trình đặt dịch vụ -->
        <div class="row about__process mt-5">
            <div class="col-12 text-center">
                <h2 class="section-heading">Quy trình đặt dịch vụ đơn giản</h2>
                <p class="section-subtitle">Chỉ với 4 bước đơn giản để trải nghiệm dịch vụ của chúng tôi</p>
            </div>

            <div class="col-12">
                <div class="process-timeline">
                    <div class="row">
                        <div class="col-md-3 col-sm-6 process-step">
                            <div class="process-icon-container">
                                <div class="process-icon">
                                    <i class="fa-solid fa-list-check"></i>
                                    <span class="step-number">1</span>
                                </div>
                            </div>
                            <h3 class="process-title">Chọn dịch vụ</h3>
                            <p class="process-description">Lựa chọn dịch vụ phù hợp với nhu cầu của bạn</p>
                        </div>

                        <div class="col-md-3 col-sm-6 process-step">
                            <div class="process-icon-container">
                                <div class="process-icon">
                                    <i class="fa-solid fa-comments"></i>
                                    <span class="step-number">2</span>
                                </div>
                            </div>
                            <h3 class="process-title">Xác nhận & tư vấn</h3>
                            <p class="process-description">Đội ngũ chăm sóc khách hàng sẽ liên hệ xác nhận</p>
                        </div>

                        <div class="col-md-3 col-sm-6 process-step">
                            <div class="process-icon-container">
                                <div class="process-icon">
                                    <i class="fa-solid fa-broom"></i>
                                    <span class="step-number">3</span>
                                </div>
                            </div>
                            <h3 class="process-title">Thực hiện công việc</h3>
                            <p class="process-description">Nhân viên đến và thực hiện dịch vụ tận tâm</p>
                        </div>

                        <div class="col-md-3 col-sm-6 process-step">
                            <div class="process-icon-container">
                                <div class="process-icon">
                                    <i class="fa-solid fa-star"></i>
                                    <span class="step-number">4</span>
                                </div>
                            </div>
                            <h3 class="process-title">Đánh giá dịch vụ</h3>
                            <p class="process-description">Phản hồi để chúng tôi nâng cao chất lượng</p>
                        </div>
                    </div>

                    <!-- Đường kết nối giữa các bước -->
                    <div class="process-connector d-none d-md-block"></div>
                </div>
            </div>
        </div>

        <!-- Chứng nhận và đánh giá -->
        <div class="row about__stats mt-5">
            <div class="col-md-3 col-6">
                <div class="stat-item text-center">
                    <div class="stat-icon">
                        <i class="fa-solid fa-users"></i>
                    </div>
                    <div class="stat-number" data-count="5000">5,000+</div>
                    <div class="stat-title">Khách hàng</div>
                </div>
            </div>

            <div class="col-md-3 col-6">
                <div class="stat-item text-center">
                    <div class="stat-icon">
                        <i class="fa-solid fa-calendar-check"></i>
                    </div>
                    <div class="stat-number" data-count="10000">10,000+</div>
                    <div class="stat-title">Dịch vụ hoàn thành</div>
                </div>
            </div>

            <div class="col-md-3 col-6">
                <div class="stat-item text-center">
                    <div class="stat-icon">
                        <i class="fa-solid fa-person"></i>
                    </div>
                    <div class="stat-number" data-count="300">300+</div>
                    <div class="stat-title">Nhân viên</div>
                </div>
            </div>

            <div class="col-md-3 col-6">
                <div class="stat-item text-center">
                    <div class="stat-icon">
                        <i class="fa-solid fa-star"></i>
                    </div>
                    <div class="stat-number" data-count="4.8">4.8</div>
                    <div class="stat-title">Đánh giá trung bình</div>
                </div>
            </div>
        </div>
    </div>
</section>
<section id="service">
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <h2 class="heading extra-color-white">Chúng tôi hân hạnh gửi đến quý khách hàng những dịch vụ sau</h2>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row grid-service">
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-child-reaching"
                        style="color: #ffffff;font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}"></i>
                    <h3 class="service__box-heading">Chăm sóc bé</h3>
                    <p class="service__box-content">Cho bé ăn, uống sữa, ru ngũ, tắm bé, thay tã lót, quần áo, chơi với
                        trẻ, dẫn bé đi dạo ...</p>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-wheelchair"
                        style="color: #ffffff;font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}"></i>
                    <h3 class="service__box-heading">Chăm sóc người già</h3>
                    <p class="service__box-content">Tắm rửa, giặt quần áo, trò chuyện, dẫn đi dạo, nấu thức ăn ... cho
                        người già.</p>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-person-dress"
                        style="color: #ffffff;font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}"></i>
                    <h3 class="service__box-heading">Chăm sóc sản phụ</h3>
                    <p class="service__box-content">Đi chợ, nấu ăn, tắm rửa và vệ sinh cho sản phụ, xông hơ, giặt quần
                        áo ... cho sản phụ</p>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-stethoscope"
                        style="color: #ffffff;font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}"></i>
                    <h3 class="service__box-heading">Nuôi bệnh</h3>
                    <p class="service__box-content">Theo dõi mạch, nhiệt, hô hấp, giấc ngủ, cho ăn, cho uống nước, sửa,
                        thuốc, xoa bóp ... cho người bệnh.</p>
                </div>
            </div>
        </div>
        <div class="row margin-top grid-service">
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-trash"
                        style="color: #ffffff;font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}"></i>
                    <h3 class="service__box-heading">Dọn dẹp vệ sinh</h3>
                    <p class="service__box-content">Quét dọn nhà cửa, sân vườn, vệ sinh toilet, cầu thang, tưới cây,
                        giặt phơi quần áo, nấu ăn, rửa chén bát, pha trà ...</p>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-bus"
                        style="color: #ffffff; font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}"></i>
                    <h3 class="service__box-heading">Đưa đón bé đi học</h3>
                    <p class="service__box-content">Đưa bé đến trường, trao đổi với giao viên về tình hình học tập của
                        bé, đưa đón bé về nhà, truyền tải thông điệp của giáo
                        viên đến phụ huynh ...</p>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-spoon"
                        style="color: #ffffff;font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}"></i>
                    <h3 class="service__box-heading">Nấu ăn</h3>
                    <p class="service__box-content">Đi chợ, chọn mua thức ăn, chế biến các món ăn theo yêu cầu, bày biện
                        món, dọn dẹp, rửa chén, lau bàn, bếp ...</p>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-mobile-12">
                <div class="service__box">
                    <i class="fa-solid fa-building"
                        style="color: #ffffff; font-size: 40px;@include abstracts.screen(xl){font-size: 25px;}  "></i>
                    <h3 class="service__box-heading">Vệ sinh văn phòng</h3>
                    <p class="service__box-content">Vệ sinh trần, sàn; giặt thảm, ghế sofa; lau chùi cửa, kính, bàn ghế,
                        tủ hồ sơ; vệ sinh văn phòng, công ty, nhà xưởng...</p>
                </div>
            </div>
        </div>
    </div>
</section>
<section id="faq" class="faq" style="padding-top: 100px;">
    <div class="container">
        <div class="row">
            <div class="col-lg-12" style="display: flex
;
    flex-direction: column;
    justify-content: center;
    align-items: center;">
                <h2 class="section-heading">Câu hỏi thường gặp</h2>
                <p class="section-subtitle">Giải đáp những thắc mắc phổ biến về dịch vụ của Pro Cleaner</p>
            </div>
        </div>
        <div class="row">
            <div class="faq__list">
                {{#each questions}}


                <div class="faq__item">
                    <div class="faq__item-question">
                        <p class="faq__item-question-text">{{@index}}. {{question}}</p>
                        <i class="fa-solid fa-plus"></i>
                    </div>
                    <div class="faq__item-answer">
                        <div class="faq__item-answer-text">
                            <p class="faq__item-answer-text--desc faq-title"
                                style="font-weight: 700; margin-bottom: 15px; color: #0056b3; font-size: 1.05rem;"></p>
                            <ul class="faq__item-answer-text--desc">
                                {{#each answers}}
                                <li
                                    style="list-style-type: none; position: relative; padding-left: 20px; margin-bottom: 10px; line-height: 1.5;">
                                    <span
                                        style="position: absolute; left: 0; font-weight: bold; font-size: 1.2em; color: #0056b3;">•</span>
                                    {{this}}
                                </li>
                                {{/each}}
                            </ul>
                        </div>
                    </div>
                </div>
                {{/each}}
            </div>
        </div>
    </div>
</section>
{{!-- <section id="faq" class="faq-section py-5">
    <div class="container">
        <!-- Header -->
        <div class="row mb-5">
            <div class="col-lg-7 mx-auto text-center">
                <h2 class="section-heading">Câu hỏi thường gặp</h2>
                <p class="section-subtitle">Giải đáp những thắc mắc phổ biến về dịch vụ của Pro Cleaner</p>
                <div class="section-divider"></div>
            </div>
        </div>

        <!-- Search Box -->
        <div class="row mb-4">
            <div class="col-lg-8 col-md-10 mx-auto">
                <div class="faq-search">
                    <div class="input-group">
                        <span class="input-group-text bg-transparent border-end-0">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" id="faq-search-input" class="form-control border-start-0 ps-0"
                            placeholder="Tìm kiếm câu hỏi..." aria-label="Tìm kiếm câu hỏi">
                    </div>
                </div>
            </div>
        </div>

        <!-- FAQ Categories -->
        <div class="row mb-4">
            <div class="col-lg-10 mx-auto">
                <div class="faq-categories">
                    <button class="btn btn-category active" data-filter="all">Tất cả</button>
                    <button class="btn btn-category" data-filter="service">Dịch vụ</button>
                    <button class="btn btn-category" data-filter="booking">Đặt lịch</button>
                    <button class="btn btn-category" data-filter="payment">Thanh toán</button>
                    <button class="btn btn-category" data-filter="other">Khác</button>
                </div>
            </div>
        </div>

        <!-- FAQ List -->
        <div class="row">
            <div class="col-lg-10 mx-auto">
                <div class="accordion faq-accordion" id="faqAccordion">
                    {{#each questions}}
                    <div class="accordion-item faq-item" data-category="{{category}}">
                        <h2 class="accordion-header" id="heading{{@index}}">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                data-bs-target="#collapse{{@index}}" aria-expanded="false"
                                aria-controls="collapse{{@index}}">
                                <span class="faq-question-text">{{question}}</span>
                            </button>
                        </h2>
                        <div id="collapse{{@index}}" class="accordion-collapse collapse"
                            aria-labelledby="heading{{@index}}" data-bs-parent="#faqAccordion">
                            <div class="accordion-body">
                                {{#if answers.length}}
                                <ul class="faq-answer-list">
                                    {{#each answers}}
                                    <li>{{this}}</li>
                                    {{/each}}
                                </ul>
                                {{else}}
                                <p class="faq-answer-text">{{answer}}</p>
                                {{/if}}
                            </div>
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
        </div>

        <!-- Contact Support -->
        <div class="row mt-5">
            <div class="col-lg-10 mx-auto">
                <div class="faq-support-card">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h3>Vẫn còn thắc mắc?</h3>
                            <p>Liên hệ với đội ngũ hỗ trợ của chúng tôi để được giải đáp nhanh chóng</p>
                        </div>
                        <div class="col-md-4 text-md-end mt-3 mt-md-0">
                            <a href="/contact" class="btn btn-primary">
                                <i class="fas fa-headset me-2"></i> Liên hệ hỗ trợ
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section> --}}


<section class="partnership">
    <div class="container">
        <div class="row">
            <div class="col-lg-12" style="display: flex;
    flex-direction: column;justify-content: center;align-items: center;">
                <h2 class="section-heading">Các đối tác của chúng tôi</h2>
            </div>
        </div>
    </div>
</section>

<div class="helper" id="helper">
    <div class="container">
        <div class="swiper mySwiper helper__mySwiper">
            <div class="swiper-wrapper helper__wrapper">
                {{#each helpers}}
                <div class="swiper-slide helper__swiper-slide">
                    <a href="/helper/{{this._id}}">
                        <img src="{{this.avatar}}" alt="{{this.fullName}}" class="helper__swiper-slide-img" style="width:100%;">
                    </a>
                    <div class="helper__infor">
                        <h5 class="helper__infor-name">{{this.fullName}}</h5>
                        <p class="helper__infor-time">{{this.experience}} giờ kinh nghiệm</p>
                        <p class="helper__infor-age">{{this.age}} tuổi</p>
                    </div>
                </div>
                {{/each}}
            </div>
            <div class="swiper-pagination"></div>
            <!-- Nút điều hướng sẽ được thêm bởi JavaScript -->
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const wrapper_service = document.querySelector(".wrapper-service");
        const selectBtn_service = wrapper_service.querySelector(".wrapper-service__select-btn");
        const searchInp_service = wrapper_service.querySelector(".wrapper-service__input");
        const options_service = wrapper_service.querySelector(".wrapper-service__options");

        // Kiểm tra xem các element có tồn tại không
        if (!wrapper_service || !selectBtn_service || !searchInp_service || !options_service) {
            console.error("Không tìm thấy các element cần thiết");
            return;
        }


        // let services = ["11","22"];
        // map(location => { return location.Name.replace(/(Tỉnh|Thành phố) /g, '') });
        let services = {{{ json services }}}.map((service) => { return { title: service.title, id: service._id } });

    console.log(services);
    function addCountry_service(selectedCountry) {
        options_service.innerHTML = "";
        services.forEach((country, index) => {
            let isSelected = country.title == selectedCountry ? "selected" : "";
            let li = `<li onclick="updateName_service(this)"   class="${isSelected}">${country.title}</li>`;
            options_service.insertAdjacentHTML("beforeend", li);
        });
    }

    function updateName_service(selectedLi) {
        console.log("updataName service is running")
        let idService = 0;
        console.log(selectedLi);
        for (let i = 0; i < services.length; i++) {
            if (selectedLi.innerText == services[i].title) {
                idService = services[i].id;
                break;
            }
        }
        searchInp_service.Name = idService;
        //searchInp_service.value = selectedLi.innerText;
        searchInp_service.value = idService;
        addCountry_service(selectedLi.innerText);
        wrapper_service.classList.remove("active-menu-search");
        selectBtn_service.firstElementChild.innerText = selectedLi.innerText;
        //console.log("Selected index:", selectedIndex); // Log ra index
        // Có thể lưu index vào một biến hoặc xử lý theo nhu cầu
        // give the district selections with index

    }

    // Đưa updateName vào global scope để onclick có thể truy cập
    window.updateName_service = updateName_service;

    searchInp_service.addEventListener("keyup", () => {
        let arr = [];
        let searchWord = searchInp_service.value.toLowerCase();
        arr = services.filter((data, index) => {
            return data.toLowerCase().startsWith(searchWord);
        }).map((data, index) => {
            console.log(data);
            let isSelected = data == selectBtn_service.firstElementChild.innerText ? "selected" : "";
            return `<li onclick="updateName_service(this)" class="${isSelected}">${data}</li>`;
        }).join("");
        options_service.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Oops! tỉnh không tồn tại</p>`;
    });

    selectBtn_service.addEventListener("click", () => wrapper_service.classList.toggle("active-menu-search"));

    // Khởi tạo danh sách ban đầu
    addCountry_service();
        });
    //long-service
    document.addEventListener('DOMContentLoaded', function () {
        const wrapper_service = document.querySelector(".wrapper-service__long");
        const selectBtn_service = wrapper_service.querySelector(".wrapper-service__select-btn");
        const searchInp_service = wrapper_service.querySelector(".wrapper-service__input");
        const options_service = wrapper_service.querySelector(".wrapper-service__options");

        // Kiểm tra xem các element có tồn tại không
        if (!wrapper_service || !selectBtn_service || !searchInp_service || !options_service) {
            console.error("Không tìm thấy các element cần thiết");
            return;
        }


        let services = {{{ json services }}}.map((service) => { return service.title });
    function addCountry_serviceLong(selectedCountry) {
        options_service.innerHTML = "";
        services.forEach((country, index) => {
            let isSelected = country == selectedCountry ? "selected" : "";
            let li = `<li onclick="updateName_serviceLong(this)" class="${isSelected}">${country}</li>`;
            options_service.insertAdjacentHTML("beforeend", li);
        });
    }

    function updateName_serviceLong(selectedLi) {
        console.log("updataName service is running")
        searchInp_service.value = selectedLi.innerText;
        addCountry_serviceLong(selectedLi.innerText);
        wrapper_service.classList.remove("active-menu-search");
        selectBtn_service.firstElementChild.innerText = selectedLi.innerText;
        // Log ra index
        // Có thể lưu index vào một biến hoặc xử lý theo nhu cầu
        // give the district selections with index

    }
    // Đưa updateName vào global scope để onclick có thể truy cập
    window.updateName_serviceLong = updateName_serviceLong;

    searchInp_service.addEventListener("keyup", () => {
        let arr = [];
        let searchWord = searchInp_service.value.toLowerCase();
        arr = services.filter((data, index) => {
            return data.toLowerCase().startsWith(searchWord);
        }).map((data, index) => {
            let isSelected = data == selectBtn_service.firstElementChild.innerText ? "selected" : "";
            return `<li onclick="updateName_serviceLong(this)" class="${isSelected}">${data}</li>`;
        }).join("");
        options_service.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Oops! tỉnh không tồn tại</p>`;
    });

    selectBtn_service.addEventListener("click", () => wrapper_service.classList.toggle("active-menu-search"));

    // Khởi tạo danh sách ban đầu
    addCountry_serviceLong();
            });
    let districts = [];
    function makeAction_short() {
        document.addEventListener('DOMContentLoaded', function () {
            const wrapper = document.querySelector(".wrapper-province");
            const selectBtn = wrapper.querySelector(".wrapper-province__select-btn");
            const searchInp = wrapper.querySelector(".wrapper-province__input");
            const options = wrapper.querySelector(".wrapper-province__options");

            // Kiểm tra xem các element có tồn  tại không
            if (!wrapper || !selectBtn || !searchInp || !options) {
                console.error("Không tìm thấy các element cần thiết");
                return;
            }


            let countries = {{{ json locations }}}.map(location => { return location.Name.replace(/(Tỉnh|Thành phố) /g, '') });
    console.log(countries);


    function addCountry(selectedCountry) {
        options.innerHTML = "";
        countries.forEach((country, index) => {
            let isSelected = country == selectedCountry ? "selected" : "";
            let li = `<li onclick="updateName(this, ${index})" class="${isSelected}">${country}</li>`;
            options.insertAdjacentHTML("beforeend", li);
        });
    }

    function updateName(selectedLi, selectedIndex) {
        searchInp.value = selectedLi.innerText;
        addCountry(selectedLi.innerText);
        wrapper.classList.remove("active-menu-search");
        selectBtn.firstElementChild.innerText = selectedLi.innerText;
        console.log("Selected index:", selectedIndex); // Log ra index
        // Có thể lưu index vào một biến hoặc xử lý theo nhu cầu
        // give the district selections with index
        districts = [];

        for (let i = 1; i < locations[selectedIndex].Districts.length; i++) {
            let districtName;
            console.log(districtName);

            districts.push(locations[selectedIndex].Districts[i].Name.replace(/(Huyện) /g, ''));
        }
        console.log(districts);
        makeWrapperDistrict(districts, selectedLi);
    }
    // Đưa updateName vào global scope để onclick có thể truy cập
    window.updateName = updateName;
    searchInp.addEventListener("keyup", () => {
        let arr = [];
        let searchWord = searchInp.value.toLowerCase();
        arr = countries.filter((data, index) => {

            return data.toLowerCase().startsWith(searchWord);
        }).map((data, index) => {
            for (let i = 0; i < countries.length; i++) {
                if (data == countries[i]) {
                    index = i;
                    break;
                }
            }
            let isSelected = data == selectBtn.firstElementChild.innerText ? "selected" : "";
            return `<li onclick="updateName(this, ${index})" class="${isSelected}">${data}</li>`;
        }).join("");
        options.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Oops! tỉnh không tồn tại</p>`;
    });

    selectBtn.addEventListener("click", () => wrapper.classList.toggle("active-menu-search"));

    // Khởi tạo danh sách ban đầu
    addCountry();
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        const wrapper = document.querySelector(".wrapper-province");
        const selectBtn = wrapper.querySelector(".wrapper-province__select-btn");
        const searchInp = wrapper.querySelector(".wrapper-province__input");
        const options = wrapper.querySelector(".wrapper-province__options");

        // Kiểm tra xem các element có tồn tại không
        if (!wrapper || !selectBtn || !searchInp || !options) {
            console.error("Không tìm thấy các element cần thiết");
            return;
        }


        let countries = {{{ json locations }}}.map(location => { return location.Name.replace(/(Tỉnh|Thành phố) /g, '') });
    console.log(countries);

    function addCountry(selectedCountry) {
        options.innerHTML = "";
        countries.forEach((country, index) => {
            let isSelected = country == selectedCountry ? "selected" : "";
            let li = `<li onclick="updateName(this, ${index})" class="${isSelected}">${country}</li>`;
            options.insertAdjacentHTML("beforeend", li);
        });
    }

    function updateName(selectedLi, selectedIndex) {

        searchInp.value = selectedLi.innerText;
        addCountry(selectedLi.innerText);
        wrapper.classList.remove("active-menu-search");
        selectBtn.firstElementChild.innerText = selectedLi.innerText;
        console.log("Selected index:", selectedIndex); // Log ra index
        // Có thể lưu index vào một biến hoặc xử lý theo nhu cầu
        // give the district selections with index
        districts = [];

        for (let i = 1; i < locations[selectedIndex].Districts.length; i++) {
            let districtName;
            console.log(districtName);
            districts.push(locations[selectedIndex].Districts[i].Name.replace(/(Huyện) /g, ''));
        }
        console.log(districts);
        makeWrapperDistrict(districts, selectedLi);
    }

    // Đưa updateName vào global scope để onclick có thể truy cập
    window.updateName = updateName;

    searchInp.addEventListener("keyup", () => {
        let arr = [];
        let searchWord = searchInp.value.toLowerCase();
        arr = countries.filter((data, index) => {
            return data.toLowerCase().startsWith(searchWord);
        }).map((data, index) => {
            for (let i = 0; i < countries.length; i++) {
                if (data == countries[i]) {
                    index = i;
                    break;
                }
            }
            let isSelected = data == selectBtn.firstElementChild.innerText ? "selected" : "";
            return `<li onclick="updateName(this, ${index})" class="${isSelected}">${data}</li>`;
        }).join("");
        options.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Oops! tỉnh không tồn tại</p>`;
    });

    selectBtn.addEventListener("click", () => wrapper.classList.toggle("active-menu-search"));

    // Khởi tạo danh sách ban đầu
    addCountry();
        });
    function makeAction() {
        const wrapper_long = document.querySelector(".wrapper-province__long");
        const selectBtn_long = wrapper_long.querySelector(".wrapper-province__select-btn");
        const searchInp_long = wrapper_long.querySelector(".wrapper-province__input");
        const options_long = wrapper_long.querySelector(".wrapper-province__options");

        // Kiểm tra xem các element có tồn tại không
        if (!wrapper_long || !selectBtn_long || !searchInp_long || !options_long) {
            console.error("Không tìm thấy các element cần thiết");
            return;
        }

        let countries = locations.map(location => { return location.Name.replace(/(Tỉnh|Thành phố) /g, '') });

        function addCountry_long(selectedCountry) {
            options_long.innerHTML = "";
            countries.forEach((country, index) => {
                let isSelected = country == selectedCountry ? "selected" : "";
                let li = `<li onclick="updateNameLong(this, ${index})" class="${isSelected}">${country}</li>`;
                options_long.insertAdjacentHTML("beforeend", li);
            });
        }


        function updateNameLong(selectedLi, selectedIndex) {

            searchInp_long.value = selectedLi.innerText;
            addCountry_long(selectedLi.innerText);
            wrapper_long.classList.remove("active-menu-search");
            selectBtn_long.firstElementChild.innerText = selectedLi.innerText;
            console.log("Selected index:", selectedIndex); // Log ra index
            // Có thể lưu index vào một biến hoặc xử lý theo nhu cầu
            // give the district selections with index
            districts = [];

            for (let i = 1; i < locations[selectedIndex].Districts.length; i++) {
                let districtName;
                console.log(districtName);
                districts.push(locations[selectedIndex].Districts[i].Name.replace(/(Huyện) /g, ''));
            }
            console.log(districts);
            makeWrapperDistrictLong(districts, selectedLi);
        }

        // Đưa updateName vào global scope để onclick có thể truy cập
        window.updateNameLong = updateNameLong;

        searchInp_long.addEventListener("keyup", () => {
            let arr = [];
            let searchWord = searchInp_long.value.toLowerCase();
            arr = countries.filter((data, index) => {
                return data.toLowerCase().startsWith(searchWord);
            }).map((data, index) => {
                for (let i = 0; i < countries.length; i++) {
                    if (data == countries[i]) {
                        index = i;
                        break;
                    }
                }
                let isSelected = data == selectBtn_long.firstElementChild.innerText ? "selected" : "";
                return `<li onclick="updateNameLong(this, ${index})" class="${isSelected}">${data}</li>`;
            }).join("");
            options_long.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Oops! tỉnh không tồn tại</p>`;
        });

        selectBtn_long.addEventListener("click", () => wrapper_long.classList.toggle("active-menu-search"));

        // Khởi tạo danh sách ban đầu
        addCountry_long();
    }
    const wrapper_district = document.querySelector(".wrapper-district");
    console.log(wrapper_district);
    const selectBtn_district = wrapper_district.querySelector(".wrapper-district__select-btn");
    console.log(selectBtn_district);
    const searchInp_district = wrapper_district.querySelector(".wrapper-district__input");
    console.log(searchInp_district);
    const options_district = wrapper_district.querySelector(".wrapper-district__options");
    const wrapper_districtLong = document.querySelector(".wrapper-district__long");
    console.log(wrapper_districtLong);
    const selectBtn_districtLong = wrapper_districtLong.querySelector(".wrapper-district__select-btn");
    console.log(selectBtn_districtLong);
    const searchInp_districtLong = wrapper_districtLong.querySelector(".wrapper-district__input");
    console.log(searchInp_districtLong);
    const options_districtLong = wrapper_districtLong.querySelector(".wrapper-district__options");
    //makeWrapperDistrict(districts);
    function makeWrapperDistrictLong(districts, selectedLi) {
        console.log(1);
        selectBtn_districtLong.firstElementChild.innerText = districts[0];
        searchInp_districtLong.value = districts[0];
        // Kiểm tra xem các element có tồn tại không
        if (!wrapper_districtLong || !selectBtn_districtLong || !searchInp_districtLong || !options_districtLong) {
            console.error("Không tìm thấy các element cần thiết");
            return;
        }

        console.log(districts);
        function addCountry_districtLong(selectedCountry) {
            options_districtLong.innerHTML = "";
            districts.forEach((country, index) => {
                let isSelected = country == selectedCountry ? "selected" : "";
                let li = `<li onclick="updateName_districtLong(this, ${index})" class="${isSelected}">${country}</li>`;
                options_districtLong.insertAdjacentHTML("beforeend", li);
            });
        }

        function updateName_districtLong(selectedLi, selectedIndex) {

            searchInp_districtLong.value = selectedLi.innerText;
            addCountry_districtLong(selectedLi.innerText);
            wrapper_districtLong.classList.remove("active-menu-search");
            console.log(selectedLi);
            selectBtn_districtLong.firstElementChild.innerText = selectedLi.innerText;
            console.log("Selected index:", selectedIndex); // Log ra index
        }

        // Đưa updateName vào global scope để onclick có thể truy cập
        window.updateName_districtLong = updateName_districtLong;

        searchInp_districtLong.addEventListener("keyup", () => {
            let arr = [];
            let searchWord = searchInp_districtLong.value.toLowerCase();
            arr = districts.filter((data, index) => {
                return data.toLowerCase().startsWith(searchWord);
            }).map((data, index) => {
                let isSelected = data == selectBtn_districtLong.firstElementChild.innerText ? "selected" : "";
                return `<li onclick="updateName_districtLong(this, ${index})" class="${isSelected}">${data}</li>`;
            }).join("");
            options_districtLong.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Oops! tỉnh không tồn tại</p>`;
        });


        // Khởi tạo danh sách ban đầu
        addCountry_districtLong();
    }
    selectBtn_districtLong.addEventListener("click", (e) => {
        e.stopPropagation(); // Ngăn event bubbling
        wrapper_districtLong.classList.toggle("active-menu-search");
        console.log("District button clicked"); // Debug log);
    })
    function makeWrapperDistrict(districts, selectedLi) {
        console.log(1);
        selectBtn_district.firstElementChild.innerText = districts[0];
        searchInp_district.value = districts[0];
        // Kiểm tra xem các element có tồn tại không
        if (!wrapper_district || !selectBtn_district || !searchInp_district || !options_district) {
            console.error("Không tìm thấy các element cần thiết");
            return;
        }

        console.log(districts);
        function addCountry_district(selectedCountry) {
            options_district.innerHTML = "";
            districts.forEach((country, index) => {
                let isSelected = country == selectedCountry ? "selected" : "";
                let li = `<li onclick="updateName_district(this, ${index})" class="${isSelected}">${country}</li>`;
                options_district.insertAdjacentHTML("beforeend", li);
            });
        }

        function updateName_district(selectedLi, selectedIndex) {

            searchInp_district.value = selectedLi.innerText;
            addCountry_district(selectedLi.innerText);
            wrapper_district.classList.remove("active-menu-search");
            console.log(selectedLi);
            selectBtn_district.firstElementChild.innerText = selectedLi.innerText;
            console.log("Selected index:", selectedIndex); // Log ra index
        }

        // Đưa updateName vào global scope để onclick có thể truy cập
        window.updateName_district = updateName_district;

        searchInp_district.addEventListener("keyup", () => {
            let arr = [];
            let searchWord = searchInp_district.value.toLowerCase();
            arr = districts.filter((data, index) => {
                return data.toLowerCase().startsWith(searchWord);
            }).map((data, index) => {
                let isSelected = data == selectBtn_district.firstElementChild.innerText ? "selected" : "";
                return `<li onclick="updateName_district(this, ${index})" class="${isSelected}">${data}</li>`;
            }).join("");
            options_district.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Oops! tỉnh không tồn tại</p>`;
        });


        // Khởi tạo danh sách ban đầu
        addCountry_district();
    }
    selectBtn_district.addEventListener("click", (e) => {
        e.stopPropagation(); // Ngăn event bubbling
        wrapper_district.classList.toggle("active-menu-search");
        console.log("District button clicked"); // Debug log);
    })


</script>
<script>

    const locations = {{{ json locations }}};
    console.log(locations);
    const activeForm = $(".btn__form-term.active-term");
    const btnFormTerms = $$(".btn__form-term");
    const shortTerm = document.getElementById('short-term-form')
    const longTerm = document.getElementById('long-term-form')
    const shortTermForm = document.querySelector('.form__short-term')
    const longTermForm = document.querySelector('.form__long-term')
    const shortTermBtn = document.getElementById('short-term-btn')
    const longTermBtn = document.getElementById('long-term-btn')
    const btnLong = document.getElementById('submitForm2');
    const btnShort = document.getElementById('submitForm1');
    let provinceSelect = shortTerm.querySelector('.province')
    let districtSelect = shortTerm.querySelector('.district');




    shortTermBtn.onclick = function () {
        shortTermForm.classList.toggle("hide-form");
        longTermForm.classList.toggle("hide-form");
        btnLong.classList.add("hide-form");
        btnShort.classList.remove("hide-form");
        $(".btn__form-term.active-term").classList.remove('active-term');
        this.classList.add('active-term');
        districtSelect = shortTerm.querySelector('.district');
        makeAction_short();
    }
    longTermBtn.onclick = function (e) {
        longTermForm.classList.toggle("hide-form");
        shortTermForm.classList.toggle("hide-form");
        btnShort.classList.add("hide-form");
        btnLong.classList.remove("hide-form");
        $(".btn__form-term.active-term").classList.remove('active-term');
        this.classList.add('active-term');
        districtSelect = longTerm.querySelector('.district');
        makeAction();

    }
    let slideShowIndex = 0;
</script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
    flatpickr("#myID3", {
        enableTime: true,
        noCalendar: true, // Ẩn phần chọn ngày, chỉ hiển thị giờ
        dateFormat: "h:i K", // Định dạng 12 giờ (AM/PM)
        time_24hr: false, // Sử dụng AM/PM thay vì 24 giờ
        minuteIncrement: 1, // Tăng số phút mỗi bước

    });
    flatpickr("#myID4", {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        conjunction: " :: ",
        minTime: "06:00",
        maxTime: "20:00",
    });
    flatpickr("#myID5", {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        conjunction: " :: ",
        minTime: "06:00",
        maxTime: "20:00",
    });
    flatpickr("#myID6", {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        conjunction: " :: ",
        minTime: "06:00",
        maxTime: "20:00",
    });
    flatpickr("#myID2", {
        minDate: "today",
        mode: "single",
        dateFormat: "Y-m-d",
        conjunction: " :: "
    });
    flatpickr("#myID7", {
        minDate: "today",
        mode: "single",
        dateFormat: "Y-m-d",
        conjunction: " :: "

    });
    flatpickr("#myID8", {
        minDate: "today",
        mode: "single",
        dateFormat: "Y-m-d",
        conjunction: " :: ",


    });

</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const timeDisplay = document.getElementById('timeDisplay');
        const timePicker = document.getElementById('timePicker');
        const timeList = document.getElementById('timeList');

        // Generate time slots with 30-minute intervals
        function generateTimeSlots() {
            const slots = [];
            for (let hour = 0; hour < 24; hour++) {
                for (let minute of [0, 30]) {
                    const formattedHour = hour.toString().padStart(2, '0');
                    const formattedMinute = minute.toString().padStart(2, '0');
                    slots.push(`${formattedHour}:${formattedMinute}`);
                }
            }
            return slots;
        }

        // Populate time list
        function populateTimeList() {
            const timeSlots = generateTimeSlots();
            timeList.innerHTML = '';

            timeSlots.forEach(time => {
                const timeOption = document.createElement('div');
                timeOption.classList.add('time-option');
                timeOption.textContent = time;
                timeOption.addEventListener('click', () => selectTime(time));
                timeList.appendChild(timeOption);
            });
        }

        // Handle time selection
        function selectTime(time) {
            timeDisplay.value = time;
            hideTimePicker();

            // Remove previous selection
            const selected = timeList.querySelector('.selected');
            if (selected) {
                selected.classList.remove('selected');
            }

            // Add selection to current choice
            const options = timeList.querySelectorAll('.time-option');
            options.forEach(option => {
                if (option.textContent === time) {
                    option.classList.add('selected');
                }
            });
        }

        // Show time picker
        function showTimePicker() {
            timePicker.classList.add('active');
            const selectedTime = timeDisplay.value;
            if (selectedTime) {
                const options = timeList.querySelectorAll('.time-option');
                options.forEach(option => {
                    if (option.textContent === selectedTime) {
                        option.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                });
            }
        }

        // Hide time picker
        function hideTimePicker() {
            timePicker.classList.remove('active');
        }

        // Event listeners
        timeDisplay.addEventListener('click', (e) => {
            e.stopPropagation();
            showTimePicker();
        });

        document.addEventListener('click', (e) => {
            if (!timePicker.contains(e.target) && e.target !== timeDisplay) {
                hideTimePicker();
            }
        });

        // Initialize time list
        populateTimeList();
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {

        // Time picker elements
        const startTimeInput = document.getElementById('start-time-input');
        const endTimeInput = document.getElementById('end-time-input');
        const startTimeList = document.getElementById('start-time-list');
        const endTimeList = document.getElementById('end-time-list');
        const divStartTimeShort = document.querySelector("div[id='start-time-input']");
        const inputStartTimeShort = document.querySelector("input[class='start-time-input-short']");
        const divEndTimeShort = document.querySelector("div[id='end-time-input']");
        const inputEndTimeShort = document.querySelector("input[class='end-time-input-short']");
        divStartTimeShort.addEventListener('change', function () {
            console.log('Time changed:', this.querySelector('.selected-time-homecare').textContent);
            console.log('Hidden input value:', inputStartTimeShort.value);
        });
        // Add event listeners to verify changes
        divEndTimeShort.addEventListener('change', function () {
            console.log('End time changed:', this.querySelector('.selected-time-homecare').textContent);
            console.log('Hidden end time value:', inputEndTimeShort.value);
        });
        // Initially disable end time picker
        endTimeInput.style.opacity = '0.5';
        endTimeInput.style.pointerEvents = 'none';

        // Show time validation message
        function showTimeValidationMessage(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `time-validation-notification ${type}`;
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                z-index: 10000;
                max-width: 400px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                animation: slideInRight 0.3s ease-out;
            `;
            
            // Set background color based on type
            switch(type) {
                case 'error':
                    notification.style.backgroundColor = '#dc3545';
                    break;
                case 'warning':
                    notification.style.backgroundColor = '#ffc107';
                    notification.style.color = '#212529';
                    break;
                case 'success':
                    notification.style.backgroundColor = '#28a745';
                    break;
                default:
                    notification.style.backgroundColor = '#17a2b8';
            }
            
            notification.textContent = message;
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.animation = 'slideOutRight 0.3s ease-in';
                    setTimeout(() => {
                        if (notification.parentNode) {
                            notification.parentNode.removeChild(notification);
                        }
                    }, 300);
                }
            }, 5000);
            
            // Add click to dismiss
            notification.addEventListener('click', () => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            });
        }

        // Add CSS animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        // Get current time and date
        function getCurrentDateTime() {
            const now = new Date();
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();
            const currentDate = now.toISOString().split('T')[0];
            
            return {
                hour: currentHour + (currentMinute / 60),
                date: currentDate,
                isAfter15h: currentHour >= 15
            };
        }

        // Generate time options
        function generateTimeOptions(startHour, endHour) {
            const times = [];
            // Convert to 30-minute intervals (0.5 hour increments)
            const startInterval = Math.ceil(startHour * 2) / 2;
            const endInterval = Math.floor(endHour * 2) / 2;
            
            for (let time = startInterval; time <= endInterval; time += 0.5) {
                const hour = Math.floor(time);
                const minute = (time % 1) === 0.5 ? 30 : 0;
                const period = hour >= 12 ? 'PM' : 'AM';
                const displayHour = hour > 12 ? hour - 12 : hour;
                const displayMinute = minute === 0 ? '00' : '30';

                times.push({
                    display: `${displayHour}:${displayMinute} ${period}`,
                    value: `${hour.toString().padStart(2, '0')}:${displayMinute}`,
                    hour: time
                });
            }
            return times;
        }

        // Generate start time options based on current time and selected date
        function generateStartTimeOptions(selectedDate) {
            const current = getCurrentDateTime();
            const isToday = selectedDate === current.date;
            
            let minStartHour = 6; // Minimum start time is 6 AM
            
            if (isToday) {
                // If today, start time must be at least 2 hours after current time
                minStartHour = Math.max(6, Math.ceil(current.hour + 2));
                
                // If current time is after 15h (3 PM), no valid start times for today
                if (current.isAfter15h) {
                    return [];
                }
            }
            
            // Maximum start time is 18h (6 PM) to ensure at least 2 hours before 20h
            const maxStartHour = 18;
            
            if (minStartHour > maxStartHour) {
                return [];
            }
            
            return generateTimeOptions(minStartHour, maxStartHour);
        }

        // Generate end time options based on start time
        function generateEndTimeOptions(startHour) {
            const minEndHour = startHour + 2; // At least 2 hours after start time
            const maxEndHour = 20; // Maximum end time is 20h (8 PM)
            
            if (minEndHour > maxEndHour) {
                return [];
            }
            
            // Round up minEndHour to the next available time slot
            const roundedMinEndHour = Math.ceil(minEndHour * 2) / 2;
            
            return generateTimeOptions(roundedMinEndHour, maxEndHour);
        }

        // Get tomorrow's date
        function getTomorrowDate() {
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            return tomorrow.toISOString().split('T')[0];
        }

        // Check if date should be automatically set to tomorrow
        function shouldSetToTomorrow(selectedDate) {
            const current = getCurrentDateTime();
            return current.isAfter15h && selectedDate === current.date;
        }

        // Update date input if current time is after 15h
        function updateDateIfNeeded(dateInput) {
            if (shouldSetToTomorrow(dateInput.value)) {
                dateInput.value = getTomorrowDate();
                return true; // Date was updated
            }
            return false; // Date was not updated
        }

        // Generate time options for both pickers
        let startTimes = [];
        let endTimes = [];

        // Populate time lists
        function populateTimeList(timeList, times) {
            timeList.innerHTML = '';
            times.forEach(time => {
                const option = document.createElement('div');
                option.className = 'time-option-homecare';
                option.textContent = time.display;
                option.dataset.value = time.value;
                option.dataset.hour = time.hour;
                timeList.appendChild(option);
            });
        }

        // Initialize time pickers
        function initializeTimePickers() {
            const current = getCurrentDateTime();
            const dateInput = document.querySelector('input[name="dates"]');
            
            if (dateInput) {
                const selectedDate = dateInput.value || current.date;
                
                // If current time is after 15h and no date selected, set to tomorrow
                if (current.isAfter15h && selectedDate === current.date) {
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    dateInput.value = tomorrow.toISOString().split('T')[0];
                }
                
                // Update start time options based on selected date
                startTimes = generateStartTimeOptions(dateInput.value);
                populateTimeList(startTimeList, startTimes);
                
                // Reset end time picker
                endTimeInput.style.opacity = '0.5';
                endTimeInput.style.pointerEvents = 'none';
                endTimes = [];
                populateTimeList(endTimeList, []);
            }
        }

        // Initialize on page load
        initializeTimePickers();

        // Update time options when date changes
        const dateInput = document.querySelector('input[name="dates"]');
        if (dateInput) {
            dateInput.addEventListener('change', function() {
                startTimes = generateStartTimeOptions(this.value);
                populateTimeList(startTimeList, startTimes);
                
                // Reset end time picker
                endTimeInput.style.opacity = '0.5';
                endTimeInput.style.pointerEvents = 'none';
                endTimes = [];
                populateTimeList(endTimeList, []);
                
                // Clear selected times
                startTimeInput.querySelector('.selected-time-homecare').textContent = 'Giờ bắt đầu';
                endTimeInput.querySelector('.selected-time-homecare').textContent = 'Giờ kết thúc';
            });
        }

        // Calculate end time options based on start time
        function updateEndTimeOptions(selectedStartHour) {
            endTimes = generateEndTimeOptions(selectedStartHour);
            populateTimeList(endTimeList, endTimes);

            // Auto-select the time that's 2 hours after start time if available
            const twoHoursLater = selectedStartHour + 2;
            
            // Find the closest time that's at least 2 hours after start time
            let autoSelectTime = null;
            let minDifference = Infinity;
            
            endTimes.forEach(time => {
                if (time.hour >= twoHoursLater) {
                    const difference = time.hour - twoHoursLater;
                    if (difference < minDifference) {
                        minDifference = difference;
                        autoSelectTime = time;
                    }
                }
            });
            
            if (autoSelectTime) {
                const endTimeOption = endTimeList.querySelector(`[data-value="${autoSelectTime.value}"]`);
                if (endTimeOption) {
                    handleTimeSelection(endTimeInput, endTimeOption);
                }
            }
        }

        // Handle time selection
        function handleTimeSelection(input, selectedOption) {
            const selectedTime = input.querySelector('.selected-time-homecare');
            selectedTime.textContent = selectedOption.textContent;
            input.classList.remove('active-extra');

            // Remove previous selection
            input.querySelectorAll('.time-option-homecare').forEach(option => {
                option.classList.remove('selected');
            });
            selectedOption.classList.add('selected');

            // If this is the start time, update end time options
            if (input === startTimeInput) {
                // Lưu giá trị vào input ẩn
                inputStartTimeShort.value = selectedOption.dataset.value;
                const selectedHour = parseFloat(selectedOption.dataset.hour);
                endTimeInput.style.opacity = '1';
                endTimeInput.style.pointerEvents = 'auto';
                updateEndTimeOptions(selectedHour);
                // Trigger custom change event
                const event = new Event('change', { bubbles: true });
                divStartTimeShort.dispatchEvent(event);
            }
            // If this is the end time 
            else if (input === endTimeInput) {
                // Set value for end time input
                inputEndTimeShort.value = selectedOption.dataset.value;

                // Trigger change event for end time
                const endEvent = new Event('change', { bubbles: true });
                divEndTimeShort.dispatchEvent(endEvent);

                // Add debug logs
                console.log('End time selected:', selectedOption.dataset.value);
                console.log('End time input value:', inputEndTimeShort.value);
            }


        }

        // Toggle dropdown
        function toggleDropdown(input) {
            // If this is the end time input and start time hasn't been selected, do nothing
            if (input === endTimeInput && !startTimeInput.querySelector('.time-option-homecare.selected')) {
                return;
            }

            const wasActive = input.classList.contains('active-extra');

            // Close all dropdowns
            document.querySelectorAll('.time-input-homecare').forEach(element => {
                element.classList.remove('active-extra');
            });

            // Toggle current dropdown
            if (!wasActive) {
                input.classList.add('active-extra');

                // Scroll to selected option if exists
                const selectedOption = input.querySelector('.time-option-homecare.selected');
                if (selectedOption) {
                    selectedOption.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                }
            }
        }

        // Event listeners
        startTimeInput.addEventListener('click', (e) => {
            if (!e.target.classList.contains('time-option-homecare')) {
                toggleDropdown(startTimeInput);
            }
        });

        endTimeInput.addEventListener('click', (e) => {
            if (!e.target.classList.contains('time-option-homecare')) {
                toggleDropdown(endTimeInput);
            }
        });

        // Handle time option selection
        startTimeList.addEventListener('click', (e) => {
            if (e.target.classList.contains('time-option-homecare')) {
                handleTimeSelection(startTimeInput, e.target);
            }
        });

        endTimeList.addEventListener('click', (e) => {
            if (e.target.classList.contains('time-option-homecare')) {
                handleTimeSelection(endTimeInput, e.target);
            }
        });

        // Close dropdowns when clicking outside
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.time-input-homecare')) {
                document.querySelectorAll('.time-input-homecare').forEach(input => {
                    input.classList.remove('active-extra');
                });
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Time picker elements with long suffix
        const startTimeInput = document.getElementById('start-time-input-long');
        const endTimeInput = document.getElementById('end-time-input-long');
        const startTimeList = document.getElementById('start-time-list-long');
        const endTimeList = document.getElementById('end-time-list-long');
        // Thêm các biến mới
        const divStartTimeLong = document.querySelector("div[id='start-time-input-long']");
        const inputStartTimeLong = document.querySelector("input[class='start-time-input-long']");
        const divEndTimeLong = document.querySelector("div[id='end-time-input-long']");
        const inputEndTimeLong = document.querySelector("input[class='end-time-input-long']");
        const inputStartTimeLongExtra = document.getElementById('start-time-value-long');
        const inputEndTimeLongExtra = document.getElementById('end-time-value-long');
        // Thêm event listeners để verify changes
        divStartTimeLong.addEventListener('change', function () {
            console.log('Long term start time changed:', this.querySelector('.selected-time-homecare-long').textContent);
            console.log('Hidden start time value:', inputStartTimeLong.value);
            inputStartTimeLongExtra.value = inputStartTimeLong.value;
        });

        divEndTimeLong.addEventListener('change', function () {
            console.log('Long term end time changed:', this.querySelector('.selected-time-homecare-long').textContent);
            console.log('Hidden end time value:', inputEndTimeLong.value);
            inputEndTimeLongExtra.value = inputEndTimeLong.value;
        });

        // Initially disable end time picker
        endTimeInput.style.opacity = '0.5';
        endTimeInput.style.pointerEvents = 'none';

        // Get current time and date
        function getCurrentDateTime() {
            const now = new Date();
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();
            const currentDate = now.toISOString().split('T')[0];
            
            return {
                hour: currentHour + (currentMinute / 60),
                date: currentDate,
                isAfter15h: currentHour >= 15
            };
        }

        // Generate start time options based on current time and selected date
        function generateStartTimeOptions(selectedDate) {
            const current = getCurrentDateTime();
            const isToday = selectedDate === current.date;
            
            let minStartHour = 6; // Minimum start time is 6 AM
            
            if (isToday) {
                // If today, start time must be at least 2 hours after current time
                minStartHour = Math.max(6, Math.ceil(current.hour + 2));
                
                // If current time is after 15h (3 PM), no valid start times for today
                if (current.isAfter15h) {
                    return [];
                }
            }
            
            // Maximum start time is 18h (6 PM) to ensure at least 2 hours before 20h
            const maxStartHour = 18;
            
            if (minStartHour > maxStartHour) {
                return [];
            }
            
            return generateTimeOptions(minStartHour, maxStartHour);
        }

        // Generate end time options based on start time
        function generateEndTimeOptions(startHour) {
            const minEndHour = startHour + 2; // At least 2 hours after start time
            const maxEndHour = 20; // Maximum end time is 20h (8 PM)
            
            if (minEndHour > maxEndHour) {
                return [];
            }
            
            // Round up minEndHour to the next available time slot
            const roundedMinEndHour = Math.ceil(minEndHour * 2) / 2;
            
            return generateTimeOptions(roundedMinEndHour, maxEndHour);
        }

        // Generate time options
        function generateTimeOptions(startHour, endHour) {
            const times = [];
            // Convert to 30-minute intervals (0.5 hour increments)
            const startInterval = Math.ceil(startHour * 2) / 2;
            const endInterval = Math.floor(endHour * 2) / 2;
            
            for (let time = startInterval; time <= endInterval; time += 0.5) {
                const hour = Math.floor(time);
                const minute = (time % 1) === 0.5 ? 30 : 0;
                const period = hour >= 12 ? 'PM' : 'AM';
                const displayHour = hour > 12 ? hour - 12 : hour;
                const displayMinute = minute === 0 ? '00' : '30';

                times.push({
                    display: `${displayHour}:${displayMinute} ${period}`,
                    value: `${hour.toString().padStart(2, '0')}:${displayMinute}`,
                    hour: time
                });
            }
            return times;
        }

        // Generate time options for both pickers
        let startTimes = [];
        let endTimes = [];

        // Update class names with long suffix
        function populateTimeList(timeList, times) {
            timeList.innerHTML = '';
            times.forEach(time => {
                const option = document.createElement('div');
                option.className = 'time-option-homecare-long';
                option.textContent = time.display;
                option.dataset.value = time.value;
                option.dataset.hour = time.hour;
                timeList.appendChild(option);
            });
        }

        // Initialize time pickers
        function initializeTimePickers() {
            const current = getCurrentDateTime();
            const dateInput = document.querySelector('input[name="dates"]');
            
            if (dateInput) {
                const selectedDate = dateInput.value || current.date;
                
                // If current time is after 15h and no date selected, set to tomorrow
                if (current.isAfter15h && selectedDate === current.date) {
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    dateInput.value = tomorrow.toISOString().split('T')[0];
                }
                
                // Update start time options based on selected date
                startTimes = generateStartTimeOptions(dateInput.value);
                populateTimeList(startTimeList, startTimes);
                
                // Reset end time picker
                endTimeInput.style.opacity = '0.5';
                endTimeInput.style.pointerEvents = 'none';
                endTimes = [];
                populateTimeList(endTimeList, []);
            }
        }

        // Initialize on page load
        initializeTimePickers();

        // Update time options when date changes
        const dateInput = document.querySelector('input[name="dates"]');
        if (dateInput) {
            dateInput.addEventListener('change', function() {
                startTimes = generateStartTimeOptions(this.value);
                populateTimeList(startTimeList, startTimes);
                
                // Reset end time picker
                endTimeInput.style.opacity = '0.5';
                endTimeInput.style.pointerEvents = 'none';
                endTimes = [];
                populateTimeList(endTimeList, []);
                
                // Clear selected times
                startTimeInput.querySelector('.selected-time-homecare-long').textContent = 'Giờ bắt đầu';
                endTimeInput.querySelector('.selected-time-homecare-long').textContent = 'Giờ kết thúc';
            });
        }

        function updateEndTimeOptions(selectedStartHour) {
            endTimes = generateEndTimeOptions(selectedStartHour);
            populateTimeList(endTimeList, endTimes);

            // Auto-select the time that's 2 hours after start time if available
            const twoHoursLater = selectedStartHour + 2;
            
            // Find the closest time that's at least 2 hours after start time
            let autoSelectTime = null;
            let minDifference = Infinity;
            
            endTimes.forEach(time => {
                if (time.hour >= twoHoursLater) {
                    const difference = time.hour - twoHoursLater;
                    if (difference < minDifference) {
                        minDifference = difference;
                        autoSelectTime = time;
                    }
                }
            });
            
            if (autoSelectTime) {
                const endTimeOption = endTimeList.querySelector(`[data-value="${autoSelectTime.value}"]`);
                if (endTimeOption) {
                    handleTimeSelection(endTimeInput, endTimeOption);
                }
            }
        }

        // Update class names in handleTimeSelection
        function handleTimeSelection(input, selectedOption) {
            const selectedTime = input.querySelector('.selected-time-homecare-long');
            selectedTime.textContent = selectedOption.textContent;
            input.classList.remove('active-extra-long');

            input.querySelectorAll('.time-option-homecare-long').forEach(option => {
                option.classList.remove('selected');
            });
            selectedOption.classList.add('selected');

            if (input === startTimeInput) {
                // Cập nhật giá trị cho input ẩn start time
                inputStartTimeLongExtra.value = selectedOption.dataset.value;
                const selectedHour = parseFloat(selectedOption.dataset.hour);
                endTimeInput.style.opacity = '1';
                endTimeInput.style.pointerEvents = 'auto';
                updateEndTimeOptions(selectedHour);
                // Trigger custom change event
                const event = new Event('change', { bubbles: true });
                divStartTimeLong.dispatchEvent(event);
            } else if (input === endTimeInput) {
                // Cập nhật giá trị cho input ẩn end time
                inputEndTimeLongExtra.value = selectedOption.dataset.value;
                // Trigger change event
                const event = new Event('change', { bubbles: true });
                divEndTimeLong.dispatchEvent(event);
            }
        }

        // Update class names in toggleDropdown
        function toggleDropdown(input) {
            if (input === endTimeInput && !startTimeInput.querySelector('.time-option-homecare-long.selected')) {
                return;
            }

            const wasActive = input.classList.contains('active-extra-long');

            document.querySelectorAll('.time-input-homecare-long').forEach(element => {
                element.classList.remove('active-extra-long');
            });

            if (!wasActive) {
                input.classList.add('active-extra-long');

                const selectedOption = input.querySelector('.time-option-homecare-long.selected');
                if (selectedOption) {
                    selectedOption.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                }
            }
        }

        // Update event listeners
        startTimeInput.addEventListener('click', (e) => {
            if (!e.target.classList.contains('time-option-homecare-long')) {
                toggleDropdown(startTimeInput);
            }
        });

        endTimeInput.addEventListener('click', (e) => {
            if (!e.target.classList.contains('time-option-homecare-long')) {
                toggleDropdown(endTimeInput);
            }
        });

        startTimeList.addEventListener('click', (e) => {
            if (e.target.classList.contains('time-option-homecare-long')) {
                handleTimeSelection(startTimeInput, e.target);
            }
        });

        endTimeList.addEventListener('click', (e) => {
            if (e.target.classList.contains('time-option-homecare-long')) {
                handleTimeSelection(endTimeInput, e.target);
            }
        });

        // Update document click handler
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.time-input-homecare-long')) {
                document.querySelectorAll('.time-input-homecare-long').forEach(input => {
                    input.classList.remove('active-extra-long');
                });
            }
        });

        // Initialize time pickers for long term
        function initializeTimePickersLong() {
            const current = getCurrentDateTime();
            const dateInput = document.querySelector('input[name="dates"]');
            
            if (dateInput) {
                const selectedDate = dateInput.value || current.date;
                
                // If current time is after 15h and no date selected, set to tomorrow
                if (current.isAfter15h && selectedDate === current.date) {
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    dateInput.value = tomorrow.toISOString().split('T')[0];
                }
                
                // Update start time options based on selected date
                startTimes = generateStartTimeOptions(dateInput.value);
                populateTimeList(startTimeList, startTimes);
                
                // Reset end time picker
                endTimeInput.style.opacity = '0.5';
                endTimeInput.style.pointerEvents = 'none';
                endTimes = [];
                populateTimeList(endTimeList, []);
            }
        }

        // Initialize on page load
        initializeTimePickersLong();

        // Update time options when date changes for long term
        const dateInputLong = document.querySelector('input[name="dates"]');
        if (dateInputLong) {
            dateInputLong.addEventListener('change', function() {
                startTimes = generateStartTimeOptions(this.value);
                populateTimeList(startTimeList, startTimes);
                
                // Reset end time picker
                endTimeInput.style.opacity = '0.5';
                endTimeInput.style.pointerEvents = 'none';
                endTimes = [];
                populateTimeList(endTimeList, []);
                
                // Clear selected times
                startTimeInput.querySelector('.selected-time-homecare-long').textContent = 'Giờ bắt đầu';
                endTimeInput.querySelector('.selected-time-homecare-long').textContent = 'Giờ kết thúc';
            });
        }
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Fix selector typo to avoid null reference that would stop subsequent code
        const slider = document.querySelector('.slider-lastest__item--2');
        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.backgroundImage = "url('/img/slider-2.jpg')";
                    observer.unobserve(entry.target);
                }
            });
        });
        if (slider) {
            observer.observe(slider);
        }
        
        // Show notification if exists in URL params
        // Support both patterns:
        // 1) ?type=success|error|warning|info&noti=Message
        // 2) ?success=Message (or error/warning/info)
        const urlParams = new URLSearchParams(window.location.search);
        const type = urlParams.get('type');
        const noti = urlParams.get('noti');
        const success = urlParams.get('success');
        const error = urlParams.get('error');
        const warning = urlParams.get('warning');
        const info = urlParams.get('info');
        
        // Wait for notification-toast to be available
        const checkToast = () => {
            if (window.notificationToast) {
                let shown = false;

                // Pattern 1: type + noti
                if (type && noti) {
                    const message = noti; // URLSearchParams already decodes
                    switch ((type || '').toLowerCase()) {
                        case 'success':
                            window.notificationToast.success(message);
                            break;
                        case 'error':
                            window.notificationToast.error(message);
                            break;
                        case 'warning':
                            window.notificationToast.warning(message);
                            break;
                        default:
                            window.notificationToast.info(message);
                            break;
                    }
                    shown = true;
                }

                // Pattern 2: direct keys
                if (!shown && success) {
                    window.notificationToast.success(success);
                    shown = true;
                }
                if (!shown && error) {
                    window.notificationToast.error(error);
                    shown = true;
                }
                if (!shown && warning) {
                    window.notificationToast.warning(warning);
                    shown = true;
                }
                if (!shown && info) {
                    window.notificationToast.info(info);
                    shown = true;
                }

                // Clean URL if we displayed something
                if (shown) {
                    const newUrl = window.location.pathname;
                    window.history.replaceState({}, '', newUrl);
                }
            } else {
                setTimeout(checkToast, 100);
            }
        };
        
        // Check for any notifications
        if ((type && noti) || success || error || warning || info) {
            checkToast();
        }
    });
</script>
<script>
    // Add form validation for long-term form
    document.addEventListener("DOMContentLoaded", function () {
        const longTermForm = document.getElementById('long-term-form');
        const startDateInput = document.querySelector('input[name="startDate"]');
        const endDateInput = document.querySelector('input[name="endDate"]');
        const submitBtn = document.getElementById('submitForm2');

        // Function to validate dates
        function validateDates() {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);
            
            // Reset error states
            startDateInput.classList.remove('error');
            endDateInput.classList.remove('error');
            
            // Check if dates are selected
            if (!startDateInput.value || !endDateInput.value) {
                return false;
            }
            
            // Check if start date is not equal to end date
            if (startDate.getTime() === endDate.getTime()) {
                startDateInput.classList.add('error');
                endDateInput.classList.add('error');
                alert('Ngày bắt đầu không được trùng với ngày kết thúc!');
                return false;
            }
            
            // Check if start date is before end date
            if (startDate >= endDate) {
                startDateInput.classList.add('error');
                endDateInput.classList.add('error');
                alert('Ngày bắt đầu phải trước ngày kết thúc!');
                return false;
            }
            
            return true;
        }

        // Add validation on date change
        if (startDateInput) {
            startDateInput.addEventListener('change', validateDates);
        }
        if (endDateInput) {
            endDateInput.addEventListener('change', validateDates);
        }

        // Add form submission validation
        if (longTermForm) {
            longTermForm.addEventListener('submit', function(e) {
                if (!validateDates()) {
                    e.preventDefault();
                    return false;
                }
                
                // Additional validation for time selection
                const startTimeValue = document.getElementById('start-time-value-long').value;
                const endTimeValue = document.getElementById('end-time-value-long').value;
                
                if (!startTimeValue || !endTimeValue) {
                    alert('Vui lòng chọn giờ bắt đầu và giờ kết thúc!');
                    e.preventDefault();
                    return false;
                }
            });
        }

        // Add click validation for submit button
        if (submitBtn) {
            submitBtn.addEventListener('click', function(e) {
                if (!validateDates()) {
                    e.preventDefault();
                    return false;
                }
                
                // Additional validation for time selection
                const startTimeValue = document.getElementById('start-time-value-long').value;
                const endTimeValue = document.getElementById('end-time-value-long').value;
                
                if (!startTimeValue || !endTimeValue) {
                    alert('Vui lòng chọn giờ bắt đầu và giờ kết thúc!');
                    e.preventDefault();
                    return false;
                }
            });
        }
    });
</script>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Clicker+Script&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Comprehensive fix to prevent modal flashing */
        .modalHistoryDetailHomeKare, 
        .modalContentHistoryDetailHomeKare,
        .billDetailsHistoryDetailHomeKare,
        .billDetailsHistoryDetailHomeKare *,
        .modalHistoryDetailHomeKare *,
        .modalContentHistoryDetailHomeKare *,
        *:hover,
        *:focus,
        *:active {
            animation: none !important;
            transition: none !important;
            transform: none !important;
            -webkit-animation: none !important;
            -webkit-transition: none !important;
            -webkit-transform: none !important;
            backface-visibility: visible !important;
            perspective: none !important;
        }

        /* Prevent any repaints or reflows that could cause flashing */
        .modalHistoryDetailHomeKare,
        .modalContentHistoryDetailHomeKare,
        .billDetailsHistoryDetailHomeKare {
            will-change: auto !important;
            contain: layout style paint !important;
        }

        /* Force immediate visibility changes without transitions */
        .modalHistoryDetailHomeKare {
            display: none !important;
            opacity: 1 !important;
            visibility: hidden !important;
            transform: translateZ(0) !important;  /* Force hardware acceleration */
        }
        
        .modalHistoryDetailHomeKare.showModalHistoryDetailHomeKare {
            display: block !important;
            opacity: 1 !important;
            visibility: visible !important;
            transform: translateZ(0) !important;  /* Force hardware acceleration */
        }

        /* Disable all hover effects that could cause flashing */
        .btnHistoryDetailHomeKare:hover,
        .detailItemHistoryDetailHomeKare:hover,
        .dayBillHistoryDetailHomeKare:hover,
        .closeModalHistoryDetailHomeKare:hover,
        .modalContentHistoryDetailHomeKare *:hover {
            background-color: inherit !important;
            color: inherit !important;
            border-color: inherit !important;
            transform: none !important;
            box-shadow: none !important;
            transition: none !important;
        }
        
        /* Disable any keyframe animations */
        @keyframes fadeInHistoryDetailHomeKare { 
            from { opacity: 1; }
            to { opacity: 1; }
        }
        
        @keyframes modalFadeInHistoryDetailHomeKare { 
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes blinkHistoryDetailHomeKare {
            0%, 50%, 100% { opacity: 1; }
        }

        /* Global override for any external CSS that might cause flashing */
        .modalHistoryDetailHomeKare *,
        .modalContentHistoryDetailHomeKare *,
        .billDetailsHistoryDetailHomeKare * {
            -webkit-animation-duration: 0s !important;
            -webkit-animation-delay: 0s !important;
            -webkit-animation-iteration-count: 1 !important;
            -webkit-transition-duration: 0s !important;
            -webkit-transition-delay: 0s !important;
            animation-duration: 0s !important;
            animation-delay: 0s !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0s !important;
            transition-delay: 0s !important;
        }
    </style>
    
    <!-- Xóa các import trùng lặp và chỉ giữ lại bộ import này -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- link css -->
    <link rel="stylesheet" href="/css/style.css">
    <!-- script -->
    <script src="/js/scripts.js"></script>
    <link rel="shortcut icon" href="/icon/logo-removeBg.png" type="image/x-icon">
    <script src="https://kit.fontawesome.com/01acedffd5.js" crossorigin="anonymous"></script>
<style>
    /* Tắt tất cả các hiệu ứng và transition để tránh nhấp nháy */
    .billDetailsHistoryDetailHomeKare * {
        animation: none !important;
        transition: none !important;
        transform: none !important;
        backface-visibility: visible !important;
        perspective: none !important;
    }
    
    /* Simplified styles */
    .input-form-accountdetail {
        border-radius: 8px;
        border: 1px solid #e1e1e1;
        padding: 10px 15px;
    }

    .input-form-accountdetail:focus {
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
    }

    .btn-homedetail,
    .itemPayButton {
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: 500;
    }

    .paymentSectionHistoryDetailHomeKare {
        margin-top: 15px;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #e1e1e1;
        background: white;
    }
    
    .cancelSectionHistoryDetailHomeKare {
        margin-top: 15px;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #e1e1e1;
        background: #fff5f5;
        text-align: center;
    }
    
    .actionButtonsHistoryDetailHomeKare {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #e1e1e1;
    }
    
    .actionButtonsHistoryDetailHomeKare .paymentSectionHistoryDetailHomeKare,
    .actionButtonsHistoryDetailHomeKare .cancelSectionHistoryDetailHomeKare {
        margin-top: 10px;
    }
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Status indicators */
    .status-doneHistoryDetailHomeKare,
    .status-assignedHistoryDetailHomeKare,
    .status-pendingHistoryDetailHomeKare,
    .status-cancelHistoryDetailHomeKare,
    .status-wayPaymentHistoryDetailHomeKare,
    .status-processingHistoryDetailHomeKare {
        padding: 6px 12px;
        border-radius: 20px;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        /* Loại bỏ transition để tránh nhấp nháy */
    }

    .status-doneHistoryDetailHomeKare {
        background: #d4edda;
        color: #155724;
        border-left: 3px solid #28a745;
    }

    .status-assignedHistoryDetailHomeKare {
        background: #e3f2fd;
        color: #0d47a1;
        border-left: 3px solid #2196f3;
    }

    .status-pendingHistoryDetailHomeKare {
        background: #fff3e0;
        color: #e65100;
        border-left: 3px solid #ff9800;
    }

    .status-cancelHistoryDetailHomeKare {
        background: #ffebee;
        color: #c62828;
        border-left: 3px solid #f44336;
    }

    .status-wayPaymentHistoryDetailHomeKare {
        background: #fff3cd;
        color: #856404;
        border-left: 3px solid #ffc107;
        /* Loại bỏ hoàn toàn animation để tránh nhấp nháy */
    }

    .status-processingHistoryDetailHomeKare {
        background: #e8eaf6;
        color: #283593;
        border-left: 3px solid #3f51b5;
    }

    /* Đã loại bỏ @keyframes gentlePulse để tránh nhấp nháy */

    /* Modal improvements */
    .modalHistoryDetailHomeKare {
        backdrop-filter: blur(5px);
    }

    .modalContentHistoryDetailHomeKare {
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        /* Loại bỏ animation để tránh nhấp nháy */
        opacity: 1;
        transform: translateY(0);
    }

    /* Đã loại bỏ @keyframes modalFade để tránh nhấp nháy */

    /* Rating stars */
    .rating-stars .fa-star {
        color: #ddd;
        cursor: pointer;
        /* Loại bỏ transition để tránh nhấp nháy */
    }

    .rating-stars .fa-star:hover,
    .rating-stars .fa-star.active {
        color: #ffc107;
        /* Loại bỏ transform để tránh nhấp nháy */
    }

    /* Loading overlay */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(5px);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        opacity: 0;
        visibility: hidden;
        /* Loại bỏ transition để tránh nhấp nháy */
    }

    .loading-overlay.active {
        opacity: 1;
        visibility: visible;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-radius: 50%;
        border-top: 4px solid #3498db;
        /* Loại bỏ animation quay vòng */
    }

    /* Đã loại bỏ @keyframes spin để tránh nhấp nháy */

    /* Style for time labels */
    .detailItemHistoryDetailHomeKare:nth-child(1) .labelHistoryDetailHomeKare,
    .detailItemHistoryDetailHomeKare:nth-child(2) .labelHistoryDetailHomeKare {
        font-weight: normal;
    }
    
    /* Vô hiệu hóa hiệu ứng hover cho tất cả các phần tử trong cửa sổ chi tiết */
    .modalContentHistoryDetailHomeKare *:hover {
        background-color: inherit !important;
        color: inherit !important;
        border-color: inherit !important;
        transform: none !important;
        box-shadow: none !important;
    }

    .labelHistoryDetailHomeKare {
        flex: 0 0 120px;
        color: #34495e;
    }

    /* Province and District Dropdown Styles for Account Form */
    .wrapper-province-account,
    .wrapper-district-account,
    .wrapper-ward-account {
        position: relative !important;
        width: 100% !important;
        margin-bottom: 5px !important;
        box-sizing: border-box !important;
    }

    .wrapper-province__select-btn-account,
    .wrapper-district__select-btn-account,
    .wrapper-ward__select-btn-account {
        display: flex !important;
        height: 40px !important;
        background: #fff !important;
        padding: 8px 12px !important;
        font-size: 14px !important;
        font-weight: 400 !important;
        border-radius: 8px !important;
        border: 1px solid #e1e1e1 !important;
        align-items: center !important;
        cursor: pointer !important;
        justify-content: space-between !important;
        user-select: none !important;
        /* Loại bỏ transition để tránh nhấp nháy */
        box-sizing: border-box !important;
        min-height: 40px !important;
        max-height: 40px !important;
    }

    .wrapper-province__select-btn-account:hover,
    .wrapper-district__select-btn-account:hover,
    .wrapper-ward__select-btn-account:hover {
        border-color: inherit !important;
        background-color: inherit !important;
        box-shadow: none !important;
        transition: none !important;
    }

    .wrapper-province__select-btn-account.active,
    .wrapper-district__select-btn-account.active,
    .wrapper-ward__select-btn-account.active {
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
    }

    .wrapper-province__select-btn-account span,
    .wrapper-district__select-btn-account span,
    .wrapper-ward__select-btn-account span {
        flex: 1 !important;
        color: #333 !important;
        font-size: 14px !important;
        line-height: 1.2 !important;
        white-space: nowrap !important;
        overflow: hidden !important;
        text-overflow: ellipsis !important;
    }

    .wrapper-province__select-btn-account i,
    .wrapper-district__select-btn-account i,
    .wrapper-ward__select-btn-account i {
        font-size: 12px !important;
        color: #666 !important;
        margin-left: 8px !important;
        flex-shrink: 0 !important;
    }

    .wrapper-province__select-btn-account[disabled],
    .wrapper-district__select-btn-account[disabled],
    .wrapper-ward__select-btn-account[disabled] {
        background-color: #f8f9fa;
        cursor: not-allowed;
        opacity: 0.7;
        pointer-events: none;
    }

    .wrapper-province__select-btn-account[disabled] span,
    .wrapper-district__select-btn-account[disabled] span,
    .wrapper-ward__select-btn-account[disabled] span {
        color: #6c757d;
    }

    /* Force compact style for all dropdown elements */
    .form-group-input-form .wrapper-province-account .wrapper-province__select-btn-account,
    .form-group-input-form .wrapper-district-account .wrapper-district__select-btn-account,
    .form-group-input-form .wrapper-ward-account .wrapper-ward__select-btn-account {
        height: auto !important;
        min-height: auto !important;
        max-height: none !important;
        padding: 10px 15px !important;
        font-size: 16px !important;
        line-height: 1.2 !important;
        border: 1px solid #e1e1e1 !important;
        border-radius: 8px !important;
        box-sizing: border-box !important;
    }

    /* Match input style exactly */
    .wrapper-province__select-btn-account,
    .wrapper-district__select-btn-account,
    .wrapper-ward__select-btn-account {
        appearance: none !important;
        -webkit-appearance: none !important;
        -moz-appearance: none !important;
    }

    .wrapper-province__content-account,
    .wrapper-district__content-account,
    .wrapper-ward__content-account {
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background: #fff;
        border-radius: 8px;
        border: 1px solid #e1e1e1;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        max-height: 0;
        overflow: hidden;
        transition: none !important;
    }

    .wrapper-province__content-account.active,
    .wrapper-district__content-account.active,
    .wrapper-ward__content-account.active {
        max-height: 300px;
        overflow-y: auto;
    }

    .warapper-province__search-account,
    .warapper-district__search-account,
    .warapper-ward__search-account {
        position: relative;
        padding: 6px;
        border-bottom: 1px solid #e1e1e1;
    }

    .wrapper-province__input-account,
    .wrapper-district__input-account,
    .wrapper-ward__input-account {
        width: 100%;
        padding: 6px 25px 6px 8px;
        border: 1px solid #e1e1e1;
        border-radius: 6px;
        font-size: 13px;
        outline: none;
    }

    .wrapper-province__input-account:focus,
    .wrapper-district__input-account:focus,
    .wrapper-ward__input-account:focus {
        border-color: #3498db;
    }

    .warapper-province__search-account i,
    .warapper-district__search-account i,
    .warapper-ward__search-account i {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #999;
        font-size: 11px;
    }

    .wrapper-province__options-account,
    .wrapper-district__options-account,
    .wrapper-ward__options-account {
        list-style: none;
        padding: 0;
        margin: 0;
        max-height: 200px;
        overflow-y: auto;
    }

    .wrapper-province__options-account li,
    .wrapper-district__options-account li,
    .wrapper-ward__options-account li {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #f5f5f5;
        /* Loại bỏ transition để tránh nhấp nháy */
        font-size: 13px;
    }

    .wrapper-province__options-account li:hover,
    .wrapper-district__options-account li:hover,
    .wrapper-ward__options-account li:hover {
        background-color: #f8f9fa;
    }

    .wrapper-province__options-account li.selected,
    .wrapper-district__options-account li.selected,
    .wrapper-ward__options-account li.selected {
        background-color: #3498db;
        color: white;
    }

    .wrapper-province__options-account li:last-child,
    .wrapper-district__options-account li:last-child,
    .wrapper-ward__options-account li:last-child {
        border-bottom: none;
    }
    /* Filter Styles */
    .filter-status-container {
        margin: 20px 0;
        background: white;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .filter-status-title {
        font-weight: 500;
        margin-bottom: 10px;
        color: #333;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .filter-status-title i {
        color: #3498db;
    }

    .filter-status-options {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .filter-status-btn {
        background: #f8f9fa;
        border: 1px solid #e1e1e1;
        border-radius: 20px;
        padding: 6px 12px;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .filter-status-btn:hover {
        background: #f1f1f1;
    }

    .filter-status-btn.active {
        background: #3498db;
        color: white;
        border-color: #2980b9;
    }

    /* Empty state */
    .no-results {
        padding: 20px;
        text-align: center;
        color: #666;
        background: #f9f9f9;
        border-radius: 8px;
        margin: 15px 0;
        display: none;
    }

    /* Responsive styles */
    @media (max-width: 768px) {
        .filter-status-options {
            overflow-x: auto;
            padding-bottom: 8px;
            flex-wrap: nowrap;
            -webkit-overflow-scrolling: touch;
        }
        
        .filter-status-btn {
            flex: 0 0 auto;
        }
    }
    /* Styles cho bảng có thể cuộn */
    .table-scroll-wrapper {
        width: 100%;
        overflow-x: auto;
        position: relative;
        margin-bottom: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }
    
    /* Hiệu ứng shadow bên trái khi cuộn */
    .table-scroll-wrapper.is-scrollable-left::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: 10px;
        height: 100%;
        background: linear-gradient(to right, rgba(0,0,0,0.1), transparent);
        pointer-events: none;
        z-index: 1;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    /* Hiệu ứng shadow bên phải khi có thể cuộn */
    .table-scroll-wrapper.is-scrollable-right::after {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        width: 10px;
        height: 100%;
        background: linear-gradient(to left, rgba(0,0,0,0.1), transparent);
        pointer-events: none;
        z-index: 1;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .table-scroll-wrapper.is-scrollable-left::before,
    .table-scroll-wrapper.is-scrollable-right::after {
        opacity: 1;
    }
    
    /* Đảm bảo bảng chiếm đủ chiều rộng */
    .scrollable-table {
        min-width: 100%;
        width: auto;
        margin-bottom: 0;
        border-collapse: separate;
        border-spacing: 0;
    }
    
    /* Cố định header bảng khi cuộn (tùy chọn) */
    .fixed-header .scrollable-table thead th {
        position: sticky;
        top: 0;
        background-color: #f8f9fa;
        z-index: 2;
    }
    
    /* Style cho các hàng và ô trong bảng */
    .scrollable-table th,
    .scrollable-table td {
        white-space: nowrap; /* Ngăn xuống dòng trong ô */
        padding: 12px 15px;
    }
    
    /* Tối ưu hóa hiển thị trên màn hình nhỏ */
    @media (max-width: 768px) {
        .table-scroll-wrapper {
            margin-left: -15px;
            margin-right: -15px;
            width: calc(100% + 30px);
            border-radius: 0;
        }
        
        .scrollable-table th,
        .scrollable-table td {
            padding: 8px 10px;
        }
    }
    
</style>
<style>
    .modern-aside {
        width: 250px;
        min-height: 100vh;
        background: #fff;
        border-right: 1px solid #eaeaea;
        display: flex;
        flex-direction: column;
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        z-index: 100;
        transition: all 0.3s ease;
        box-shadow: 2px 0 8px rgba(0, 0, 0, 0.04);
    }

    .modern-aside__brand {
        display: flex;
        align-items: center;
        justify-content: space-evenly;
        /* Changed from space-around to space-evenly */
        padding: 24px 20px 16px 20px;
        border-bottom: 1px solid #f0f0f0;
    }

    .modern-aside__logo-link {
        display: flex;
        align-items: center;
        gap: 10px;
        text-decoration: none;
    }

    .modern-aside__logo {
        width: 100px;
        height: 100px;
        object-fit: contain;
        border-radius: 8px;
        background: #f8f8f8;
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.08);
    }

    .modern-aside__brand-name {
        font-size: 1.25rem;
        font-weight: 700;
        color: #3498db;
        letter-spacing: 1px;
        font-family: 'Poppins', sans-serif;
    }

    .modern-aside__toggle {
        background: none;
        border: none;
        font-size: 1.3rem;
        color: #666;
        cursor: pointer;
        padding: 6px;
        border-radius: 6px;
        transition: background 0.2s;
        z-index: 200;
        /* Ensure the button stays above other elements */
    }

    .modern-aside__toggle:hover {
        background: #f0f4fa;
    }

    .modern-aside__nav {
        flex: 1;
        padding: 24px 0 0 0;
    }

    .modern-aside__nav ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .modern-aside__nav-link {
        display: flex;
        align-items: center;
        gap: 14px;
        padding: 12px 28px;
        color: #333;
        font-size: 1.5rem;
        font-weight: 500;
        text-decoration: none;
        border-radius: 8px;
        margin: 4px 12px;
        transition: background 0.18s, color 0.18s;
    }

    .modern-aside__nav-link i {
        font-size: 1.15em;
        min-width: 22px;
        text-align: center;
    }

    .modern-aside__nav-link:hover,
    .modern-aside__nav-link.active,
    .modern-aside__nav-link[aria-current="page"] {
        background: #eaf6fd;
        color: #3498db;
    }

    /* Add collapsed state CSS */
    .modern-aside.collapsed {
        width: 64px;
    }

    .modern-aside.collapsed .modern-aside__brand-name,
    .modern-aside.collapsed .modern-aside__nav-link span {
        display: none;
    }

    .modern-aside.collapsed .modern-aside__logo {
        width: 40px;
        height: 40px;
    }

    .modern-aside.collapsed .modern-aside__nav-link {
        justify-content: center;
        padding: 12px 0;
    }

    @media (max-width: 900px) {
        .modern-aside:not(.open) {
            width: 64px;
        }

        .modern-aside:not(.open) .modern-aside__brand-name,
        .modern-aside:not(.open) .modern-aside__nav-link span {
            display: none;
        }

        .modern-aside:not(.open) .modern-aside__logo {
            width: 40px;
            height: 40px;
            margin-right: 0;
        }

        .modern-aside:not(.open) .modern-aside__nav-link {
            justify-content: center;
            padding: 12px 0;
        }
    }

    @media (max-width: 600px) {
        .modern-aside {
            position: fixed;
            left: -250px;
            width: 220px;
            transition: left 0.25s;
        }

        .modern-aside.open {
            left: 0;
        }

        /* Make sure the toggle button is visible on mobile even when menu is hidden */
        .modern-aside__toggle {
            position: fixed;
            top: 10px;
            left: 10px;
            background: #ffffff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .modern-aside.open .modern-aside__toggle {
            position: static;
            box-shadow: none;
        }
    }
</style>
</head>

<body>


    <div class="main-container" style="padding-top:70px;padding-bottom:1000px">
        <div class="profile-container-homecare" style="z-index:99999;">
            <div class="profile-dropdown-homecare">
                <button class="dropdown-btn-homecare">
                    {{!-- <img src="https://via.placeholder.com/40" alt="Profile" class="profile-img-homecare"> --}}
                    <span class="profile-name-homecare">{{user.fullName}}</span>
                    <i class="fas fa-chevron-down"></i>
                </button>
                <div class="dropdown-content-homecare">
                    <div class="dropdown-item-homecare" data-modal="profile">
                        <i class="fas fa-user"></i>
                        Thông tin
                    </div>
                    <div class="dropdown-item-homecare" data-modal="settings">
                        <i class="fas fa-cog"></i>
                        Cài đặt
                    </div>
                    <div class="dropdown-item-homecare" data-modal="messages">
                        <i class="fas fa-envelope"></i>
                        Tin nhắn
                    </div>
                    <div class="dropdown-item-homecare" data-modal="help">
                        <i class="fas fa-question-circle"></i>
                        Trợ giúp
                    </div>
                    <div class="dropdown-item-homecare" data-modal="logout">
                        <a href="#" id="logout-link">
                            <i class="fas fa-sign-out-alt"></i>
                            Đăng xuất
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modals -->
        <div class="modal-homecare" id="profile-modal-homecare" style="z-index:99999;">
            <div class="container-input-form">
                <form id="userForm-input-form" action="/account/update" method="post" novalidate>
                    <h2 class="title-input-form">Thông tin khách hàng</h2>
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="phone">Số điện thoại</label>
                        <input class="input-form-accountdetail" type="tel" id="phone" name="phone"
                            value="{{user.phone}}" pattern="^0\d{9,10}$" readonly required 
                            autocomplete="tel" maxlength="11" style="background-color: #f8f9fa; cursor: not-allowed;">
                        <small class="form-text text-muted">Số điện thoại không thể thay đổi vì lý do bảo mật</small>
                    </div>
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="name">Họ và tên</label>
                        <input class="input-form-accountdetail" type="text" id="name" name="name"
                            value="{{user.fullName}}" disabled required 
                            autocomplete="name" maxlength="100" minlength="2">
                    </div>

                    <div class="form-group-input-form">
                        <label class="label-input-form" for="email">Email</label>
                        <input class="input-form-accountdetail" type="email" id="email" name="email"
                            value="{{user.email}}" disabled 
                            autocomplete="email" maxlength="120" placeholder="you@example.com">
                    </div>

                    <!-- Province dropdown -->
                    {{#if locations}}
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="province">Tỉnh/Thành phố</label>
                        <div class="wrapper-province-account">
                            <div class="wrapper-province__select-btn-account" disabled style="padding: 10px 15px !important; font-size: 16px !important; height: auto !important; min-height: auto !important; line-height: 1.2 !important;">
                                <span id="province-selected">{{#if user.province}}{{user.province}}{{else}}Chọn Tỉnh/Thành phố{{/if}}</span>
                                <i class="fa-solid fa-chevron-down"></i>
                            </div>
                            <div class="wrapper-province__content-account">
                                <div class="warapper-province__search-account">
                                    <input name="province" id="province" class="wrapper-province__input-account" spellcheck="false"
                                        type="text" placeholder="Tìm kiếm tỉnh/thành phố" value="{{user.province}}" disabled required>
                                    <i class="fa-solid fa-magnifying-glass"></i>
                                </div>
                                <ul class="wrapper-province__options-account"></ul>
                            </div>
                        </div>
                    </div>

                    <!-- District dropdown -->
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="district">Quận/Huyện</label>
                        <div class="wrapper-district-account">
                            <div class="wrapper-district__select-btn-account" disabled style="padding: 10px 15px !important; font-size: 16px !important; height: auto !important; min-height: auto !important; line-height: 1.2 !important;">
                                <span id="district-selected">{{#if user.district}}{{user.district}}{{else}}Chọn Quận/Huyện{{/if}}</span>
                                <i class="fa-solid fa-chevron-down"></i>
                            </div>
                            <div class="wrapper-district__content-account">
                                <div class="warapper-district__search-account">
                                    <input name="district" id="district" class="wrapper-district__input-account" spellcheck="false"
                                        type="text" placeholder="Tìm kiếm quận/huyện" value="{{user.district}}" disabled required>
                                    <i class="fa-solid fa-magnifying-glass"></i>
                                </div>
                                <ul class="wrapper-district__options-account"></ul>
                            </div>
                        </div>
                    </div>

                    <!-- Ward dropdown -->
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="ward">Phường/Xã</label>
                        <div class="wrapper-ward-account">
                            <div class="wrapper-ward__select-btn-account" disabled style="padding: 10px 15px !important; font-size: 16px !important; height: auto !important; min-height: auto !important; line-height: 1.2 !important;">
                                <span id="ward-selected">{{#if user.ward}}{{user.ward}}{{else}}Chọn Phường/Xã{{/if}}</span>
                                <i class="fa-solid fa-chevron-down"></i>
                            </div>
                            <div class="wrapper-ward__content-account">
                                <div class="warapper-ward__search-account">
                                    <input id="ward-search" class="wrapper-ward__input-account" spellcheck="false"
                                        type="text" placeholder="Tìm kiếm phường/xã" value="{{user.ward}}" disabled>
                                    <i class="fa-solid fa-magnifying-glass"></i>
                                </div>
                                <ul class="wrapper-ward__options-account"></ul>
                            </div>
                        </div>
                        <!-- Hidden field to hold selected ward value for form submission -->
                        <input type="hidden" id="ward" name="ward" value="{{user.ward}}">
                    </div>
                    {{else}}
                    <!-- Fallback: Text inputs if no locations data -->
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="province">Tỉnh/Thành phố</label>
                        <input class="input-form-accountdetail" type="text" id="province" name="province"
                            value="{{user.province}}" disabled 
                            autocomplete="address-level1" maxlength="100">
                    </div>
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="district">Quận/Huyện</label>
                        <input class="input-form-accountdetail" type="text" id="district" name="district"
                            value="{{user.district}}" disabled 
                            autocomplete="address-level2" maxlength="100">
                    </div>
                    <div class="form-group-input-form">
                        <label class="label-input-form" for="ward">Phường/Xã</label>
                        <input class="input-form-accountdetail" type="text" id="ward" name="ward"
                            value="{{user.ward}}" disabled 
                            autocomplete="address-level3" maxlength="100">
                    </div>
                    {{/if}}

                    <div class="form-group-input-form">
                        <label class="label-input-form" for="address">Địa chỉ chi tiết</label>
                        <input class="input-form-accountdetail" type="text" id="address" name="address"
                            value="{{user.detailAddress}}" disabled required 
                            autocomplete="street-address" maxlength="200" minlength="5">
                    </div>
                    <div class="button-group-input-form">
                        <button type="button" id="editBtn" class="btn-homedetail edit" 
                                aria-label="Chỉnh sửa thông tin khách hàng">chỉnh sửa thông tin</button>
                        <button type="button" id="saveBtn" class="btn-homedetail save" disabled 
                                aria-label="Lưu thay đổi thông tin khách hàng">Lưu thay đổi</button>
                    </div>
                </form>
            </div>
        </div>

        <div class="modal-homecare" id="settings-modal-homecare" style="z-index:99999;">
            <div class="modal-content-homecare">
                <span class="close-btn-homecare">&times;</span>
                <h2 class="modal-title-homecare"><i class="fas fa-cog"></i> Cài đặt</h2>
                <p class="modal-text-homecare">Cài đặt đang hoạt động</p>
            </div>
        </div>

        <div class="modal-homecare" id="messages-modal-homecare" style="z-index:99999;">
            <div class="modal-content-homecare">
                <span class="close-btn-homecare">&times;</span>
                <h2 class="modal-title-homecare"><i class="fas fa-envelope"></i> Tin nhắn</h2>
                <p class="modal-text-homecare">Tin nhắn của bạn sẽ xuất hiện ở đây.</p>
            </div>
        </div>

        <div class="modal-homecare" id="help-modal-homecare" style="z-index:99999;">
            <div class="modal-content-homecare">
                <span class="close-btn-homecare">&times;</span>
                <h2 class="modal-title-homecare"><i class="fas fa-question-circle"></i> Trở giúp</h2>
                <p class="modal-text-homecare">Trợ giúp và hỗ trợ khách Hàng ở đây.</p>
            </div>
        </div>

        <div class="modal-homecare" id="logout-modal-homecare" style="z-index:99999;">
            <div class="modal-content-homecare">
                <span class="close-btn-homecare">&times;</span>
                <h2 class="modal-title-homecare"><i class="fas fa-sign-out-alt"></i> Đăng xuất</h2>
                <p class="modal-text-homecare">Bạn có chắc chắn muốn đăng xuất khỏi tài khoản?</p>
                <button class="logout-btn-homecare">Xác nhận</button>
            </div>
        </div>
        {{!-- aside start --}}
        {{!-- <div class="aside">
            <div class="aside__nav-toggle">
                <span></span>
            </div>
            <div class="aside__logo">
                <a href="/">
                    <div class="logo">
                        <img src="/icon/logo-removeBg.png" alt="grocerymart" class="logo__img-helper logo __img-header">
                    </div>
                </a>
            </div>
            <ul class="aside__nav">
                <li class="aside__item">
                    <a href="/">
                        <i class="fa-brands fa-hire-a-helper"></i>Đặt đơn
                    </a>
                </li>
                <li class="aside__item">
                    <a href="#service-detail" class="aside__nav-active">
                        <i class="fa fa-user"></i>Đổi mật khẩu
                    </a>
                </li>

            </ul>
        </div> --}}
    <aside class="modern-aside">
        <div class="modern-aside__brand">
            <a href="/" class="modern-aside__logo-link" aria-label="Trang chủ">
                <img src="/icon/logo-removeBg.png" alt="Homecare Logo" class="modern-aside__logo" />
            </a>
            <button class="modern-aside__toggle" aria-label="Thu gọn menu" id="asideToggleBtn" type="button">
                <i class="fa-solid fa-bars"></i>
            </button>
        </div>
        <nav class="modern-aside__nav">
            <ul>
                <li>
                    <a href="/" class="modern-aside__nav-link">
                        <i class="fa-solid fa-house"></i>
                        <span>Trang chủ</span>
                    </a>
                </li>
                <li>
                    <a href="#service-detail" class="modern-aside__nav-link">
                        <i class="fa-solid fa-key"></i>
                        <span>Đổi mật khẩu</span>
                    </a>
                </li>
                <li>
                    <a href="/account" class="modern-aside__nav-link">
                        <i class="fa-solid fa-user"></i>
                        <span>Tài khoản</span>
                    </a>
                </li>
                <li>
                    <a href="/orders" class="modern-aside__nav-link">
                        <i class="fa-solid fa-list-check"></i>
                        <span>Quản lý đơn</span>
                    </a>
                </li>
                <li>
                    <a href="/logout" class="modern-aside__nav-link">
                        <i class="fa-solid fa-right-from-bracket"></i>
                        <span>Đăng xuất</span>
                    </a>
                </li>
            </ul>
        </nav>
    </aside>
        {{!-- aside end --}}
        {{!-- main content start --}}
        <div class="main-content">
         
            {{!-- home section end --}}
            {{!-- about section start --}}
            <section class="about-detail section" id="service-detail">
                <div class="home__container-2">
                    <div class="container-homedetail">
                        <!-- Thêm bộ lọc trạng thái vào trên đầu mỗi bảng -->
                        <div class="filter-status-container" id="long-filter-container">
                            <div class="filter-status-title">
                                <i class="fas fa-filter"></i> Lọc theo trạng thái:
                            </div>
                            <div class="filter-status-options">
                                <button class="filter-status-btn active" data-filter="all">
                                    <i class="fas fa-list"></i> Tất cả
                                </button>
                                <button class="filter-status-btn" data-filter="done">
                                    <i class="fas fa-check-circle"></i> Đã hoàn thành
                                </button>
                                {{!-- <button class="filter-status-btn" data-filter="assigned">
                                    <i class="fas fa-user-check"></i> Đã xác nhận
                                </button> --}}
                                <button class="filter-status-btn" data-filter="pending">
                                    <i class="fas fa-clock"></i> Chờ xác nhận
                                </button>
                                <button class="filter-status-btn" data-filter="waitPayment">
                                    <i class="fas fa-money-bill-wave"></i> Chờ thanh toán
                                </button>
                                <button class="filter-status-btn" data-filter="processing">
                                    <i class="fas fa-spinner"></i> Đang thực hiện
                                </button>
                                <button class="filter-status-btn" data-filter="cancelled">
                                    <i class="fas fa-times-circle"></i> Đã hủy
                                </button>
                            </div>
                        </div>
                        <div class="table-section-homedetail">
                            <h2 class="title-homedetail">Dài hạn</h2>
                            <div class="table-container-homedetail" style="max-height: 400px; overflow-y: auto;">
                                <table class="modern-table-homedetail">
                                    <thead>
                                        <tr id="row-{{@index}}" data-request-id="{{_id}}">
                                            <th>Ngày Yêu cầu</th>
                                            <th>Thời gian</th>
                                            <th>Dịch vụ</th>
                                            <th>Tổng tiền</th>
                                            <th>Giờ bắt đầu</th>
                                            <th>Giờ kết thúc</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id="longTermTable-homedetail">
                                        {{#each longTermRequests}}
                                        <tr id="long-row-{{@index}}" data-request-id="{{_id}}" data-status="{{status}}"
                                            class="long-term-row">
                                            <td>{{orderDate}}</td>
                                            <td>{{#if schedules}}{{schedules.length}} ngày{{else}}1 ngày{{/if}}</td>
                                            <td>{{service.title}}</td>
                                            <td>{{#formatMoney totalCost}}{{/formatMoney}}</td>
                                            <td>{{#formatTime startTime }}{{/formatTime}}</td>
                                            <td>{{#formatTime endTime }}{{/formatTime}}</td>
                                            <td>
                                                {{!-- <p class="status-detail cancel">{{status}}</p> --}}
                                                <button class="btnHistoryDetailHomeKare" data-id="{{@index}}"
                                                    data-status="{{status}}" onclick="showBillType(this,'long')"
                                                    aria-label="View Long Term Bill Details">Chi tiết</button>
                                                {{!-- {{request.status}} --}}

                                                <!-- Long Term Modal -->
                                                <div class="modalHistoryDetailHomeKare"
                                                    id="longTermModalHistoryDetailHomeKare" data-request-id="{{_id}}">
                                                    <div class="modalContentHistoryDetailHomeKare">
                                                        <span class="closeModalHistoryDetailHomeKare"
                                                            onclick="closeModal('longTermModalHistoryDetailHomeKare')">&times;</span>
                                                        <div class="modalHeaderHistoryDetailHomeKare">
                                                            <h2 class="modalTitleHistoryDetailHomeKare">Chi tiết hóa đơn
                                                                dài hạn</h2>
                                                        </div>
                                                        <div class="longTermContainerHistoryDetailHomeKare">
                                                            {{#if this.schedules}}
                                                                {{#each this.schedules}}
                                                                <div class="dayBillHistoryDetailHomeKare">
                                                                    <h3 class="dayTitleHistoryDetailHomeKare">
                                                                        Ngày: {{#showdate workingDate}}{{/showdate}}
                                                                    </h3>
                                                                    <div class="billDetailsHistoryDetailHomeKare">
                                                                        <div class="detailItemHistoryDetailHomeKare">
                                                                            <span class="labelHistoryDetailHomeKare">Giờ bắt đầu:</span>
                                                                            <span class="valueHistoryDetailHomeKare">{{#formatTime startTime}}{{/formatTime}}</span>
                                                                        </div>
                                                                        <div class="detailItemHistoryDetailHomeKare">
                                                                            <span class="labelHistoryDetailHomeKare">Giờ kết thúc:</span>
                                                                            <span class="valueHistoryDetailHomeKare">{{#formatTime endTime}}{{/formatTime}}</span>
                                                                        </div>
                                                                        <div class="detailItemHistoryDetailHomeKare">
                                                                            <span class="labelHistoryDetailHomeKare">Trạng thái:</span>
                                                                            <span class="valueHistoryDetailHomeKare status-completeHistoryDetailHomeKare"
                                                                                data-status="{{status}}" data-detail-id="{{_id}}" data-cost="{{cost}}">
                                                                                {{#getStatus status}}{{/getStatus}}
                                                                            </span>
                                                                        </div>
                                                                        <div class="detailItemHistoryDetailHomeKare">
                                                                            <span class="labelHistoryDetailHomeKare">Chi phí:</span>
                                                                            <span class="valueHistoryDetailHomeKare">{{#formatMoney cost}}{{/formatMoney}}</span>
                                                                        </div>
                                                                        <div class="detailItemHistoryDetailHomeKare">
                                                                            <span class="labelHistoryDetailHomeKare">Nhận xét:</span>
                                                                            <p class="commentHistoryDetailHomeKare">
                                                                                {{#if comment.review}}
                                                                                    {{comment.review}}
                                                                                {{else}}
                                                                                    Chưa có nhận xét
                                                                                {{/if}}
                                                                            </p>
                                                                        </div>
                                                                        

                                                                    </div>
                                                                </div>
                                                                {{/each}}
                                                            {{else}}
                                                                <div class="no-schedules-message" style="text-align: center; padding: 20px; color: #666;">
                                                                    <p><i class="fas fa-info-circle"></i> Chưa có lịch trình chi tiết cho đơn hàng này.</p>
                                                                    <p style="font-size: 12px; margin-top: 10px;">
                                                                        Request ID: {{this._id}}<br>
                                                                        Request Type: {{this.requestType}}<br>
                                                                        Schedules Count: {{#if this.schedules}}{{this.schedules.length}}{{else}}0{{/if}}
                                                                    </p>
                                                                </div>
                                                            {{/if}}
                                                            <div class="totalCostHistoryDetailHomeKare">
                                                                <span class="labelHistoryDetailHomeKare">Tổng số
                                                                    tiền:</span>
                                                                <span
                                                                    class="valueHistoryDetailHomeKare">{{#formatMoney totalCost}}{{/formatMoney}}</span>
                                                            </div>
                                                            
                                                            <!-- Nút hành động ở cuối modal -->
                                                            <div class="actionButtonsHistoryDetailHomeKare">
                                                                <!-- Nút thanh toán nếu có schedule nào đó cần thanh toán -->
                                                                {{!-- Removed bulk payment button as requested --}}
                                                                
                                                                <!-- Nút hủy đơn nếu có schedule nào đó chưa thực hiện -->
                                                                {{#if (hasNotDoneSchedules schedules)}}
                                                                <div class="cancelSectionHistoryDetailHomeKare">
                                                                    <button class="btn btn-danger cancelButton" 
                                                                        data-request-id="{{this._id}}"
                                                                        data-type="long">
                                                                        <i class="fas fa-times"></i> Hủy đơn hàng
                                                                    </button>
                                                                </div>
                                                                {{/if}}
                                                            </div>
                                                        </div>

                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        {{/each}}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    
                        <!-- Loading Overlay -->
                        <div class="loading-overlay">
                            <div class="loading-spinner"></div>
                        </div>
                    
                        <!-- Notification Container -->
                        <div class="notification-container"></div>
                    
                        <style>
                            /* Notification styles */
                            .notification-container {
                                position: fixed;
                                top: 20px;
                                right: 20px;
                                z-index: 9999;
                            }
                    
                            .notification {
                                display: flex;
                                align-items: center;
                                padding: 12px 24px;
                                border-radius: 8px;
                                margin-bottom: 10px;
                                color: white;
                                transform: translateX(0);
                                opacity: 1;
                                /* Loại bỏ transition để tránh nhấp nháy */
                            }
                    
                            .notification-success {
                                background: #28a745;
                                box-shadow: 0 4px 12px rgba(40, 167, 69, 0.2);
                            }
                    
                            .notification-error {
                                background: #dc3545;
                                box-shadow: 0 4px 12px rgba(220, 53, 69, 0.2);
                            }
                    
                            .notification-warning {
                                background: #ffc107;
                                box-shadow: 0 4px 12px rgba(255, 193, 7, 0.2);
                                color: #000;
                            }
                    
                            .notification-info {
                                background: #17a2b8;
                                box-shadow: 0 4px 12px rgba(23, 162, 184, 0.2);
                            }
                    
                            .notification-icon {
                                margin-right: 12px;
                                font-size: 18px;
                            }
                    
                            .notification.show {
                                transform: translateX(0);
                                opacity: 1;
                            }
                        </style>
                        <div class="filter-status-container" id="short-filter-container">
                            <div class="filter-status-title">
                                <i class="fas fa-filter"></i> Lọc theo trạng thái:
                            </div>
                            <div class="filter-status-options">
                                <button class="filter-status-btn active" data-filter="all">
                                    <i class="fas fa-list"></i> Tất cả
                                </button>
                                <button class="filter-status-btn" data-filter="done">
                                    <i class="fas fa-check-circle"></i> Đã hoàn thành
                                </button>
                                {{!-- <button class="filter-status-btn" data-filter="assigned">
                                    <i class="fas fa-user-check"></i> Đã xác nhận
                                </button> --}}
                                <button class="filter-status-btn" data-filter="pending">
                                    <i class="fas fa-clock"></i> Chờ xác nhận
                                </button>
                                <button class="filter-status-btn" data-filter="waitPayment">
                                    <i class="fas fa-money-bill-wave"></i> Chờ thanh toán
                                </button>
                                <button class="filter-status-btn" data-filter="processing">
                                    <i class="fas fa-spinner"></i> Đang thực hiện
                                </button>
                                <button class="filter-status-btn" data-filter="cancelled">
                                    <i class="fas fa-times-circle"></i> Đã hủy
                                </button>
                            </div>
                        </div>
                        <div class="table-section-homedetail">
                            <h2 class="title-homedetail">Ngắn hạn</h2>
                            <div class="table-container-homedetail" style="max-height: 400px;overflow-y: auto;">
                                <table class="modern-table-homedetail">
                                    <thead>
                                        <tr id="row-{{@index}}" data-request-id="{{_id}}">
                                            <th>Ngày Yêu cầu</th>
                                            <th>Thời gian</th>
                                            <th>Dịch vụ</th>
                                            <th>Tổng tiền</th>
                                            <th>Giờ bắt đầu</th>
                                            <th>Giờ kết thúc</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id="shortTermTable-homedetail">

                                        {{#each shortTermRequests}}
                                        <tr id="short-row-{{@index}}" data-status="{{status}}" data-request-id="{{_id}}"
                                            class="short-term-row">
                                            <td>{{orderDate}}</td>
                                            <td>{{#if schedules}}{{schedules.length}} ngày{{else}}1 ngày{{/if}}</td>
                                            <td>{{service.title}}</td>
                                            <td>{{#formatMoney totalCost}}{{/formatMoney}}</td>
                                            <td>{{#formatTime startTime }}{{/formatTime}}</td>
                                            <td>{{#formatTime endTime }}{{/formatTime}}</td>
                                            <td>
                                                {{!-- <p class="status-detail cancel">{{status}}</p> --}}
                                                <button class="btnHistoryDetailHomeKare"
                                                    data-id="{{#sum @index ../longTermRequests.length}}{{/sum}}"
                                                    data-status="{{status}}" onclick="showBillType(this,'short')"
                                                    aria-label="View Short Term Bill Details">Chi tiết</button>
                                                <!-- Thay thế phần modal chi tiết ngắn hạn hiện tại -->
                                                <div class="modalHistoryDetailHomeKare"
                                                    id="shortTermModalHistoryDetailHomeKare" data-request-id="{{_id}}">
                                                    <div class="modalContentHistoryDetailHomeKare">
                                                        <span class="closeModalHistoryDetailHomeKare"
                                                            onclick="closeModal('shortTermModalHistoryDetailHomeKare')">&times;</span>
                                                        <div class="modalHeaderHistoryDetailHomeKare">
                                                            <h2 class="modalTitleHistoryDetailHomeKare">Chi tiết hóa đơn
                                                                ngắn hạn</h2>
                                                        </div>
                                                       
                                                        <div class="billDetailsHistoryDetailHomeKare">
                                                            <div class="detailItemHistoryDetailHomeKare">
                                                                <span class="labelHistoryDetailHomeKare">Ngày:</span>
                                                                <span class="valueHistoryDetailHomeKare">{{orderDate}}</span>
                                                            </div>
                                                            <div class="detailItemHistoryDetailHomeKare">
                                                                <span class="labelHistoryDetailHomeKare">Giờ bắt đầu:</span>
                                                                <span class="valueHistoryDetailHomeKare">{{#formatTime startTime}}{{/formatTime}}</span>
                                                            </div>
                                                            <div class="detailItemHistoryDetailHomeKare">
                                                                <span class="labelHistoryDetailHomeKare">Giờ kết thúc:</span>
                                                                <span class="valueHistoryDetailHomeKare">{{#formatTime endTime}}{{/formatTime}}</span>
                                                            </div>
                                                            {{#each schedules}}
                                                            {{#if @first}}
                                                            <div class="detailItemHistoryDetailHomeKare">
                                                                <span class="labelHistoryDetailHomeKare">Trạng thái:</span>
                                                                <span class="valueHistoryDetailHomeKare status-completeHistoryDetailHomeKare"
                                                                    data-status="{{status}}" data-detail-id="{{_id}}" data-cost="{{cost}}">{{#getStatus status}}{{/getStatus}}</span>
                                                            </div>
                                                            <div class="detailItemHistoryDetailHomeKare">
                                                                <span class="labelHistoryDetailHomeKare">Chi phí:</span>
                                                                <span class="valueHistoryDetailHomeKare">{{this.cost}}đ</span>
                                                            </div>
                                                            {{/if}}
                                                            {{/each}}
                                                        

                                                            <div class="detailItemHistoryDetailHomeKare">
                                                                <span class="labelHistoryDetailHomeKare">Nhận xét:</span>
                                                                <p class="commentHistoryDetailHomeKare">{{comment}}</p>
                                                            </div>
                                                            
                                                            <!-- Nút hành động ở cuối modal -->
                                                            <div class="actionButtonsHistoryDetailHomeKare">
                                                                <!-- Nút thanh toán nếu schedule cần thanh toán -->
                                                                {{#each schedules}}
                                                                {{#if @first}}
                                                                {{!-- Payment section removed as per request --}}
                                                                
                                                                <!-- Nút hủy đơn nếu schedule chưa thực hiện -->
                                                                {{#if (eq status "pending")}}
                                                                <div class="cancelSectionHistoryDetailHomeKare">
                                                                    <button class="btn btn-danger cancelButton" 
                                                                        data-request-id="{{../this._id}}"
                                                                        data-type="short">
                                                                        <i class="fas fa-times"></i> Hủy đơn hàng
                                                                    </button>
                                                                </div>
                                                                {{/if}}
                                                                {{/if}}
                                                                {{/each}}
                                                            </div>

                                                        </div>
                                                        {{!-- phần kết --}}
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        {{/each}}
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                </div>
            </section>

        </div>
        {{!-- main content end --}}
    </div>
    {{!-- modal xác nhận thanh toán --}}
    <!-- Modal Xác nhận thanh toán -->
    <div class="modal" id="confirmPaymentModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận thanh toán</h5>
                    <!-- Thay thế nút close hiện tại -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="display: flex
;
    justify-content: center;
    align-items: center;">
                        <span class="btn-close-modal">x</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Bạn xác nhận đã thanh toán cho người giúp việc?</p>
                </div>
                <div class="modal-footer">

                    <button type="button" class="btn btn-primary" id="confirmPayBtn">Xác nhận</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Đánh giá -->
    <div class="modal" id="ratingModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Đánh giá người giúp việc</h5>

                    <a href="/account/detailed" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="display: flex
                ;
                    justify-content: center;
                    align-items: center;">
                        <span class="btn-close-modal">x</span>
                    </a>
                </div>
                <div class="modal-body">
                    <div class="rating-stars">
                        <i class="fas fa-star" data-rating="1"></i>
                        <i class="fas fa-star" data-rating="2"></i>
                        <i class="fas fa-star" data-rating="3"></i>
                        <i class="fas fa-star" data-rating="4"></i>
                        <i class="fas fa-star" data-rating="5"></i>
                    </div>
                    <div class="form-group mt-3">
                        <label for="ratingComment">Nhận xét của bạn:</label>
                        <textarea class="form-control" id="ratingComment" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">

                    <button type="button" class="btn btn-primary" id="submitRatingBtn">Gửi đánh giá</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal Xác nhận hủy đơn -->
    <div class="modal" id="confirmCancelModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận hủy đơn</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                        style="display: flex; justify-content: center; align-items: center;">
                        <span class="btn-close-modal">x</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn hủy đơn hàng này không?</p>
                    <p class="text-danger">Lưu ý: Hành động này không thể hoàn tác!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Không, giữ lại</button>
                    <button type="button" class="btn btn-danger" id="confirmCancelBtn">Có, hủy đơn</button>
                </div>
            </div>
        </div>
    </div>
</body>
<script src="/js/app.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Lưu trữ thông tin đơn hàng hiện tại
        let currentPaymentInfo = {
            scheduleId: null,
            requestId: null,
            type: null
        };

        // Xử lý khi nhấp vào các nút thanh toán
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('itemPayButton') || e.target.closest('.itemPayButton')) {
                const button = e.target.classList.contains('itemPayButton') ? e.target : e.target.closest('.itemPayButton');

                // Lấy thông tin thanh toán
                currentPaymentInfo.scheduleId = button.getAttribute('data-schedule-id');
                currentPaymentInfo.requestId = button.getAttribute('data-request-id');
                currentPaymentInfo.type = button.getAttribute('data-type');
                // Bulk schedules removed

                // Lưu tham chiếu đến nút hiện tại
                window.currentPaymentButton = button;

                // Hiển thị modal xác nhận thanh toán
                const confirmModal = new bootstrap.Modal(document.getElementById('confirmPaymentModal'));
                confirmModal.show();
            }
        });

        // Xử lý nút xác nhận thanh toán
        document.getElementById('confirmPayBtn').addEventListener('click', function () {
            console.log('Xác nhận thanh toán:', currentPaymentInfo);
            
            if (!currentPaymentInfo.requestId) {
                console.error('Thiếu thông tin thanh toán');
                alert('Thông tin thanh toán không hợp lệ!');
                return;
            }

            if (currentPaymentInfo.scheduleId) {
                processSinglePayment(currentPaymentInfo.scheduleId);
            } else {
                alert('Không xác định được lịch để thanh toán.');
            }
        });

        // Xử lý thanh toán đơn lẻ
        function processSinglePayment(scheduleId) {
            // Đóng modal xác nhận
            const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmPaymentModal'));
            confirmModal.hide();

            // Show loading
            document.querySelector('.loading-overlay').classList.add('active');

            fetch('/request/finishpayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    detailId: scheduleId
                })
            }).then(response => {
                if (response.ok) {
                    // Hiển thị modal đánh giá
                    const ratingModal = new bootstrap.Modal(document.getElementById('ratingModal'));
                    
                    // Lưu thông tin cho đánh giá
                    document.getElementById('submitRatingBtn').setAttribute('data-detail-id', scheduleId);
                    document.getElementById('submitRatingBtn').setAttribute('data-request-id', currentPaymentInfo.requestId);
                    document.getElementById('submitRatingBtn').setAttribute('data-type', currentPaymentInfo.type);
                    
                    ratingModal.show();
                } else {
                    alert('Thanh toán thất bại!');
                }
            }).catch(error => {
                console.error('Error processing payment:', error);
                alert('Có lỗi xảy ra khi thanh toán!');
            }).finally(() => {
                // Hide loading
                document.querySelector('.loading-overlay').classList.remove('active');
            });
        }

    // Bulk payment function removed

        // Xử lý gửi đánh giá
        document.getElementById('submitRatingBtn').addEventListener('click', function () {
            const rating =  5 //selectedRating; 
            const comment = document.getElementById('ratingComment').value;
            //const scheduleId =this.getAttribute('data-detail-id');
            const scheduleId = currentPaymentInfo.scheduleId
            const requestId = this.getAttribute('data-request-id');
            const type = this.getAttribute('data-type');
            console.log('Gửi đánh giá cho lịch trình:', scheduleId, requestId, type, rating, comment);

   /*         if (rating === 0) {
                alert('Vui lòng chọn số sao đánh giá!');
                return;
            }*/

            // Mô phỏng gửi đánh giá
            // Show loading
            //ocument.querySelector('.loading-overlay').classList.add('active');

            submitRating(scheduleId, rating, comment)
                .then(success => {
                    console.log('Đánh giá đã được gửi thành công!', success);
                        // Đóng modal đánh giá
                        const ratingModal = bootstrap.Modal.getInstance(document.getElementById('ratingModal'));
                        ratingModal.hide();

                        // Cập nhật giao diện
                        //updateUIAfterPayment(scheduleId, requestId, type);

                        // Hiển thị thông báo thành công với animation
                        //showNotification('success', 'Cảm ơn bạn đã đánh giá! 🌟');
                        
                        window.location.reload(); // Tải lại trang để cập nhật thông tin

                        // Reset form
                        //document.getElementById('ratingComment').value = '';
                        //selectedRating = 0;
                        //highlightStars(0);
                })
                .catch(error => {
                    console.error('Có lỗi xảy ra:', error);
                    //showNotification('error', 'Có lỗi xảy ra: ' + error.message);
                })
                .finally(() => {
                    // Hide loading
                    //document.querySelector('.loading-overlay').classList.remove('active');
                });
        });

        // Hàm mô phỏng xử lý thanh toán
        function processPayment(scheduleId, requestId, type) {
            //console.log(`Xử lý thanh toán cho lịch trình ${scheduleId} thuộc đơn hàng ${requestId} (${type})`);
            //console.log('Đang xử lý thanh toán...', scheduleId, requestId, type);
            // Trong thực tế, đây sẽ là một API call

            return fetch('/request/finishpayment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    detailId: scheduleId
                })
            }).then(response => {
        if (!response.ok) {
            throw new Error(`Payment failed with status ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Thanh toán thành công:', data);
        return data; // Return the parsed response
    })
    .catch(error => {
        console.error('Có lỗi xảy ra:', error);
        throw error; // Reject the promise with the error
    });

   /*         return new Promise(resolve => {
                setTimeout(() => {
                    resolve(true); // Giả lập thanh toán thành công
                }, 500);
            });*/
        }

        // Hàm mô phỏng gửi đánh giá
        function submitRating(scheduleId, rating, comment) {
     /*       console.log(`Gửi đánh giá ${rating} sao cho lịch trình ${scheduleId} thuộc đơn hàng ${requestId} (${type})`);
            */console.log(`Nhận xét: ${comment}`);

            // Trong thực tế, đây sẽ là một API call



            return fetch('/request/review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    detailId: scheduleId,
                    comment: {
                        review: comment,
                        loseThings:false,
                        breakThings:false,
                    }
                })
            }).then(data => {
                return Promise.resolve()
            }).catch(error => {
                console.error('Có lỗi xảy ra:', error);
                return Promise.reject(error);
            });
        }

        // Cập nhật UI sau khi thanh toán
        function updateUIAfterPayment(scheduleId, requestId, type) {
            // Tìm và cập nhật trạng thái phần tử cụ thể
            if (window.currentPaymentButton) {
                // Tìm phần tử cha chứa paymentSection
                const paymentSection = window.currentPaymentButton.closest('.paymentSectionHistoryDetailHomeKare');
                if (paymentSection) {
                    // Ẩn phần thanh toán đã hoàn thành
                    paymentSection.style.display = 'none';

                    // Tìm phần tử trạng thái gần nhất và cập nhật
                    const container = paymentSection.closest('.billDetailsHistoryDetailHomeKare');
                    if (container) {
                        const statusElement = container.querySelector('.status-completeHistoryDetailHomeKare');
                        if (statusElement) {
                            // Cập nhật status thành 'done'
                            statusElement.setAttribute('data-status', 'done');
                            updateStatusStyle(statusElement, 'done');
                        }
                    }
                }
            }
        }

        // Cập nhật hiển thị trạng thái (sử dụng lại từ code ban đầu)
        function updateStatusStyle(element, status) {
            const statusMap = {
                'done': {
                    class: 'status-doneHistoryDetailHomeKare',
                    icon: '<i class="fas fa-check-circle"></i>',
                    text: 'Đã hoàn thành'
                },
                'assigned': {
                    class: 'status-assignedHistoryDetailHomeKare',
                    icon: '<i class="fas fa-user-check"></i>',
                    text: 'Đã xác nhận'
                },
                'pending': {
                    class: 'status-pendingHistoryDetailHomeKare',
                    icon: '<i class="fas fa-clock"></i>',
                    text: 'Chờ xác nhận'
                },
                'cancelled': {
                    class: 'status-cancelHistoryDetailHomeKare',
                    icon: '<i class="fas fa-times-circle"></i>',
                    text: 'Đã hủy'
                },
                'waitPayment': {
                    class: 'status-wayPaymentHistoryDetailHomeKare',
                    icon: '<i class="fas fa-money-bill-wave"></i>',
                    text: 'Chờ thanh toán'
                },
                'processing': {
                    class: 'status-processingHistoryDetailHomeKare',
                    icon: '<i class="fas fa-spinner fa-spin"></i>',
                    text: 'Đang thực hiện'
                }
            };

            // Xóa tất cả các classes trạng thái cũ
            element.classList.remove(
                'status-doneHistoryDetailHomeKare',
                'status-assignedHistoryDetailHomeKare',
                'status-pendingHistoryDetailHomeKare',
                'status-cancelHistoryDetailHomeKare',
                'status-wayPaymentHistoryDetailHomeKare',
                'status-processingHistoryDetailHomeKare'
            );

            const statusInfo = statusMap[status] || statusMap.pending;
            element.classList.add(statusInfo.class);
            element.innerHTML = `${statusInfo.icon} ${statusInfo.text}`;
        }
    });
</script>

<script>
    window.addEventListener('load', function () {
        try {
            console.log('Starting search box initialization...');

            // Thêm thanh tìm kiếm cho cả hai bảng
            addSearchBoxes();

            function addSearchBoxes() {
                console.log('Finding table sections...');
                // Tìm các phần tử bảng
                const tables = document.querySelectorAll('.table-section-homedetail');
                console.log(`Found ${tables.length} table sections`);

                // Kiểm tra và lấy bảng dài hạn (bảng đầu tiên)
                if (tables.length > 0) {
                    const longTermTable = tables[0];
                    const title = longTermTable.querySelector('.title-homedetail');
                    if (title) {
                        console.log('Found title for long term table');
                        const tableContainer = longTermTable.querySelector('.table-container-homedetail');
                        addSearchBox(title, tableContainer, 'long');
                    }
                }

                // Kiểm tra và lấy bảng ngắn hạn (bảng thứ hai)
                if (tables.length > 1) {
                    const shortTermTable = tables[1];
                    const title = shortTermTable.querySelector('.title-homedetail');
                    if (title) {
                        console.log('Found title for short term table');
                        const tableContainer = shortTermTable.querySelector('.table-container-homedetail');
                        addSearchBox(title, tableContainer, 'short');
                    }
                }
            }

            function addSearchBox(titleElement, tableContainer, type) {
                console.log(`Adding search box for ${type} term table`);
                // Tạo container cho thanh tìm kiếm
                const searchContainer = document.createElement('div');
                searchContainer.className = 'search-container';
                searchContainer.style.cssText = 'margin-top: 10px; margin-bottom: 20px; display: flex; align-items: center;';

                // Tạo input tìm kiếm
                const searchInput = document.createElement('input');
                searchInput.type = 'text';
                searchInput.id = `${type}-term-search`;
                searchInput.className = 'search-input';
                searchInput.placeholder = 'Tìm kiếm đơn hàng...';
                searchInput.style.cssText = 'padding: 10px 15px; border: 1px solid #e1e1e1; border-radius: 8px; flex: 1; font-size: 14px; outline: none;';

                // Tạo nút xóa tìm kiếm
                const clearButton = document.createElement('button');
                clearButton.type = 'button';
                clearButton.className = 'clear-search-btn';
                clearButton.innerHTML = '<i class="fas fa-times"></i>';
                clearButton.style.cssText = 'background: none; border: none; margin-left: -30px; color: #999; cursor: pointer; visibility: hidden;';

                // Tạo icon tìm kiếm
                const searchIcon = document.createElement('div');
                searchIcon.className = 'search-icon';
                searchIcon.innerHTML = '<i class="fas fa-search"></i>';
                searchIcon.style.cssText = 'margin-right: 10px; color: #666;';

                // Thêm các phần tử vào container
                searchContainer.appendChild(searchIcon);
                searchContainer.appendChild(searchInput);
                searchContainer.appendChild(clearButton);

                // Thêm container vào sau tiêu đề
                titleElement.parentNode.insertBefore(searchContainer, titleElement.nextSibling);
                console.log(`Search box added for ${type} term table`);

                // Xử lý sự kiện input
                searchInput.addEventListener('input', function () {
                    // Chuyển đổi giá trị tìm kiếm thành chữ thường và loại bỏ khoảng trắng đầu cuối
                    const searchValue = this.value.toLowerCase().trim();
                    clearButton.style.visibility = searchValue ? 'visible' : 'hidden';
                    filterTableByContainer(tableContainer, searchValue, type);
                });

                // Xử lý sự kiện nút xóa
                clearButton.addEventListener('click', function () {
                    searchInput.value = '';
                    clearButton.style.visibility = 'hidden';
                    filterTableByContainer(tableContainer, '', type);
                    searchInput.focus();
                });

                // Xử lý khi nhấn phím Esc
                searchInput.addEventListener('keydown', function (e) {
                    if (e.key === 'Escape') {
                        searchInput.value = '';
                        clearButton.style.visibility = 'hidden';
                        filterTableByContainer(tableContainer, '', type);
                    }
                });
            }

            function filterTableByContainer(tableContainer, searchValue, type) {
                console.log(`Filtering ${type} term table for: "${searchValue}"`);
                // Kiểm tra tableContainer có tồn tại không
                if (!tableContainer) {
                    console.error(`Table container for ${type} term not found`);
                    return;
                }

                // Tìm bảng trong container
                const table = tableContainer.querySelector('table');
                if (!table) {
                    console.error(`Table element not found in ${type} term container`);
                    return;
                }

                // Lọc theo hai loại hàng (dài hạn và ngắn hạn)
                const rows = table.querySelectorAll(`.${type}-term-row`);
                console.log(`Found ${rows.length} ${type}-term rows`);

                let hasVisibleRows = false;

                rows.forEach(row => {
                    let found = false;

                    // Tạo một chuỗi văn bản kết hợp từ tất cả các ô trong hàng
                    let rowText = '';
                    Array.from(row.cells).forEach(cell => {
                        // Thêm nội dung từ mỗi ô vào chuỗi rowText
                        rowText += cell.textContent + ' ';
                    });

                    // Chuyển đổi cả hai thành chữ thường để không phân biệt hoa thường
                    rowText = rowText.toLowerCase();

                    // Kiểm tra nếu chuỗi tìm kiếm nằm trong chuỗi văn bản của hàng
                    if (rowText.includes(searchValue)) {
                        found = true;
                    }

                    // Hiển thị hoặc ẩn hàng
                    if (found || searchValue === '') {
                        row.style.display = '';
                        hasVisibleRows = true;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Hiển thị thông báo nếu không có kết quả
                let noResultsElement = tableContainer.nextElementSibling;
                if (noResultsElement && !noResultsElement.classList.contains('no-results-message')) {
                    noResultsElement = null;
                }

                if (!noResultsElement && !hasVisibleRows && searchValue) {
                    createNoResultsMessage(tableContainer, type);
                } else if (noResultsElement) {
                    noResultsElement.style.display = (!hasVisibleRows && searchValue) ? 'block' : 'none';
                }
            }

            function createNoResultsMessage(tableContainer, type) {
                // Tạo thông báo không có kết quả
                const noResults = document.createElement('div');
                noResults.className = 'no-results-message';
                noResults.style.cssText = 'padding: 20px; text-align: center; color: #666; background: #f9f9f9; border-radius: 8px; margin: 15px 0; display: block;';
                noResults.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                        <i class="fas fa-search" style="font-size: 24px; margin-bottom: 10px; color: #999;"></i>
                        <p>Không tìm thấy đơn hàng nào phù hợp với tìm kiếm của bạn</p>
                    </div>
                `;

                // Thêm thông báo sau bảng
                tableContainer.parentNode.insertBefore(noResults, tableContainer.nextSibling);
                console.log(`No results message created for ${type} term table`);
            }

            // Thêm style cho thanh tìm kiếm
            const style = document.createElement('style');
            style.textContent = `
                .search-input:focus {
                    border-color: #3498db !important;
                    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2) !important;
                }
                
                .search-container:hover .search-icon {
                    color: #3498db !important;
                }
                
                .clear-search-btn:hover {
                    color: #666 !important;
                }
                
                .no-results-message {
                    padding: 20px;
                    text-align: center;
                    color: #666;
                    background: #f9f9f9;
                    border-radius: 8px;
                    margin: 15px 0;
                }
                
                @media (max-width: 768px) {
                    .search-container {
                        margin-bottom: 10px !important;
                    }
                    
                    .search-input {
                        font-size: 14px !important;
                        padding: 8px 12px !important;
                    }
                }
            `;
            document.head.appendChild(style);
            console.log('Search box styles added');

        } catch (error) {
            console.error('Error in search box script:', error);
        }
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Thêm bộ lọc trước bảng dài hạn và ngắn hạn
        const longTermTable = document.querySelector('.table-section-homedetail:nth-child(1) .table-container-homedetail');
        const shortTermTable = document.querySelector('.table-section-homedetail:nth-child(3) .table-container-homedetail');

        // Tạo và thêm bộ lọc
        const longTermFilter = createFilterElement('long-term-filter', 'long');
        longTermFilter.dataset.type = 'long';
        const shortTermFilter = createFilterElement('short-term-filter', 'short');
        shortTermFilter.dataset.type = 'short';

        if (longTermTable) {
            longTermTable.parentNode.insertBefore(longTermFilter, longTermTable);
        }

        if (shortTermTable) {
            shortTermTable.parentNode.insertBefore(shortTermFilter, shortTermTable);
        }

        // Tạo phần tử thông báo không có kết quả
        const longTermNoResults = createNoResultsElement();
        const shortTermNoResults = createNoResultsElement();

        if (longTermTable) {
            longTermTable.parentNode.insertBefore(longTermNoResults, longTermTable.nextSibling);
        }

        if (shortTermTable) {
            shortTermTable.parentNode.insertBefore(shortTermNoResults, shortTermTable.nextSibling);
        }

        // Thêm sự kiện cho các nút lọc
        document.querySelectorAll('.filter-status-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const filter = this.getAttribute('data-filter');
                const filterContainer = this.closest('.filter-status-container');
                console.log('Filter container:', filterContainer.id);

                const tableType = filterContainer.id.includes('short-filter-container') ? 'short' : 'long';
                console.log(`Filtering ${tableType} term rows by:`, filter);
                // Cập nhật UI của nút
                filterContainer.querySelectorAll('.filter-status-btn').forEach(b => {
                    b.classList.remove('active');
                });
                this.classList.add('active');

                // Lọc dữ liệu
                filterRows(filter, tableType);
            });
        });

        // Hàm tạo phần tử bộ lọc
        function createFilterElement(id,type) {
            console.log(type);
            const filterContainer = document.createElement('div');
            filterContainer.className = 'filter-status-container';
            filterContainer.id = id;
            filterContainer.dataset.type = type; // Thêm data attribute
            filterContainer.innerHTML = `
                <div class="filter-status-title">
                    <i class="fas fa-filter"></i> Lọc theo trạng thái:
                </div>
                <div class="filter-status-options">
                    <button class="filter-status-btn active" data-filter="all">
                        <i class="fas fa-list"></i> Tất cả
                    </button>
                    <button class="filter-status-btn" data-filter="done">
                        <i class="fas fa-check-circle"></i> Đã hoàn thành
                    </button>
                    <button class="filter-status-btn" data-filter="assigned">
                        <i class="fas fa-user-check"></i> Đã xác nhận
                    </button>
                    <button class="filter-status-btn" data-filter="pending">
                        <i class="fas fa-clock"></i> Chờ xác nhận
                    </button>
                    <button class="filter-status-btn" data-filter="waitPayment">
                        <i class="fas fa-money-bill-wave"></i> Chờ thanh toán
                    </button>
                    <button class="filter-status-btn" data-filter="processing">
                        <i class="fas fa-spinner"></i> Đang thực hiện
                    </button>
                    <button class="filter-status-btn" data-filter="cancelled">
                        <i class="fas fa-times-circle"></i> Đã hủy
                    </button>
                </div>
            `;
            return filterContainer;
        }

        // Hàm tạo thông báo không có kết quả
        function createNoResultsElement() {
            const noResults = document.createElement('div');
            noResults.className = 'no-results';
            noResults.innerHTML = `
                <i class="fas fa-search"></i>
                <p>Không tìm thấy đơn hàng nào với trạng thái đã chọn</p>
            `;
            return noResults;
        }

        // Hàm lọc dữ liệu
        function filterRows(filter, tableType) {
            console.log(`test Filtering ${tableType} term rows by:`, filter);
            const rows = document.querySelectorAll(`.${tableType}-term-row`);
            const noResultsElement = document.querySelector(`#${tableType}-term-filter + .table-container-homedetail + .no-results`);
            let hasVisibleRows = false;

            rows.forEach(row => {
                const status = row.getAttribute('data-status');

                if (filter === 'all' || status === filter) {
                    row.style.display = '';
                    hasVisibleRows = true;
                } else {
                    row.style.display = 'none';
                }
            });

            // Hiển thị thông báo nếu không có kết quả
            if (noResultsElement) {
                noResultsElement.style.display = hasVisibleRows ? 'none' : 'block';
            }
        }
    });
</script>
<script>
    // Hàm lọc kết hợp (tìm kiếm + trạng thái)
    console.log('Initializing combined filter functionality...');
        function applyAllFilters(tableId, searchValue, statusFilter) {
            const tableRows = document.querySelectorAll(`#${tableId} tr`);
            let hasVisibleRows = false;

            tableRows.forEach(row => {
                // Bỏ qua hàng tiêu đề
                if (row.querySelector('th')) return;

                const rowStatus = row.getAttribute('data-status');
                const matchesStatus = statusFilter === 'all' || rowStatus === statusFilter;

                let matchesSearch = false;

                // Tìm kiếm trong tất cả các cột
                if (searchValue === '') {
                    matchesSearch = true;
                } else {
                    Array.from(row.cells).forEach(cell => {
                        if (cell.textContent.toLowerCase().includes(searchValue)) {
                            matchesSearch = true;
                        }
                    });
                }

                // Hiển thị hoặc ẩn hàng
                if (matchesSearch && matchesStatus) {
                    row.style.display = '';
                    hasVisibleRows = true;
                } else {
                    row.style.display = 'none';
                }
            });

            // Hiển thị thông báo nếu không có kết quả
            updateNoResultsMessage(tableId, hasVisibleRows, searchValue || statusFilter !== 'all');
        }

        function updateNoResultsMessage(tableId, hasVisibleRows, hasFilters) {
            const noResultsElement = document.querySelector(`#${tableId}-no-results`);

            if (!hasVisibleRows && hasFilters) {
                if (!noResultsElement) {
                    createNoResultsMessage(tableId);
                } else {
                    noResultsElement.style.display = 'block';
                }
            } else if (noResultsElement) {
                noResultsElement.style.display = 'none';
            }
        }

        // Cập nhật các event listener để kích hoạt lọc kết hợp
        function updateFilterEvents() {
            // Cập nhật event listener cho ô tìm kiếm
            document.querySelectorAll('.search-input').forEach(input => {
                const tableId = input.id.includes('long') ? 'longTermTable-homedetail' : 'shortTermTable-homedetail';
                const tableType = input.id.includes('long') ? 'long' : 'short';

                input.addEventListener('input', function () {
                    const searchValue = this.value.toLowerCase().trim();
                    const statusFilter = document.querySelector(`#${tableType}-term-filter .filter-status-btn.active`).getAttribute('data-filter');
                    applyAllFilters(tableId, searchValue, statusFilter);
                });
            });

            // Cập nhật event listener cho nút lọc trạng thái
            document.querySelectorAll('.filter-status-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const filter = this.getAttribute('data-filter');
                    const filterContainer = this.closest('.filter-status-container');
                    const tableType = filterContainer.id.includes('long') ? 'long' : 'short';
                    const tableId = `${tableType}TermTable-homedetail`;

                    // Cập nhật UI của nút
                    filterContainer.querySelectorAll('.filter-status-btn').forEach(b => {
                        b.classList.remove('active');
                    });
                    this.classList.add('active');

                    // Lấy giá trị tìm kiếm hiện tại
                    const searchValue = document.getElementById(`${tableType}-term-search`).value.toLowerCase().trim();

                    // Áp dụng cả hai bộ lọc
                    applyAllFilters(tableId, searchValue, filter);
                });
            });
        }

        // Gọi hàm cập nhật sau khi tất cả các phần tử đã được tạo
        setTimeout(updateFilterEvents, 500);
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Kiểm tra trạng thái hoàn thành và hiển thị nút thanh toán
        function checkAllBillsCompleted() {
            const statusElements = document.querySelectorAll('.valueHistoryDetailHomeKare.status-completeHistoryDetailHomeKare');
            return Array.from(statusElements).every(el => el.textContent.trim() === 'Đã hoàn thành');
        }

        function updatePayButtonVisibility() {
            const payButton = document.getElementById('payButton');
            if (checkAllBillsCompleted()) {
                payButton.style.display = 'block';
            } else {
                payButton.style.display = 'none';
            }
        }


    });
</script>
<script>
    const nav = document.querySelector(".aside__nav"),
        navList = nav.querySelectorAll(".aside__item"),
        totalNavList = navList.length,
        allSection = document.querySelectorAll(".section"), totalSection = allSection.length;
    for (let i = 0; i < totalNavList; i++) {

        const a = navList[i].querySelector("a");
        a.addEventListener("click", function () {

            removeBackSection();
            for (let j = 0; j < totalNavList; j++) {
                if (navList[j].querySelector("a").classList.contains("aside__nav-active")) {
                    addBackSection(j);
                    //allSection[j].classList.add("back-section");
                }
                navList[j].querySelector("a").classList.remove("aside__nav-active");
            }
            this.classList.add("aside__nav-active");
            showSection(this);
            if (window.innerWidth < 1200) {
                asideSectionToggleBtn();
            }
        })
    }
    function addBackSection(num) {
        allSection[num].classList.add("back-section");
    }
    function removeBackSection() {
        for (let i = 0; i < totalSection; i++) {
            allSection[i].classList.remove("back-section");
        }
    }
    function showSection(element) {
        for (let i = 0; i < totalSection; i++) {
            allSection[i].classList.remove("home-active");
        }
        const target = element.getAttribute("href").split("#")[1];

        document.querySelector("#" + target).classList.add("home-active");

    }
    function updateNav(element) {

        for (let i = 0; i < totalSection; i++) {
            navList[i].querySelector("a").classList.remove("aside__nav-active");
            const target = element.getAttribute("href").split("#")[1];
            if (target === navList[i].querySelector("a").getAttribute("href").split("#")[1]) {
                navList[i].querySelector("a").classList.add("aside__nav-active");
            }
        }


    }

    const navToggleBtn = document.querySelector('.aside__nav-toggle'), aside = document.querySelector(".aside");
    navToggleBtn.addEventListener("click", () => {
        asideSectionToggleBtn();
    })
    function asideSectionToggleBtn() {
        aside.classList.toggle("open");
        navToggleBtn.classList.toggle("open");
        for (let i = 0; i < totalSection; i++) {
            allSection[i].classList.toggle('open');
        }
    }


</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get form elements
        const form = document.getElementById('userForm-input-form');
        const inputs = form.querySelectorAll('.input-form-accountdetail');
        const editBtn = document.getElementById('editBtn');
        const saveBtn = document.getElementById('saveBtn');
        const phoneInput = document.getElementById('phone');

        // Get province, district and ward dropdown elements
    const provinceDropdown = document.querySelector('.wrapper-province-account');
    const districtDropdown = document.querySelector('.wrapper-district-account');
    const wardDropdown = document.querySelector('.wrapper-ward-account');
    // Note: these can be re-created (cloned) later, so prefer re-querying when mutating
    let provinceBtn = document.querySelector('.wrapper-province__select-btn-account');
    let districtBtn = document.querySelector('.wrapper-district__select-btn-account');
    let wardBtn = document.querySelector('.wrapper-ward__select-btn-account');
        const provinceContent = document.querySelector('.wrapper-province__content-account');
        const districtContent = document.querySelector('.wrapper-district__content-account');
        const wardContent = document.querySelector('.wrapper-ward__content-account');
        const provinceInput = document.getElementById('province');
        const districtInput = document.getElementById('district');
        const wardInput = document.getElementById('ward');
        const provinceSelected = document.getElementById('province-selected');
        const districtSelected = document.getElementById('district-selected');
        const wardSelected = document.getElementById('ward-selected');

        // Phone number validation
        phoneInput.addEventListener('input', function (e) {
            this.value = this.value.replace(/[^0-9]/g, '');
        });

        // Initialize dropdowns if locations exist
        {{#if locations}}
        initializeDropdowns();
        {{/if}}

        // Edit button click handler
        editBtn.addEventListener('click', function () {
            // Confirm if user wants to edit
            if (!confirm('Bạn có muốn chỉnh sửa thông tin không?')) {
                return;
            }

            // Enable all inputs except phone (phone is readonly for security)
            inputs.forEach(input => {
                if (input.id !== 'phone') { // Keep phone readonly for security
                    input.disabled = false;
                }
            });

            // Enable dropdowns if they exist
            // Re-query buttons in case district/province buttons were re-created
            provinceBtn = document.querySelector('.wrapper-province__select-btn-account');
            districtBtn = document.querySelector('.wrapper-district__select-btn-account');
            wardBtn = document.querySelector('.wrapper-ward__select-btn-account');

            if (provinceBtn) {
                provinceBtn.style.pointerEvents = 'auto';
                provinceBtn.style.opacity = '1';
                provinceBtn.removeAttribute('disabled');
            }
            if (districtBtn) {
                // Only enable district if a province is already selected
                const hasProvince = (provinceInput && provinceInput.value && provinceInput.value.trim().length > 0);
                if (hasProvince) {
                    districtBtn.style.pointerEvents = 'auto';
                    districtBtn.style.opacity = '1';
                    districtBtn.removeAttribute('disabled');
                } else {
                    districtBtn.style.pointerEvents = 'none';
                    districtBtn.style.opacity = '0.7';
                    districtBtn.setAttribute('disabled', 'true');
                }
            }
            if (wardBtn) {
                // Only enable ward if a district is already selected
                const hasDistrict = (districtInput && districtInput.value && districtInput.value.trim().length > 0);
                if (hasDistrict) {
                    wardBtn.style.pointerEvents = 'auto';
                    wardBtn.style.opacity = '1';
                    wardBtn.removeAttribute('disabled');
                } else {
                    wardBtn.style.pointerEvents = 'none';
                    wardBtn.style.opacity = '0.7';
                    wardBtn.setAttribute('disabled', 'true');
                }
            }

            // Also enable the hidden form inputs for province/district so they are included in FormData
            if (provinceInput) {
                provinceInput.disabled = false;
            }
            if (districtInput) {
                districtInput.disabled = false;
            }
            if (wardInput) {
                wardInput.disabled = false;
            }

            // Switch button states
            editBtn.disabled = true;
            saveBtn.disabled = false;

            // Add visual indicator for edit mode
            form.style.border = '2px solid #007bff';
            form.style.borderRadius = '8px';

            // Focus on first editable input
            const firstEditableInput = Array.from(inputs).find(input => !input.disabled);
            if (firstEditableInput) {
                firstEditableInput.focus();
            }
        });

        // Save button click handler
        saveBtn.addEventListener('click', function (e) {
            e.preventDefault();
            
            // Prevent double submission
            if (saveBtn.disabled) return;
            
            // Basic validation
            let isValid = true;
            let errorMessages = [];

            inputs.forEach(input => {
                if (!input.disabled && !input.value.trim()) {
                    isValid = false;
                    input.style.borderColor = '#ff4444';
                    showError(input, 'Trường này không được để trống');
                } else if (!input.disabled) {
                    input.style.borderColor = '#e1e1e1';
                    clearError(input);
                }
            });

            // Enhanced phone number validation (skip since phone is disabled/readonly)
            // Phone validation is not needed since it cannot be changed
            
            // Name validation
            const nameInput = document.getElementById('name');
            if (nameInput.value.trim().length < 2) {
                isValid = false;
                nameInput.style.borderColor = '#ff4444';
                showError(nameInput, 'Họ tên phải có ít nhất 2 ký tự');
                errorMessages.push('Họ tên quá ngắn');
            }

            // Address validation
            const addressInput = document.getElementById('address');
            if (addressInput.value.trim().length < 5) {
                isValid = false;
                addressInput.style.borderColor = '#ff4444';
                showError(addressInput, 'Địa chỉ chi tiết phải có ít nhất 5 ký tự');
                errorMessages.push('Địa chỉ chi tiết quá ngắn');
            }

            // Province validation
            const provinceInputVal = document.getElementById('province');
            if (!provinceInputVal.value.trim()) {
                isValid = false;
                if (provinceSelected) {
                    provinceSelected.style.color = '#ff4444';
                }
                errorMessages.push('Vui lòng chọn tỉnh/thành phố');
            }

            // District validation  
            const districtInputVal = document.getElementById('district');
            if (!districtInputVal.value.trim()) {
                isValid = false;
                if (districtSelected) {
                    districtSelected.style.color = '#ff4444';
                }
                errorMessages.push('Vui lòng chọn quận/huyện');
            }

            // Ward validation
            const wardInputVal = document.getElementById('ward');
            if (!wardInputVal.value.trim()) {
                isValid = false;
                if (wardSelected) {
                    wardSelected.style.color = '#ff4444';
                }
                errorMessages.push('Vui lòng chọn phường/xã');
            }

            if (!isValid) {
                // Show summary error message
                showNotification('error', 'Vui lòng kiểm tra lại thông tin: ' + errorMessages.join(', '));
                return;
            }

            // Show loading state
            const originalText = saveBtn.textContent;
            saveBtn.disabled = true;
            saveBtn.textContent = 'Đang lưu...';

            // Prepare form data
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);
            
            // Manually add phone number since it's disabled and won't be included in FormData
            data.phone = phoneInput.value;

            // Ensure province/district/ward/address are captured even if inputs are disabled or custom controls
            if (provinceInput) {
                data.province = provinceInput.value || '';
            }
            if (districtInput) {
                data.district = districtInput.value || '';
            }
            const wardEl = document.getElementById('ward');
            if (wardEl) {
                data.ward = wardEl.value || '';
            }
            const addressEl = document.getElementById('address');
            if (addressEl) {
                data.address = addressEl.value || '';
            }
            const nameEl = document.getElementById('name');
            if (nameEl) {
                data.name = nameEl.value || '';
            }
            const emailEl = document.getElementById('email');
            if (emailEl) {
                data.email = emailEl.value || '';
            }

            // Provide API-aligned keys as well
            data.fullName = data.name || '';
            data.detailAddress = data.address || '';
            data.addresses = {
                province: data.province || '',
                district: data.district || '',
                ward: data.ward || '',
                detailAddress: data.detailAddress || ''
            };

            // Submit form via AJAX
            fetch('/account/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    // Disable inputs and update button states (except phone which stays readonly)
                    inputs.forEach(input => {
                        if (input.id !== 'phone') {
                            input.disabled = true;
                        }
                    });

                    // Disable dropdowns if they exist (re-query to avoid stale references)
                    const provinceBtnAfterSave = document.querySelector('.wrapper-province__select-btn-account');
                    const districtBtnAfterSave = document.querySelector('.wrapper-district__select-btn-account');
                    if (provinceBtnAfterSave) {
                        provinceBtnAfterSave.style.pointerEvents = 'none';
                        provinceBtnAfterSave.style.opacity = '0.7';
                        provinceBtnAfterSave.setAttribute('disabled', 'true');
                    }
                    if (districtBtnAfterSave) {
                        districtBtnAfterSave.style.pointerEvents = 'none';
                        districtBtnAfterSave.style.opacity = '0.7';
                        districtBtnAfterSave.setAttribute('disabled', 'true');
                    }
                    const wardBtnAfterSave = document.querySelector('.wrapper-ward__select-btn-account');
                    if (wardBtnAfterSave) {
                        wardBtnAfterSave.style.pointerEvents = 'none';
                        wardBtnAfterSave.style.opacity = '0.7';
                        wardBtnAfterSave.setAttribute('disabled', 'true');
                    }
                    if (provinceInput) provinceInput.disabled = true;
                    if (districtInput) districtInput.disabled = true;
                    if (wardInput) wardInput.disabled = true;

                    editBtn.disabled = false;
                    saveBtn.disabled = true;
                    saveBtn.textContent = originalText;

                    // Remove visual edit mode indicator
                    form.style.border = 'none';

                    // Show success message
                    showNotification('success', result.message || 'Cập nhật thông tin thành công!');
                    
                    // Optionally reload page after a delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    throw new Error(result.message || 'Có lỗi xảy ra');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                    showNotification('error', error.message || 'Có lỗi xảy ra khi cập nhật thông tin');
                    
                    // Reset button state
                    saveBtn.disabled = false;
                    saveBtn.textContent = originalText;
                });
        });

        // Add cancel functionality when in edit mode
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && !editBtn.disabled) {
                if (confirm('Bạn có muốn hủy các thay đổi và thoát khỏi chế độ chỉnh sửa?')) {
                    resetForm();
                }
            }
        });

        // Function to reset form to original state
        function resetForm() {
            // Reset all inputs to original values
            inputs.forEach(input => {
                if (input.id !== 'phone') {
                    input.disabled = true;
                }
                input.style.borderColor = '#e1e1e1';
                clearError(input);
                
                // Reset to original value (except phone which is readonly)
                switch(input.id) {
                    case 'name':
                        input.value = '{{user.fullName}}';
                        break;
                    case 'email':
                        input.value = '{{user.email}}';
                        break;
                    case 'address':
                        input.value = '{{user.detailAddress}}';
                        break;
                    case 'province':
                        input.value = '{{user.province}}';
                        break;
                    case 'district':
                        input.value = '{{user.district}}';
                        break;
                    case 'ward':
                        input.value = '{{user.ward}}';
                        break;
                    // Phone stays as is since it's readonly
                }
            });

            // Reset dropdowns if they exist
            if (provinceSelected) {
                provinceSelected.textContent = '{{#if user.province}}{{user.province}}{{else}}Chọn Tỉnh/Thành phố{{/if}}';
            }
            if (districtSelected) {
                districtSelected.textContent = '{{#if user.district}}{{user.district}}{{else}}Chọn Quận/Huyện{{/if}}';
            }
            if (wardSelected) {
                wardSelected.textContent = '{{#if user.ward}}{{user.ward}}{{else}}Chọn Phường/Xã{{/if}}';
            }
            // Re-query buttons to ensure we target the current elements
            const provinceBtnOnReset = document.querySelector('.wrapper-province__select-btn-account');
            const districtBtnOnReset = document.querySelector('.wrapper-district__select-btn-account');
            if (provinceBtnOnReset) {
                provinceBtnOnReset.style.pointerEvents = 'none';
                provinceBtnOnReset.style.opacity = '0.7';
                provinceBtnOnReset.setAttribute('disabled', 'true');
            }
            if (districtBtnOnReset) {
                districtBtnOnReset.style.pointerEvents = 'none';
                districtBtnOnReset.style.opacity = '0.7';
                districtBtnOnReset.setAttribute('disabled', 'true');
            }
            const wardBtnOnReset = document.querySelector('.wrapper-ward__select-btn-account');
            if (wardBtnOnReset) {
                wardBtnOnReset.style.pointerEvents = 'none';
                wardBtnOnReset.style.opacity = '0.7';
                wardBtnOnReset.setAttribute('disabled', 'true');
            }

            // Reset button states
            editBtn.disabled = false;
            saveBtn.disabled = true;
            saveBtn.textContent = 'Lưu thay đổi';

            // Remove visual edit mode indicator
            form.style.border = 'none';
        }        // Helper function to show error message
        function showError(input, message) {
            let errorDiv = input.parentElement.querySelector('.error-message');
            if (!errorDiv) {
                errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.style.color = '#ff4444';
                errorDiv.style.fontSize = '0.8rem';
                errorDiv.style.marginTop = '5px';
                input.parentElement.appendChild(errorDiv);
            }
            errorDiv.textContent = message;
        }

        // Helper function to clear error message
        function clearError(input) {
            const errorDiv = input.parentElement.querySelector('.error-message');
            if (errorDiv) {
                errorDiv.remove();
            }
        }

        // Helper function to show notification
        function showNotification(type, message) {
            // Remove existing notifications
            const existingNotification = document.querySelector('.notification-toast');
            if (existingNotification) {
                existingNotification.remove();
            }

            // Color scheme for different types
            const typeColors = {
                'success': { bg: '#d4edda', color: '#155724', border: '#c3e6cb', icon: '✓' },
                'error': { bg: '#f8d7da', color: '#721c24', border: '#f5c6cb', icon: '⚠' },
                'info': { bg: '#d1ecf1', color: '#0c5460', border: '#bee5eb', icon: 'ℹ' }
            };

            const colors = typeColors[type] || typeColors.info;

            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification-toast notification-${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <span class="notification-icon">${colors.icon}</span>
                    <span class="notification-message">${message}</span>
                    <button class="notification-close" onclick="this.parentElement.parentElement.remove()">×</button>
                </div>
            `;

            // Add styles
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${colors.bg};
                color: ${colors.color};
                border: 1px solid ${colors.border};
                border-radius: 8px;
                padding: 15px;
                z-index: 10000;
                max-width: 400px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                /* Loại bỏ animation để tránh nhấp nháy */
            `;

            // Style không còn chứa animation
            const style = document.createElement('style');
            style.textContent = `
                /* Đã loại bỏ hiệu ứng slideIn để tránh nhấp nháy */
                .notification-content {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }
                .notification-close {
                    background: none;
                    border: none;
                    font-size: 18px;
                    cursor: pointer;
                    margin-left: auto;
                }
            `;
            document.head.appendChild(style);

            // Add to page
            document.body.appendChild(notification);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        // Add input event listeners for real-time validation
        inputs.forEach(input => {
            input.addEventListener('input', function () {
                if (this.value.trim()) {
                    this.style.borderColor = '#e1e1e1';
                    clearError(this);
                }
                
                // Real-time validation for specific fields
                if (this.id === 'phone') {
                    // Remove non-numeric characters
                    this.value = this.value.replace(/[^0-9]/g, '');
                    
                    // Limit to 11 characters
                    if (this.value.length > 11) {
                        this.value = this.value.substring(0, 11);
                    }
                    
                    // Validate format
                    if (this.value.length > 0 && !this.value.startsWith('0')) {
                        showError(this, 'Số điện thoại phải bắt đầu bằng số 0');
                        this.style.borderColor = '#ff4444';
                    } else if (this.value.length >= 10 && this.value.length <= 11 && /^0\d{9,10}$/.test(this.value)) {
                        clearError(this);
                        this.style.borderColor = '#28a745';
                    }
                } else if (this.id === 'name') {
                    // Remove leading/trailing spaces and multiple spaces
                    this.value = this.value.replace(/\s+/g, ' ');
                    
                    // Validate name format (only letters and spaces)
                    if (this.value && !/^[a-zA-ZÀ-ỹ\s]+$/.test(this.value)) {
                        showError(this, 'Họ tên chỉ được chứa chữ cái và khoảng trắng');
                        this.style.borderColor = '#ff4444';
                    } else if (this.value.trim().length >= 2) {
                        clearError(this);
                        this.style.borderColor = '#28a745';
                    }
                } else if (this.id === 'address') {
                    if (this.value.trim().length >= 5) {
                        clearError(this);
                        this.style.borderColor = '#28a745';
                    }
                } else if (this.id === 'ward') {
                    if (this.value.trim().length >= 2) {
                        clearError(this);
                        this.style.borderColor = '#28a745';
                    }
                }
            });

            // Add blur event for final validation
            input.addEventListener('blur', function () {
                if (this.id === 'phone' && this.value) {
                    if (this.value.length < 10 || this.value.length > 11 || !this.value.startsWith('0')) {
                        showError(this, 'Số điện thoại phải có 10-11 số và bắt đầu bằng số 0');
                        this.style.borderColor = '#ff4444';
                    }
                } else if (this.id === 'name' && this.value) {
                    if (this.value.trim().length < 2) {
                        showError(this, 'Họ tên phải có ít nhất 2 ký tự');
                        this.style.borderColor = '#ff4444';
                    }
                } else if (this.id === 'address' && this.value) {
                    if (this.value.trim().length < 5) {
                        showError(this, 'Địa chỉ chi tiết phải có ít nhất 5 ký tự');
                        this.style.borderColor = '#ff4444';
                    }
                } else if (this.id === 'ward' && this.value) {
                    if (this.value.trim().length < 2) {
                        showError(this, 'Phường/xã phải có ít nhất 2 ký tự');
                        this.style.borderColor = '#ff4444';
                    }
                }
            });
        });

        // Initialize dropdown functionality
        function initializeDropdowns() {
            const locations = {{{json locations}}};
            
            // Initialize province dropdown
            provinceBtn = document.querySelector('.wrapper-province__select-btn-account');
            districtBtn = document.querySelector('.wrapper-district__select-btn-account');
            if (provinceBtn && locations && Array.isArray(locations)) {
                initializeProvinceDropdown(locations);
                
                // If user already has province selected, initialize districts
                const currentProvince = '{{user.province}}';
                if (currentProvince) {
                    initializeDistrictsForCurrentProvince(locations, currentProvince);
                }
            }

            // Set initial disabled state for dropdowns
            const provinceBtnInit = document.querySelector('.wrapper-province__select-btn-account');
            const districtBtnInit = document.querySelector('.wrapper-district__select-btn-account');
            const wardBtnInit = document.querySelector('.wrapper-ward__select-btn-account');
            if (provinceBtnInit) {
                provinceBtnInit.style.pointerEvents = 'none';
                provinceBtnInit.style.opacity = '0.7';
                provinceBtnInit.setAttribute('disabled', 'true');
            }
            if (districtBtnInit) {
                districtBtnInit.style.pointerEvents = 'none';
                districtBtnInit.style.opacity = '0.7';
                districtBtnInit.setAttribute('disabled', 'true');
            }
            if (wardBtnInit) {
                wardBtnInit.style.pointerEvents = 'none';
                wardBtnInit.style.opacity = '0.7';
                wardBtnInit.setAttribute('disabled', 'true');
            }
        }
        
        // Initialize districts for the current user's province
        function initializeDistrictsForCurrentProvince(locations, currentProvince) {
            const foundLocation = locations.find(location => {
                const provinceName = location.Name ? location.Name.replace(/(Tỉnh|Thành phố) /g, '') : '';
                return provinceName === currentProvince;
            });
            
            if (foundLocation && foundLocation.Districts) {
                initializeDistrictDropdown(foundLocation.Districts);
                // Also initialize wards if district exists
                const currentDistrict = '{{user.district}}';
                if (currentDistrict) {
                    const foundDistrict = (foundLocation.Districts || []).find(d => {
                        const districtName = d.Name ? d.Name.replace(/(Huyện|Quận|Thành phố|Thị xã) /g, '') : '';
                        return districtName === currentDistrict;
                    });
                    if (foundDistrict && foundDistrict.Wards) {
                        initializeWardDropdown(foundDistrict.Wards);
                    }
                }
            }
        }

        function initializeProvinceDropdown(locations) {
            const provinceOptions = document.querySelector('.wrapper-province__options-account');
            const provinceSearchInput = document.querySelector('.wrapper-province__input-account');
            
            // Clear existing options
            provinceOptions.innerHTML = '';
            
            // Populate province options
            locations.forEach(location => {
                const li = document.createElement('li');
                const provinceName = location.Name ? location.Name.replace(/(Tỉnh|Thành phố) /g, '') : '';
                li.textContent = provinceName;
                li.setAttribute('data-value', provinceName);
                li.setAttribute('data-districts', JSON.stringify(location.Districts || []));
                provinceOptions.appendChild(li);

                // Add click event
                li.addEventListener('click', function () {
                    selectProvince(this);
                });
            });

            // Province dropdown toggle
            provinceBtn.addEventListener('click', function(e) {
                if (this.hasAttribute('disabled')) return;
                e.stopPropagation();
                provinceContent.classList.toggle('active');
                this.classList.toggle('active');
                
                // Close district dropdown if open
                const dc = document.querySelector('.wrapper-district__content-account');
                const db = document.querySelector('.wrapper-district__select-btn-account');
                if (dc) dc.classList.remove('active');
                if (db) db.classList.remove('active');
            });

            // Province search functionality
            if (provinceSearchInput) {
                provinceSearchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const options = provinceOptions.querySelectorAll('li');
                    
                    options.forEach(option => {
                        const text = option.textContent.toLowerCase();
                        option.style.display = text.includes(searchTerm) ? 'block' : 'none';
                    });
                });
            }
        }

        function selectProvince(selectedOption) {
            const provinceName = selectedOption.getAttribute('data-value');
            const districts = JSON.parse(selectedOption.getAttribute('data-districts'));
            
            // Update UI
            provinceSelected.textContent = provinceName;
            provinceInput.value = provinceName;
            
            // Reset district
            if (districtSelected) {
                districtSelected.textContent = 'Chọn Quận/Huyện';
                districtInput.value = '';
            }
            // Reset ward
            if (wardSelected) {
                wardSelected.textContent = 'Chọn Phường/Xã';
                if (wardInput) wardInput.value = '';
                const wardOptions = document.querySelector('.wrapper-ward__options-account');
                if (wardOptions) wardOptions.innerHTML = '';
                const wb = document.querySelector('.wrapper-ward__select-btn-account');
                if (wb) {
                    wb.style.pointerEvents = 'none';
                    wb.style.opacity = '0.7';
                    wb.setAttribute('disabled', 'true');
                }
                const wardSearch = document.getElementById('ward-search');
                if (wardSearch) wardSearch.value = '';
            }
            
            // Close province dropdown
            provinceContent.classList.remove('active');
            provinceBtn.classList.remove('active');
            
            // Initialize district dropdown with province's districts
            if (districtDropdown && districts && Array.isArray(districts)) {
                initializeDistrictDropdown(districts);
                // Enable district button after province selected
                const db = document.querySelector('.wrapper-district__select-btn-account');
                if (db) {
                    db.style.pointerEvents = 'auto';
                    db.style.opacity = '1';
                    db.removeAttribute('disabled');
                }
            }
        }

    function initializeDistrictDropdown(districts) {
            const districtOptions = document.querySelector('.wrapper-district__options-account');
            const districtSearchInput = document.querySelector('.wrapper-district__input-account');
            
            // Clear existing options
            districtOptions.innerHTML = '';
            
            // Populate district options
            // Skip first element (index 0) as it's usually empty, start from index 1
            if (Array.isArray(districts)) {
                for (let i = 1; i < districts.length; i++) {
                    const district = districts[i];
                    const li = document.createElement('li');
                    const districtName = district.Name ? district.Name.replace(/(Huyện|Quận|Thành phố|Thị xã) /g, '') : '';
                    li.textContent = districtName;
                    li.setAttribute('data-value', districtName);
                    li.setAttribute('data-wards', JSON.stringify(district.Wards || []));
                    districtOptions.appendChild(li);
                    
                    // Add click event
                    li.addEventListener('click', function() {
                        selectDistrict(this);
                    });
                }
            }

            // District dropdown toggle - need to get fresh reference
            const currentDistrictBtn = document.querySelector('.wrapper-district__select-btn-account');
        if (currentDistrictBtn) {
                // Remove existing event listeners by cloning the element
                const newDistrictBtn = currentDistrictBtn.cloneNode(true);
                currentDistrictBtn.parentNode.replaceChild(newDistrictBtn, currentDistrictBtn);
                
                newDistrictBtn.addEventListener('click', function(e) {
                    if (this.hasAttribute('disabled')) return;
                    e.stopPropagation();
                    
                    const districtContentElement = document.querySelector('.wrapper-district__content-account');
                    districtContentElement.classList.toggle('active');
                    this.classList.toggle('active');
                    
                    // Close province dropdown if open
            const pc = document.querySelector('.wrapper-province__content-account');
            const pb = document.querySelector('.wrapper-province__select-btn-account');
            if (pc) pc.classList.remove('active');
            if (pb) pb.classList.remove('active');
                });
            }

            // District search functionality
            if (districtSearchInput) {
                districtSearchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const options = districtOptions.querySelectorAll('li');
                    
                    options.forEach(option => {
                        const text = option.textContent.toLowerCase();
                        option.style.display = text.includes(searchTerm) ? 'block' : 'none';
                    });
                });
            }
        }

        function selectDistrict(selectedOption) {
            const districtName = selectedOption.getAttribute('data-value');
            const wards = JSON.parse(selectedOption.getAttribute('data-wards') || '[]');
            
            // Update UI
            const currentDistrictSelected = document.getElementById('district-selected');
            const currentDistrictInput = document.getElementById('district');
            
            if (currentDistrictSelected) currentDistrictSelected.textContent = districtName;
            if (currentDistrictInput) currentDistrictInput.value = districtName;
            // Reset and init wards
            if (wardSelected) wardSelected.textContent = 'Chọn Phường/Xã';
            if (wardInput) wardInput.value = '';
            const wardSearch = document.getElementById('ward-search');
            if (wardSearch) wardSearch.value = '';
            if (Array.isArray(wards)) {
                initializeWardDropdown(wards);
                const wb = document.querySelector('.wrapper-ward__select-btn-account');
                if (wb) {
                    wb.style.pointerEvents = 'auto';
                    wb.style.opacity = '1';
                    wb.removeAttribute('disabled');
                }
            }
            
            // Close district dropdown
            const districtContentElement = document.querySelector('.wrapper-district__content-account');
            const currentDistrictBtn = document.querySelector('.wrapper-district__select-btn-account');
            
            if (districtContentElement) districtContentElement.classList.remove('active');
            if (currentDistrictBtn) currentDistrictBtn.classList.remove('active');
        }

        function initializeWardDropdown(wards) {
            const wardOptions = document.querySelector('.wrapper-ward__options-account');
            const wardSearchInput = document.querySelector('.wrapper-ward__input-account');

            if (!wardOptions) return;

            wardOptions.innerHTML = '';
            if (wardSearchInput) wardSearchInput.value = '';
            wards.forEach(w => {
                const li = document.createElement('li');
                const wardName = w.Name ? w.Name.replace(/(Phường|Xã|Thị trấn) /g, '') : '';
                li.textContent = wardName;
                li.setAttribute('data-value', wardName);
                wardOptions.appendChild(li);
                li.addEventListener('click', function() { selectWard(this); });
            });

            const currentWardBtn = document.querySelector('.wrapper-ward__select-btn-account');
            if (currentWardBtn) {
                const newWardBtn = currentWardBtn.cloneNode(true);
                currentWardBtn.parentNode.replaceChild(newWardBtn, currentWardBtn);
                newWardBtn.addEventListener('click', function(e) {
                    if (this.hasAttribute('disabled')) return;
                    e.stopPropagation();
                    const wc = document.querySelector('.wrapper-ward__content-account');
                    wc.classList.toggle('active');
                    this.classList.toggle('active');
                    // Close others
                    const pc = document.querySelector('.wrapper-province__content-account');
                    const pb = document.querySelector('.wrapper-province__select-btn-account');
                    const dc = document.querySelector('.wrapper-district__content-account');
                    const db = document.querySelector('.wrapper-district__select-btn-account');
                    if (pc) pc.classList.remove('active');
                    if (pb) pb.classList.remove('active');
                    if (dc) dc.classList.remove('active');
                    if (db) db.classList.remove('active');
                });
            }

            if (wardSearchInput) {
                wardSearchInput.addEventListener('input', function() {
                    const q = this.value.toLowerCase();
                    wardOptions.querySelectorAll('li').forEach(li => {
                        li.style.display = li.textContent.toLowerCase().includes(q) ? 'block' : 'none';
                    });
                });
            }
        }

        function selectWard(selectedOption) {
            const name = selectedOption.getAttribute('data-value');
            if (wardSelected) wardSelected.textContent = name;
            if (wardInput) wardInput.value = name;
            const wardSearch = document.getElementById('ward-search');
            if (wardSearch) wardSearch.value = name;
            const wc = document.querySelector('.wrapper-ward__content-account');
            const wb = document.querySelector('.wrapper-ward__select-btn-account');
            if (wc) wc.classList.remove('active');
            if (wb) wb.classList.remove('active');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.wrapper-province-account')) {
                const currentProvinceContent = document.querySelector('.wrapper-province__content-account');
                const currentProvinceBtn = document.querySelector('.wrapper-province__select-btn-account');
                if (currentProvinceContent) currentProvinceContent.classList.remove('active');
                if (currentProvinceBtn) currentProvinceBtn.classList.remove('active');
            }
            if (!e.target.closest('.wrapper-district-account')) {
                const currentDistrictContent = document.querySelector('.wrapper-district__content-account');
                const currentDistrictBtn = document.querySelector('.wrapper-district__select-btn-account');
                if (currentDistrictContent) currentDistrictContent.classList.remove('active');
                if (currentDistrictBtn) currentDistrictBtn.classList.remove('active');
            }
            if (!e.target.closest('.wrapper-ward-account')) {
                const currentWardContent = document.querySelector('.wrapper-ward__content-account');
                const currentWardBtn = document.querySelector('.wrapper-ward__select-btn-account');
                if (currentWardContent) currentWardContent.classList.remove('active');
                if (currentWardBtn) currentWardBtn.classList.remove('active');
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get all status selects
        const statusSelects = document.querySelectorAll('.status-select-homedetail');

        // Function to update select styling based on selected value
        function updateSelectStyle(select) {
            // Remove all possible status classes
            select.classList.remove('completed-homedetail', 'in-progress-homedetail', 'cancelled-homedetail');

            // Add the appropriate class based on the selected value
            select.classList.add(select.value);

            // Update row styling
            const row = select.closest('tr');
            row.style.backgroundColor = getBackgroundColor(select.value);
        }

        // Function to get background color based on status
        function getBackgroundColor(status) {
            switch (status) {
                case 'completed-homedetail':
                    return '#f8fff8';
                case 'in-progress-homedetail':
                    return '#fff8f0';
                case 'cancelled-homedetail':
                    return '#fff5f5';
                default:
                    return 'transparent';
            }
        }

        // Add change event listeners to all status selects
        statusSelects.forEach(select => {
            // Set initial styling
            updateSelectStyle(select);

            // Add change event listener
            select.addEventListener('change', function () {
                updateSelectStyle(this);
            });
        });

        // Function to add new row to a table
        function addNewRow(tableId, taskId) {
            const tbody = document.getElementById(tableId);
            const newRow = document.createElement('tr');

            newRow.innerHTML = `
            <td>${taskId}</td>
            <td>New Task</td>
            <td>Unassigned</td>
            <td>${new Date().toISOString().split('T')[0]}</td>
            <td>Medium</td>
            <td>
                <select class="status-select-homedetail">
                    <option value="in-progress">Đang thực hiện</option>
                    <option value="completed">Hoàn thành</option>
                    <option value="cancelled">Hủy</option>
                </select>
            </td>
        `;

            tbody.appendChild(newRow);

            // Initialize the new status select
            const newSelect = newRow.querySelector('.status-select-homedetail');
            updateSelectStyle(newSelect);
            newSelect.addEventListener('change', function () {
                updateSelectStyle(this);
            });
        }

        // Example function to generate task IDs
        function generateTaskId(tableId) {
            const prefix = tableId === 'longTermTable-homedetail' ? 'LT' : 'ST';
            const rows = document.getElementById(tableId).getElementsByTagName('tr');
            const number = (rows.length + 1).toString().padStart(3, '0');
            return `${prefix}${number}`;
        }

        // Optional: Add functionality to add new rows
        window.addLongTermTask = function () {
            addNewRow('longTermTable-homedetail', generateTaskId('longTermTable-homedetail'));
        };

        window.addShortTermTask = function () {
            addNewRow('shortTermTable-homedetail', generateTaskId('shortTermTable-homedetail'));
        };

        // Initialize all existing rows with background colors
        document.querySelectorAll('.modern-table-homedetail tbody tr').forEach(row => {
            const select = row.querySelector('.status-select-homedetail');
            if (select) {
                row.style.backgroundColor = getBackgroundColor(select.value);
            }
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const dropdownBtn = document.querySelector('.dropdown-btn-homecare');
        const dropdownContent = document.querySelector('.dropdown-content-homecare');
        const dropdownItems = document.querySelectorAll('.dropdown-item-homecare');
        const modals = document.querySelectorAll('.modal-homecare');
        const closeButtons = document.querySelectorAll('.close-btn-homecare');

        // Toggle dropdown
        dropdownBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdownContent.classList.toggle('active-detail-homecare');
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!dropdownBtn.contains(e.target)) {
                dropdownContent.classList.remove('active-detail-homecare');
            }
        });

        // Handle dropdown items click and show corresponding modal
        dropdownItems.forEach(item => {
            item.addEventListener('click', () => {
                const modalId = `${item.dataset.modal}-modal-homecare`;
                const modal = document.getElementById(modalId);
                modal.classList.add('active-detail-homecare');
                dropdownContent.classList.remove('active-detail-homecare');
            });
        });

        // Close modal when clicking close button
        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const modal = btn.closest('.modal-homecare');
                modal.classList.remove('active-detail-homecare');
            });
        });

        // Close modal when clicking outside
        modals.forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active-detail-homecare');
                }
            });
        });

        // Handle logout button
        const logoutBtn = document.querySelector('.logout-btn-homecare');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => {
                // Prevent multiple clicks
                if (logoutBtn.disabled) return;
                
                // Close modal
                document.getElementById('logout-modal-homecare').classList.remove('active-detail-homecare');
                
                // Show loading state
                const originalText = logoutBtn.innerHTML;
                logoutBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang đăng xuất...';
                logoutBtn.disabled = true;
                
                // Add a small delay to show the loading state
                setTimeout(() => {
                    // Redirect to logout endpoint
                    window.location.href = '/account/logout';
                }, 500);
            });
        }
    });
</script>
<script>
    function showBillType(btn, type) {

        // Get both bill containers
        const shortTermBill = document.getElementById('shortTermBillHistoryDetailHomeKare');
        const longTermBill = document.getElementById('longTermBillHistoryDetailHomeKare');


        // Get all buttons
        const buttons = document.querySelectorAll('.btnHistoryDetailHomeKare');
        index = btn.getAttribute('data-id')
        const status = btn.getAttribute('data-status');


        // Reset all buttons
        buttons.forEach(button => {
            button.style.background = '#3498db';
        });

        // Show selected bill type and highlight active button
        if (type === 'short') {
            openModal('shortTermModalHistoryDetailHomeKare', index, status);

            // buttons[0].style.background = '#2980b9';
            btn.style.background = '#2980b9';
        } else {
            openModal('longTermModalHistoryDetailHomeKare', index, status);
            // buttons[1].style.background = '#2980b9';
            btn.style.background = '#2980b9';
        }
    }

    function openModal(modalId, index, status) {
        const buttons = document.querySelectorAll('.btnHistoryDetailHomeKare');
        const row = buttons[index].parentNode;
        console.log("open modal ", row)
        const modal = row.querySelector('#' + modalId)

        //const modal = row.getElementById(modalId);
        console.log("open modal ", modal)
        
        // Lưu trạng thái vào modal để sử dụng sau này
        if (status) {
            modal.setAttribute('data-request-status', status);
        }
        
        // Prevent flashing by ensuring immediate display without transitions
        modal.style.transition = 'none';
        modal.style.animation = 'none';
        modal.classList.add('showModalHistoryDetailHomeKare');
        document.body.style.overflow = 'hidden';

        // Cập nhật hiển thị nút thanh toán sau khi modal hiển thị
        setTimeout(() => {
            if (window.setupPaymentButtons) {
                window.setupPaymentButtons();
            }
        }, 100);

        // Add click outside to close functionality
        modal.addEventListener('click', function (e) {
            if (e.target === modal) {
                closeModal(modalId, index);
            }
        });

        // Add escape key to close functionality
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                closeModal(modalId);
            }
        });
    }
    //them
    /*  function openModal(modalId, index, status) {
          const buttons = document.querySelectorAll('.btnHistoryDetailHomeKare');
          const row = buttons[index].parentNode;
         
          const modal = row.querySelector('#' + modalId);
  
          if (!modal) {
              console.error("Không tìm thấy modal:", modalId);
              return;
          }
  
          // Lưu trạng thái tổng vào modal để sử dụng sau này
          modal.setAttribute('data-request-status', status);
  
          modal.classList.add('showModalHistoryDetailHomeKare');
          document.body.style.overflow = 'hidden';
  
          // Cập nhật hiển thị nút thanh toán dựa vào trạng thái tổng
          updatePaymentButtonVisibility(modal, status);
  
          // Add click outside to close functionality
          modal.addEventListener('click', function (e) {
              if (e.target === modal) {
                  closeModal(modalId);
              }
          });
  
          // Add escape key to close functionality
          document.addEventListener('keydown', function (e) {
              if (e.key === 'Escape') {
                  closeModal(modalId);
              }
          });
      }
      // Hàm mới để cập nhật hiển thị nút thanh toán
          function updatePaymentButtonVisibility(modal, status) {
              const payButton = modal.querySelector('#payButton') || modal.querySelector('#payButtonShort');
              const cancelButton = modal.querySelector('#cancelButton') || modal.querySelector('#cancelButtonShort');
  
              if (payButton) {
                  // CHỈ hiển thị nút thanh toán nếu trạng thái tổng là waitPayment
                  if (status === 'waitPayment') {
                      payButton.style.display = 'block';
                      console.log("Hiển thị nút thanh toán - trạng thái waitPayment");
                  } else {
                      payButton.style.display = 'none';
                      console.log("Ẩn nút thanh toán - trạng thái không phải waitPayment");
                  }
              }
  
              if (cancelButton) {
                                  // Chỉ hiển thị nút hủy đơn nếu trạng thái là pending
                if (status === 'pending') {
                      cancelButton.style.display = 'block';
                  } else {
                      cancelButton.style.display = 'none';
                  }
              }
          }*/
    function closeModal(modalId) {
        const buttons = document.querySelectorAll('.btnHistoryDetailHomeKare');
        const row = buttons[index].parentNode;
        console.log("open modal ", row)
        const modal = row.querySelector('#' + modalId)
        
        // Prevent flashing by ensuring immediate hide without transitions
        modal.style.transition = 'none';
        modal.style.animation = 'none';
        modal.classList.remove('showModalHistoryDetailHomeKare');
        document.body.style.overflow = 'auto';
    }


    // Show short term bill modal by default when page loads
    document.addEventListener('DOMContentLoaded', () => {
        // Don't show any modal by default, wait for user click
        const buttons = document.querySelectorAll('.btnHistoryDetailHomeKare');
        buttons[0].style.background = '#2980b9';
    });
</script>
<script>
    // Xử lý nút hủy đơn
    document.addEventListener('click', function (e) {
        if (e.target.classList.contains('cancelButton')) {
            const requestId = e.target.getAttribute('data-request-id');
            const type = e.target.getAttribute('data-type');

            console.log("Hủy đơn hàng:", requestId, type);

            // Lưu tham chiếu đến modal hiện tại
            const currentModal = e.target.closest('.modalHistoryDetailHomeKare');

            // Hiển thị modal xác nhận hủy
            const confirmModal = new bootstrap.Modal(document.getElementById('confirmCancelModal'));

            // Thêm sự kiện cho nút xác nhận hủy
            document.getElementById('confirmCancelBtn').onclick = function () {
                // Đóng modal xác nhận
                confirmModal.hide();

                fetch('/request/cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId: requestId })
                }).then(response => {
                    if (response.ok) {
                        alert('Đã hủy đơn hàng thành công!');
                        
                        // Đóng modal chi tiết
                        if (currentModal) {
                            currentModal.classList.remove('showModalHistoryDetailHomeKare');
                        }

                        // Reload trang để cập nhật trạng thái
                        window.location.reload();
                    } else {
                        alert('Hủy đơn hàng thất bại!');
                    }
                }).catch(error => {
                    console.error('Error cancelling order:', error);
                    alert('Có lỗi xảy ra khi hủy đơn hàng!');
                });
            };

            // Hiển thị modal xác nhận
            confirmModal.show();
        }
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Thay thế hoặc cập nhật hàm setupPaymentButtons hiện tại
        window.setupPaymentButtons = function setupPaymentButtons() {
            // Xử lý cho tất cả các phần tử có trạng thái
            document.querySelectorAll('.status-completeHistoryDetailHomeKare').forEach(statusEl => {
                const status = statusEl.getAttribute('data-status');
                let scheduleId = statusEl.getAttribute('data-detail-id') || statusEl.closest('tr').getAttribute('data-detail-id');
                const container = statusEl.closest('.billDetailsHistoryDetailHomeKare');
                    // Tìm đúng phần tử chứa giá (có thể khác nhau giữa dài hạn và ngắn hạn)
                const price = statusEl.getAttribute('data-cost') || statusEl.closest('tr').getAttribute('data-cost');

                console.log("price", price)
                // Tìm hoặc tạo phần thanh toán cho mỗi đơn
                let paymentSection = container.querySelector('.paymentSectionHistoryDetailHomeKare');

                // Nếu đã có phần thanh toán, xóa đi để tạo lại tránh trùng lặp
                if (paymentSection) {
                    paymentSection.remove();
                }

                // Nếu trạng thái là chờ thanh toán, tạo phần UI thanh toán
                if (status === 'waitPayment') {
                    // Tạo phần thanh toán
                    paymentSection = document.createElement('div');
                    paymentSection.className = 'paymentSectionHistoryDetailHomeKare';
                    paymentSection.style.marginTop = '15px';
                    paymentSection.style.padding = '15px';
                    paymentSection.style.border = '1px solid #e1e1e1';
                    paymentSection.style.borderRadius = '8px';
                    paymentSection.style.backgroundColor = '#f8f9fa';

                    const paymentInfo = document.createElement('div');
                    paymentInfo.style.marginBottom = '10px';
                    paymentInfo.innerHTML = `
                        <p style="margin: 0; font-weight: 500; color: #333;">
                            <i class="fas fa-money-bill-wave" style="color: #28a745; margin-right: 8px;"></i>
                            Cần thanh toán: <span style="color: #28a745; font-weight: bold;">${price ? parseInt(price).toLocaleString('vi-VN') : 'N/A'}đ</span>
                        </p>
                    `;

                    const payButton = document.createElement('button');
                    payButton.id = container.closest('.modalHistoryDetailHomeKare').id.includes('short') ? 'payButtonShort' : 'payButton';
                    payButton.className = 'btn btn-success itemPayButton';
                    payButton.style.width = '100%';
                    payButton.style.padding = '10px';
                    payButton.style.fontWeight = '500';
                    payButton.innerHTML = '<i class="fas fa-credit-card"></i> Xác nhận thanh toán';
                    
                    // Lưu thông tin cần thiết để xử lý thanh toán
                    payButton.setAttribute('data-schedule-id', scheduleId);
                    payButton.setAttribute('data-cost', price);

                    paymentSection.appendChild(paymentInfo);
                    paymentSection.appendChild(payButton);
                    container.appendChild(paymentSection);

                    // Lưu reference để sử dụng khi thanh toán
                    window.currentPaymentButton = payButton;
                }
            });
        };

        // Thêm event listener cho các nút "Chi tiết"
        document.querySelectorAll('.btnHistoryDetailHomeKare').forEach(button => {
            button.addEventListener('click', function () {
                // Đợi một chút để modal hiển thị đầy đủ
                setTimeout(window.setupPaymentButtons, 100);
            });
        });

        // Xử lý nút thanh toán
        document.addEventListener('click', function (e) {
            // Kiểm tra xem phần tử được nhấp có phải là nút thanh toán không
            if (e.target.id === 'payButton' || e.target.id === 'payButtonShort') {
                // Hiển thị modal xác nhận thanh toán
                const confirmModal = new bootstrap.Modal(document.getElementById('confirmPaymentModal'));
                confirmModal.show();
            }
        });

        // Xử lý nút xác nhận thanh toán
        document.getElementById('confirmPayBtn').addEventListener('click', function () {
            // Đóng modal xác nhận
            const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmPaymentModal'));
            confirmModal.hide();

            // Hiển thị thông báo
            alert('Xác nhận thanh toán thành công!');

            // Hiển thị modal đánh giá
            const ratingModal = new bootstrap.Modal(document.getElementById('ratingModal'));
            ratingModal.show();

            // Đóng modal chi tiết (nếu đang mở)
            document.querySelectorAll('.modalHistoryDetailHomeKare.showModalHistoryDetailHomeKare').forEach(modal => {
                modal.classList.remove('showModalHistoryDetailHomeKare');
            });
        });

        // Cập nhật trạng thái khi giá trị data-status thay đổi
        function updateStatusStyles() {
            document.querySelectorAll('.status-completeHistoryDetailHomeKare').forEach(element => {
                // Lấy trạng thái từ thuộc tính data
                const status = element.getAttribute('data-status');
                if (!status) return;

                // Xóa tất cả các lớp trạng thái cũ
                element.classList.remove(
                    'status-doneHistoryDetailHomeKare',
                    'status-assignedHistoryDetailHomeKare',
                    'status-pendingHistoryDetailHomeKare',
                    'status-cancelHistoryDetailHomeKare',
                    'status-wayPaymentHistoryDetailHomeKare',
                    'status-processingHistoryDetailHomeKare'
                );

                // Thêm lớp trạng thái mới và biểu tượng
                const statusMap = {
                    'done': {
                        class: 'status-doneHistoryDetailHomeKare',
                        icon: '<i class="fas fa-check-circle"></i>',
                        text: 'Đã hoàn thành'
                    },
                    'assigned': {
                        class: 'status-assignedHistoryDetailHomeKare',
                        icon: '<i class="fas fa-user-check"></i>',
                        text: 'Đã xác nhận'
                    },
                                    'pending': {
                    class: 'status-pendingHistoryDetailHomeKare',
                    icon: '<i class="fas fa-clock"></i>',
                    text: 'Chờ xác nhận'
                },
                    'cancelled': {
                        class: 'status-cancelHistoryDetailHomeKare',
                        icon: '<i class="fas fa-times-circle"></i>',
                        text: 'Đã hủy'
                    },
                    'waitPayment': {
                        class: 'status-wayPaymentHistoryDetailHomeKare',
                        icon: '<i class="fas fa-money-bill-wave"></i>',
                        text: 'Chờ thanh toán'
                    },
                    'processing': {
                        class: 'status-processingHistoryDetailHomeKare',
                        icon: '<i class="fas fa-spinner fa-spin"></i>',
                        text: 'Đang thực hiện'
                    }
                };

                const statusInfo = statusMap[status] || statusMap.pending;
                element.classList.add(statusInfo.class);
                element.innerHTML = `${statusInfo.icon} ${statusInfo.text}`;
            });

            // Sau khi cập nhật trạng thái, kiểm tra lại nút thanh toán
            if (window.setupPaymentButtons) {
                window.setupPaymentButtons();
            }
        }

        // Khởi tạo MutationObserver để theo dõi thay đổi
        const observer = new MutationObserver((mutations) => {
            mutations.forEach(mutation => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'data-status') {
                    updateStatusStyles();
                }
            });
        });

        // Cấu hình và bắt đầu quan sát
        const config = {
            attributes: true,
            attributeFilter: ['data-status'],
            subtree: true
        };

        // Quan sát toàn bộ container
        const container = document.querySelector('.container-homedetail');
        if (container) {
            observer.observe(container, config);
        }

        // Cập nhật trạng thái ban đầu
        updateStatusStyles();
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Consolidated status handling
        const statusManager = {
            statusMap: {
                'done': { class: 'status-doneHistoryDetailHomeKare', icon: '<i class="fas fa-check-circle"></i>', text: 'Đã hoàn thành' },
                'assigned': { class: 'status-assignedHistoryDetailHomeKare', icon: '<i class="fas fa-user-check"></i>', text: 'Đã xác nhận' },
                'pending': { class: 'status-pendingHistoryDetailHomeKare', icon: '<i class="fas fa-clock"></i>', text: 'Chờ xác nhận' },
                'cancelled': { class: 'status-cancelHistoryDetailHomeKare', icon: '<i class="fas fa-times-circle"></i>', text: 'Đã hủy' },
                'waitPayment': { class: 'status-wayPaymentHistoryDetailHomeKare', icon: '<i class="fas fa-money-bill-wave"></i>', text: 'Chờ thanh toán' },
                'processing': { class: 'status-processingHistoryDetailHomeKare', icon: '<i class="fas fa-spinner fa-spin"></i>', text: 'Đang thực hiện' }
            },

            updateElement(element, status) {
                const statusClasses = Object.values(this.statusMap).map(s => s.class);
                element.classList.remove(...statusClasses);
                
                const statusInfo = this.statusMap[status] || this.statusMap.pending;
                element.classList.add(statusInfo.class);
                element.innerHTML = `${statusInfo.icon} ${statusInfo.text}`;
            },

            updateAll() {
                document.querySelectorAll('.status-completeHistoryDetailHomeKare').forEach(element => {
                    const status = element.getAttribute('data-status');
                    this.updateElement(element, status);
                });
            }
        };

        // Initialize status display
        statusManager.updateAll();

        // Single observer for all status changes
        const observer = new MutationObserver((mutations) => {
            mutations.forEach(mutation => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'data-status') {
                    const status = mutation.target.getAttribute('data-status');
                    statusManager.updateElement(mutation.target, status);
                }
            });
        });

        // Observe status changes
        const container = document.querySelector('.container-homedetail');
        if (container) {
            observer.observe(container, {
                attributes: true,
                attributeFilter: ['data-status'],
                subtree: true
            });
        }

    // Payment button logic removed
    });

    // Modal and utility functions
    function showBillType(button, type) {
        const row = button.closest('tr');
        const modal = row.querySelector(type === 'long' ? '#longTermModalHistoryDetailHomeKare' : '#shortTermModalHistoryDetailHomeKare');
        
        if (modal) {
            // Prevent flashing by ensuring immediate display without transitions
            modal.style.transition = 'none';
            modal.style.animation = 'none';
            modal.classList.add('showModalHistoryDetailHomeKare');
            document.body.style.overflow = 'hidden';
            window.index = Array.from(document.querySelectorAll('.btnHistoryDetailHomeKare')).indexOf(button);
        }
    }

    function closeModal(modalId) {
        const buttons = document.querySelectorAll('.btnHistoryDetailHomeKare');
        const row = buttons[window.index]?.parentNode;
        
        if (row) {
            const modal = row.querySelector('#' + modalId);
            if (modal) {
                // Prevent flashing by ensuring immediate hide without transitions
                modal.style.transition = 'none';
                modal.style.animation = 'none';
                modal.classList.remove('showModalHistoryDetailHomeKare');
                document.body.style.overflow = 'auto';
            }
        }
    }

    // Initialize Bootstrap modals and escape key handler  
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.modal').forEach(modal => {
            new bootstrap.Modal(modal);
        });

        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                const visibleModal = document.querySelector('.modalHistoryDetailHomeKare.showModalHistoryDetailHomeKare');
                if (visibleModal) {
                    closeModal(visibleModal.id);
                }
            }
        });
        
        // Handle logout với FCM token
        const logoutLink = document.getElementById('logout-link');
        if (logoutLink) {
            logoutLink.addEventListener('click', async function(e) {
                e.preventDefault();
                
                try {
                    // Lấy FCM token từ localStorage
                    const fcmToken = localStorage.getItem('fcm_token');
                    const userPhone = document.querySelector('meta[name="user-phone"]')?.getAttribute('content');
                    
                    // Unregister FCM token trước khi logout
                    if (fcmToken && userPhone && typeof window.unregisterFCMToken === 'function') {
                        await window.unregisterFCMToken(userPhone, fcmToken);
                    }
                    
                    // Tạo form để gửi FCM token
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/account/logout';
                    
                    if (fcmToken) {
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = 'fcm_token';
                        tokenInput.value = fcmToken;
                        form.appendChild(tokenInput);
                    }
                    
                    document.body.appendChild(form);
                    form.submit();
                    
                } catch (error) {
                    console.error('Error during logout:', error);
                    // Fallback: redirect trực tiếp
                    window.location.href = '/account/logout';
                }
            });
        }
    });
</script>
<script>
    // Make sure this script is placed at the end of the body
    document.addEventListener('DOMContentLoaded', function () {
        console.log("Sidebar toggle script loaded");

        setTimeout(function () {
            const toggleBtn = document.getElementById('asideToggleBtn');
            const aside = document.querySelector('.modern-aside');

            if (toggleBtn && aside) {
                console.log("Found toggle button and aside");

                // Remove any existing listeners first to avoid duplicates
                const newToggleBtn = toggleBtn.cloneNode(true);
                toggleBtn.parentNode.replaceChild(newToggleBtn, toggleBtn);

                newToggleBtn.addEventListener('click', function (e) {
                    console.log("Toggle button clicked");
                    e.preventDefault();
                    e.stopPropagation();

                    // Toggle appropriate classes based on screen size
                    if (window.innerWidth <= 600) {
                        aside.classList.toggle('open');
                    } else {
                        aside.classList.toggle('collapsed');
                    }

                    // Update icon
                    const icon = this.querySelector('i');
                    if (icon) {
                        const isOpen = window.innerWidth <= 600 ?
                            aside.classList.contains('open') :
                            !aside.classList.contains('collapsed');

                        icon.className = isOpen ?
                            'fa-solid fa-xmark' :
                            'fa-solid fa-bars';
                    }

                    console.log("Toggled sidebar state");
                });

                // Set initial state based on screen size
                if (window.innerWidth <= 900 && window.innerWidth > 600) {
                    aside.classList.add('collapsed');
                }

                // For debugging, let's add a global function to toggle the sidebar
                window.toggleSidebar = function () {
                    newToggleBtn.click();
                };

                console.log("Sidebar toggle setup complete");
            } else {
                console.error("Toggle button or aside not found", {
                    toggleBtn: toggleBtn ? "found" : "not found",
                    aside: aside ? "found" : "not found"
                });
            }
        }, 500); // Small delay to ensure DOM is fully loaded
    });
</script>
<script>
    window.dispatchEvent(new Event("template-loaded"));
</script>

</html>
<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quản lý tài khoản khách hàng - HomeCare</title>

    <!-- CDN Links -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js@1.12.0/src/toastify.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    
    <!-- QR Code Library -->
    <script async src="https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js"></script>

    <style>
        :root {
            --primary: #2ecc71;
            --primary-dark: #27ae60;
            --secondary: #2980b9;
            --secondary-dark: #1f4e79;
            --success: #2ecc71;
            --warning: #f39c12;
            --danger: #e74c3c;
            --light: #f8fffe;
            --gray: #ecf0f1;
            --dark: #2c3e50;
            --white: #ffffff;
            --sidebar-width: 250px;
            --header-height: 60px;
            --gradient-primary: linear-gradient(135deg, #2ecc71, #2980b9);
            --gradient-light: linear-gradient(135deg, #d5f4e6, #d6eaf8);
            --gradient-dark: linear-gradient(135deg, #27ae60, #1f4e79);
            --shadow-primary: rgba(46, 204, 113, 0.2);
            --shadow-secondary: rgba(41, 128, 185, 0.2);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', 'Roboto', sans-serif;
            background: linear-gradient(135deg, #f8fffe 0%, #ecf0f1 100%);
            color: var(--dark);
            line-height: 1.6;
        }

        /* Header */
        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: var(--header-height);
            background: var(--gradient-primary);
            box-shadow: 0 4px 20px var(--shadow-primary);
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 20px;
        }

        .hamburger {
            display: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--white);
            transition: all 0.3s ease;
        }

        .hamburger:hover {
            color: #ecf0f1;
            transform: scale(1.1);
        }

        .user-dropdown {
            position: relative;
            margin-left: auto;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--white);
            color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-weight: bold;
            box-shadow: 0 3px 10px rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }

        .user-avatar:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 255, 255, 0.4);
        }

        .dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: var(--white);
            box-shadow: 0 8px 25px var(--shadow-primary);
            border-radius: 12px;
            min-width: 180px;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            z-index: 1001;
            border: 1px solid rgba(46, 204, 113, 0.1);
        }

        .dropdown-menu.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .dropdown-item {
            padding: 12px 16px;
            border-bottom: 1px solid var(--gray);
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--dark);
        }

        .dropdown-item:hover {
            background: var(--gradient-light);
            color: var(--primary-dark);
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            top: var(--header-height);
            left: 0;
            width: var(--sidebar-width);
            height: calc(100vh - var(--header-height));
            background: linear-gradient(180deg, var(--white) 0%, var(--light) 100%);
            border-right: 2px solid rgba(46, 204, 113, 0.1);
          
            z-index: 999;
            transition: transform 0.3s ease;
            box-shadow: 4px 0 15px rgba(46, 204, 113, 0.08);
        }

        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            color: var(--dark);
            text-decoration: none;
            transition: all 0.3s ease;
            cursor: pointer;
            border-left: 4px solid transparent;
            margin: 5px 0;
        }
        .sidebar-header{
             display: flex;
            align-items: center;
            padding: 15px 20px;
            color: var(--dark);
            text-decoration: none;
            transition: all 0.3s ease;
            cursor: pointer;
            border-left: 4px solid transparent;
            margin: 5px 0;
        }

        .sidebar-item:hover {
            background: var(--gradient-light);
            transform: translateX(5px);
            border-left-color: var(--primary);
            color: var(--primary-dark);
        }

        .sidebar-item.active {
            background: var(--gradient-light);
            border-left-color: var(--primary);
            font-weight: bold;
            color: var(--primary-dark);
            box-shadow: inset 0 0 15px rgba(46, 204, 113, 0.1);
        }

        .sidebar-item i {
            margin-right: 12px;
            width: 20px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .sidebar-item:hover i,
        .sidebar-item.active i {
            color: var(--primary);
            transform: scale(1.1);
        }

        /* Main Content */
        .main-content {
            margin-left: var(--sidebar-width);
            margin-top: var(--header-height);
            padding: 30px;
            min-height: calc(100vh - var(--header-height));
        }

        .content-section {
            display: none;
            background: var(--white);
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 8px 30px rgba(46, 204, 113, 0.08);
            border: 1px solid rgba(46, 204, 113, 0.05);
        }

        .content-section.active {
            display: block;
        }

        .section-title {
            font-size: 2rem;
            margin-bottom: 30px;
            color: var(--dark);
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            padding-bottom: 15px;
            border-bottom: 3px solid;
            border-image: var(--gradient-primary) 1;
        }

        /* Filters */
        .filters {
            display: grid;
            grid-template-columns: auto 1fr auto auto auto;
            gap: 20px;
            margin-bottom: 30px;
            padding: 25px 30px;
            background: var(--gradient-light);
            border-radius: 20px;
            box-shadow: 0 8px 25px rgba(46, 204, 113, 0.1);
            border: 2px solid rgba(46, 204, 113, 0.1);
            position: relative;
            overflow: hidden;
        }

        .filters::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--gradient-primary);
            border-radius: 20px 20px 0 0;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            max-width: 200px;
            position: relative;
        }

        .filter-group label {
            font-weight: 600;
            margin-bottom: 8px;
            color: var(--dark);
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .filter-group label::before {
            content: '';
            width: 6px;
            height: 6px;
            background: var(--gradient-primary);
            border-radius: 50%;
            opacity: 0.8;
        }

        .filter-group select,
        .filter-group input {
            padding: 12px 16px;
            border: 2px solid rgba(46, 204, 113, 0.2);
            border-radius: 12px;
            font-size: 14px;
            background: var(--white);
            box-shadow: 0 4px 15px rgba(46, 204, 113, 0.08);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            outline: none;
            font-weight: 500;
            color: var(--dark);
        }

        .filter-group select:hover,
        .filter-group input:hover {
            border-color: var(--primary);
            box-shadow: 0 6px 20px rgba(46, 204, 113, 0.15);
            transform: translateY(-2px);
        }

        .filter-group select:focus,
        .filter-group input:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(46, 204, 113, 0.1);
            transform: translateY(-2px);
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 180px;
            height: 44px;
            background: linear-gradient(135deg, #ecf0f1 0%, #d5d8dc 100%);
            border-radius: 22px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid rgba(46, 204, 113, 0.2);
            box-shadow: 0 6px 20px rgba(46, 204, 113, 0.1);
            overflow: hidden;
        }

        .toggle-switch:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(46, 204, 113, 0.15);
            border-color: var(--primary);
        }

        .toggle-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 86px;
            height: 36px;
            background: var(--gradient-primary);
            border-radius: 18px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            box-shadow: 0 4px 12px var(--shadow-primary);
            z-index: 2;
        }

        .toggle-switch.long .toggle-slider {
            transform: translateX(87px);
            background: var(--gradient-dark);
            box-shadow: 0 4px 12px var(--shadow-secondary);
        }

        .toggle-labels {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            pointer-events: none;
            padding: 0 20px;
            z-index: 1;
        }

        .toggle-label-left,
        .toggle-label-right {
            flex: 1;
            text-align: center;
            font-size: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .toggle-switch:not(.long) .toggle-label-left {
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .toggle-switch:not(.long) .toggle-label-right {
            color: var(--dark);
            opacity: 0.6;
        }

        .toggle-switch.long .toggle-label-left {
            color: var(--dark);
            opacity: 0.6;
        }

        .toggle-switch.long .toggle-label-right {
            color: white;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        /* Table */
        .table-container {
            overflow-x: auto;
            margin-bottom: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 20px rgba(46, 204, 113, 0.08);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: var(--white);
            border-radius: 12px;
            overflow: hidden;
        }

        th,
        td {
            padding: 15px 12px;
            text-align: left;
            border-bottom: 1px solid rgba(46, 204, 113, 0.1);
        }

        th {
            background: var(--gradient-light);
            font-weight: 600;
            color: var(--dark);
            text-transform: uppercase;
            font-size: 12px;
            letter-spacing: 0.5px;
        }

        tr:hover {
            background: rgba(46, 204, 113, 0.03);
        }

        .badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 11px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .badge-success {

            color: var(--success);
            font-weight: 600;
        }

        .badge-warning {

            color: var(--warning);
            font-weight: 600;
        }

        .badge-danger {

            color: var(--danger);
            font-weight: 600;

        }

        .badge-primary {

            color: var(--primary);
            font-weight: 600;
        }

        .badge-secondary {

            color: #7f8c8d;
            font-weight: 600;
        }

        /* Buttons */
        .btn {
            padding: 10px 18px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-primary {
            background: var(--gradient-primary);
            color: white;
            box-shadow: 0 4px 15px var(--shadow-primary);
        }

        .btn-success {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
            color: white;
            box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #95a5a6, #7f8c8d);
            color: white;
            box-shadow: 0 4px 15px rgba(149, 165, 166, 0.3);
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

        /* Dashboard Cards */
        .dashboard-section .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .dashboard-card {
            background: var(--gradient-primary);
            color: white;
            padding: 25px;
            border-radius: 16px;
            box-shadow: 0 8px 25px var(--shadow-primary);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .dashboard-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(30px, -30px);
        }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 35px var(--shadow-primary);
        }

        .dashboard-card:nth-child(1) {
            background: var(--gradient-primary);
        }

        .dashboard-card:nth-child(2) {
            background: linear-gradient(135deg, #2ecc71, #27ae60);
        }

        .dashboard-card:nth-child(3) {
            background: linear-gradient(135deg, #f39c12, #e67e22);
        }

        .dashboard-card:nth-child(4) {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        /* Forms */
        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark);
            font-size: 14px;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid rgba(46, 204, 113, 0.2);
            border-radius: 10px;
            font-size: 14px;
            background: var(--white);
            transition: all 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(46, 204, 113, 0.1);
            transform: translateY(-2px);
        }

        .form-group input:disabled {
            background: var(--light);
            color: #7f8c8d;
            border-color: var(--gray);
        }

        .form-group select:disabled {
            background: var(--light);
            color: #7f8c8d;
            border-color: var(--gray);
            cursor: not-allowed;
        }

        .form-note {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
            font-style: italic;
            padding: 8px 12px;
            background: rgba(46, 204, 113, 0.05);
            border-left: 3px solid var(--primary);
            border-radius: 0 8px 8px 0;
        }

        .form-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 30px;
            flex-wrap: wrap;
        }

        .form-buttons .btn {
            min-width: 140px;
            padding: 12px 20px;
            font-weight: 600;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        /* Modals */
        .modal,
        .detail-modal,
        .confirm-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(44, 62, 80, 0.8);
            backdrop-filter: blur(5px);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal.show,
        .detail-modal.show,
        .confirm-modal.show {
            opacity: 1;
            visibility: visible;
        }

        .modal-content,
        .detail-modal-content,
        .confirm-modal-content {
            background: var(--white);
            border-radius: 16px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.8);
            transition: transform 0.3s ease;
            box-shadow: 0 15px 35px rgba(46, 204, 113, 0.2);
            border: 1px solid rgba(46, 204, 113, 0.1);
        }

        .modal.show .modal-content,
        .detail-modal.show .detail-modal-content,
        .confirm-modal.show .confirm-modal-content {
            transform: scale(1);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 2px solid;
            border-image: var(--gradient-primary) 1;
            padding-bottom: 15px;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            background: var(--gradient-primary);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--dark);
            transition: all 0.3s ease;
            padding: 5px;
            border-radius: 50%;
        }

        .modal-close:hover {
            background: rgba(46, 204, 113, 0.1);
            color: var(--primary);
            transform: rotate(90deg);
        }

        /* Star Rating */
        .star {
            font-size: 2rem;
            color: #ecf0f1;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .star.active,
        .star:hover {
            color: #f39c12;
            transform: scale(1.1);
            text-shadow: 0 0 10px rgba(243, 156, 18, 0.5);
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 20px;
        }

        .pagination button {
            padding: 10px 15px;
            border: 2px solid rgba(46, 204, 113, 0.2);
            background: var(--white);
            cursor: pointer;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-weight: 600;
        }

        .pagination button:hover {
            background: var(--gradient-primary);
            color: white;
            border-color: var(--primary);
            transform: translateY(-2px);
        }

        .pagination button.active {
            background: var(--gradient-primary);
            color: white;
            border-color: var(--primary);
            box-shadow: 0 4px 15px var(--shadow-primary);
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .hamburger {
                display: block;
            }

            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 20px;
            }

            .form-buttons {
                flex-direction: column;
            }

            .pagination {
                flex-wrap: wrap;
            }
        }

        /* Toast Styles */
        .toastify {
            background: var(--white) !important;
            color: var(--dark) !important;
            border-radius: 8px !important;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
        }

        .toast-success {
            border-left: 4px solid var(--success) !important;
        }

        .toast-error {
            border-left: 4px solid var(--danger) !important;
        }

        .toast-info {
            border-left: 4px solid var(--primary) !important;
        }

        /* Confirmation Modal */
        .confirm-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2500;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .confirm-modal.show {
            opacity: 1;
            visibility: visible;
        }

        .confirm-modal-content {
            background: var(--white);
            border-radius: 12px;
            padding: 30px;
            max-width: 450px;
            width: 90%;
            transform: scale(0.8);
            transition: transform 0.3s ease;
            text-align: center;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .confirm-modal.show .confirm-modal-content {
            transform: scale(1);
        }

        .confirm-modal-icon {
            font-size: 3rem;
            margin-bottom: 20px;
            color: var(--warning);
        }

        .confirm-modal-icon.payment {
            color: var(--success);
        }

        .confirm-modal-icon.cancel {
            color: var(--danger);
        }

        .confirm-modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--dark);
        }

        .confirm-modal-message {
            color: #666;
            margin-bottom: 30px;
            line-height: 1.6;
        }

        .confirm-modal-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .confirm-modal-buttons .btn {
            min-width: 120px;
            padding: 12px 20px;
            font-weight: 600;
        }

        .confirm-modal-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: transparent;
        }

        /* Detail Modal */
        .detail-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .detail-modal.show {
            opacity: 1;
            visibility: visible;
        }

        .detail-modal-content {
            background: var(--white);
            border-radius: 12px;
            padding: 30px;
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.8);
            transition: transform 0.3s ease;
        }

        .detail-modal.show .detail-modal-content {
            transform: scale(1);
        }

        .order-summary {
            background: var(--light);
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .order-summary h3 {
            color: var(--primary);
            margin-bottom: 15px;
            border-bottom: 2px solid var(--primary);
            padding-bottom: 5px;
        }

        .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid var(--gray);
        }

        .info-row:last-child {
            border-bottom: none;
        }

        .info-label {
            font-weight: 600;
            color: var(--dark);
        }

        .info-value {
            color: #666;
        }

        .sub-orders {
            margin-top: 20px;
        }

        .sub-order-item {
            background: var(--white);
            border: 1px solid var(--gray);
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .sub-order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .sub-order-date {
            font-weight: 600;
            color: var(--primary);
        }

        .sub-order-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }

        .cancel-btn {
            background: var(--danger);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
        }

        .cancel-btn:hover {
            background: #c82333;
            transform: translateY(-1px);
        }

        /* Responsive table with more columns */
        @media (max-width: 1200px) {
            .table-container {
                font-size: 14px;
            }

            th,
            td {
                padding: 8px 6px;
            }
        }

        @media (max-width: 768px) {
            .detail-modal-content {
                padding: 20px;
            }

            .sub-order-details {
                grid-template-columns: 1fr;
            }

            .info-row {
                flex-direction: column;
                gap: 5px;
            }
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .hamburger {
                display: block;
            }

            .sidebar {
                transform: translateX(-100%);
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 20px;
            }

            .form-buttons {
                flex-direction: column;
            }

            .pagination {
                flex-wrap: wrap;
            }
        }

        /* Payment Modal Styles */
        .payment-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 3000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .payment-modal.show {
            opacity: 1;
            visibility: visible;
        }

        .payment-modal-content {
            background: var(--white);
            border-radius: 16px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            transform: scale(0.8);
            transition: transform 0.3s ease;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
        }

        .payment-modal.show .payment-modal-content {
            transform: scale(1);
        }

        .payment-header {
            text-align: center;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 2px solid var(--gray);
        }

        .payment-header h2 {
            color: var(--primary);
            margin-bottom: 10px;
            font-size: 1.8rem;
            font-weight: 600;
        }

        .payment-header .order-code {
            color: #666;
            font-size: 0.9rem;
        }

        .payment-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 25px;
        }

        .payment-details {
            background: var(--light);
            padding: 20px;
            border-radius: 12px;
        }

        .payment-details h3 {
            color: var(--dark);
            margin-bottom: 15px;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .detail-item:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }

        .detail-label {
            color: #666;
            font-weight: 500;
        }

        .detail-value {
            color: var(--dark);
            font-weight: 600;
        }

        .amount-value {
            color: var(--primary);
            font-size: 1.1rem;
            font-weight: 700;
        }

        .qr-section {
            text-align: center;
        }

        .qr-section h3 {
            color: var(--dark);
            margin-bottom: 15px;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .qr-code-container {
            background: var(--white);
            border: 2px solid var(--gray);
            border-radius: 12px;
            padding: 20px;
            display: inline-block;
            margin-bottom: 15px;
        }

        .qr-code-image {
            width: 200px;
            height: 200px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        .qr-instructions {
            color: #666;
            font-size: 0.9rem;
            line-height: 1.5;
            margin-bottom: 20px;
        }

        .payment-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .payment-btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 150px;
            justify-content: center;
        }

        .payment-btn.primary {
            background: var(--gradient-primary);
            color: var(--white);
        }

        .payment-btn.primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px var(--shadow-primary);
        }

        .payment-btn.secondary {
            background: var(--gray);
            color: var(--dark);
        }

        .payment-btn.secondary:hover {
            background: #d5d5d5;
            transform: translateY(-2px);
        }

        .status-pending {
            color: var(--warning);
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .status-pending i {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Mobile responsive for payment modal */
        @media (max-width: 768px) {
            .payment-modal-content {
                padding: 20px;
                margin: 10px;
            }

            .payment-info {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .qr-code-image {
                width: 150px;
                height: 150px;
            }

            .payment-actions {
                flex-direction: column;
            }

            .payment-btn {
                width: 100%;
            }
        }
    </style>
    <style>
        /* Custom Checkbox Styles */
        .custom-checkbox:hover .checkbox-custom {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        #brokenItems:checked+.checkbox-custom {
            background: linear-gradient(135deg, #e74c3c, #c0392b) !important;
            border-color: #e74c3c !important;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3) !important;
        }

        #brokenItems:checked+.checkbox-custom::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: bold;
            font-size: 12px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        #lostItems:checked+.checkbox-custom {
            background: linear-gradient(135deg, #f39c12, #e67e22) !important;
            border-color: #f39c12 !important;
            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3) !important;
        }

        #lostItems:checked+.checkbox-custom::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-weight: bold;
            font-size: 12px;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        /* Hover effects for labels */
        .custom-checkbox:hover {
            color: var(--primary-dark);
        }

        #brokenItems:checked+.checkbox-custom+span {
            color: #e74c3c;
            font-weight: 600;
        }

        #lostItems:checked+.checkbox-custom+span {
            color: #f39c12;
            font-weight: 600;
        }

        /* Mobile responsive */
        @media (max-width: 768px) {
            .custom-checkbox {
                flex-direction: column;
                align-items: flex-start !important;
                gap: 8px;
            }
        }
    </style>
</head>

<body>
    <!-- Header -->
    <header class="header">
        <div class="hamburger" onclick="toggleSidebar()">
            <i class="fas fa-bars"></i>
        </div>
        <div class="user-dropdown">
            <!--<div class="user-avatar" onclick="toggleUserDropdown()">
                KH
            </div>-->
            <div class="dropdown-menu" id="userDropdown">
                <div class="dropdown-item" onclick="showSection('account')">
                    <i class="fas fa-user"></i> Thông tin
                </div>
                <div class="dropdown-item">
                    <i class="fas fa-cog"></i> Cài đặt
                </div>
                <div class="dropdown-item">
                    <i class="fas fa-envelope"></i> Tin nhắn <span class="badge badge-danger">3</span>
                </div>
                <div class="dropdown-item">
                    <i class="fas fa-question-circle"></i> Trợ giúp
                </div>
            </div>
        </div>
    </header>

    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
        <a href="/"  style="text-decoration: none;">

        <div class="sidebar-header" style="justify-content: center;">  
            <img style="width: 150px; height: auto;" src="/icon/logo-removeBg.png" alt="grocerymart" class="logo__img-helper logo __img-header">
        </div>
        </a>
        <a href="/" style="text-decoration: none;">

            <div class="sidebar-item">
                <i class="fas fa-home"></i>
                <span>Trang chủ</span>
            </div>
        </a>

        <div class="sidebar-item" onclick="showSection('password')">
            <i class="fas fa-lock"></i>
            <span>Đổi mật khẩu</span>
        </div>
        <div class="sidebar-item" onclick="showSection('account')">
            <i class="fas fa-user"></i>
            <span>Tài khoản</span>
        </div>
        <div class="sidebar-item active" onclick="showSection('orders')">
            <i class="fas fa-shopping-cart"></i>
            <span>Quản lý đơn</span>
        </div>
        <div class="sidebar-item" onclick="logout()">
            <i class="fas fa-sign-out-alt"></i>
            <span>Đăng xuất</span>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Dashboard Section -->
        {{!-- <section id="dashboard-section" class="content-section">
            <h1 class="section-title">Trang chủ</h1>
            <div class="dashboard-section">
                <div class="grid">
                    <div class="dashboard-card">
                        <h3>Tổng đơn hàng</h3>
                        <p style="font-size: 2rem; font-weight: bold;">23</p>
                    </div>
                    <div class="dashboard-card">
                        <h3>Đã hoàn thành</h3>
                        <p style="font-size: 2rem; font-weight: bold;">18</p>
                    </div>
                    <div class="dashboard-card">
                        <h3>Đang xử lý</h3>
                        <p style="font-size: 2rem; font-weight: bold;">3</p>
                    </div>
                    <div class="dashboard-card">
                        <h3>Đã hủy</h3>
                        <p style="font-size: 2rem; font-weight: bold;">2</p>
                    </div>
                </div>
            </div>
        </section> --}}

        <!-- Orders Section -->
        <section id="orders-section" class="content-section active">
            <h1 class="section-title">Quản lý đơn hàng</h1>

            <!-- Filters -->
            <div class="filters">
                <div class="toggle-group" style="    display: flex
;
    flex-direction: column;">
                    {{!-- <label><i class="fas fa-cog"></i> Loại dịch vụ</label> --}}
                    <div class="toggle-switch" id="typeToggle" onclick="toggleServiceType()">
                        <div class="toggle-slider">Ngắn hạn</div>
                        <div class="toggle-labels">
                            <span class="toggle-label-left">Ngắn hạn</span>
                            <span class="toggle-label-right">Dài hạn</span>
                        </div>
                    </div>
                </div>
                <div class="filter-group">
                    {{!-- <label><i class="fas fa-filter"></i> Trạng thái</label> --}}
                    <select id="statusFilter" style="
                    padding: 12px 16px;
                    border: 2px solid rgba(46, 204, 113, 0.2);
                    border-radius: 12px;
                    font-size: 14px;
                    background: var(--white);
                    box-shadow: 0 4px 15px rgba(46, 204, 113, 0.08);
                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                    outline: none;
                    font-weight: 500;
                    color: var(--dark);
                    cursor: pointer;
                    background-image: linear-gradient(45deg, transparent 50%, var(--primary) 50%),
                                     linear-gradient(135deg, var(--primary) 50%, transparent 50%);
                    background-position: calc(100% - 20px) calc(1em + 2px),
                                        calc(100% - 15px) calc(1em + 2px);
                    background-size: 5px 5px, 5px 5px;
                    background-repeat: no-repeat;
                    -webkit-appearance: none;
                    -moz-appearance: none;
                    appearance: none;
                ">
                        <option value="" style="color: #666; font-weight: 600;">Tất cả trạng thái</option>
                        <option value="completed"> Đã hoàn
                            thành</option>
                        <option value="pending"> Chờ xác
                            nhận</option>
                        <option value="waitPayment"> Chờ
                            thanh toán</option>
                        <option value="inProgress"> Đang
                            thực hiện</option>
                        <option value="cancelled"> Đã hủy
                        </option>
                    </select>
                </div>
                <div class="filter-group">
                   
                    <input type="text" id="dateFrom" placeholder="Chọn ngày bắt đầu" readonly>
                </div>
                <div class="filter-group">
                    
                    <input type="text" id="dateTo" placeholder="Chọn ngày kết thúc" readonly>
                </div>

            </div>

            <!-- Table -->
            <div class="table-container">
                <table id="ordersTable">
                    <thead>
                        <tr>
                            <th>Ngày yêu cầu</th>

                            <th>Dịch vụ</th>
                            <th>Tổng tiền</th>
                            <th>Giờ bắt đầu</th>
                            <th>Giờ kết thúc</th>
                            <th>Trạng thái</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                        <!-- Dynamic content -->
                    </tbody>
                </table>
            </div>

            <!-- No Results -->
            <div id="noResults" class="no-results" style="display: none;">
                <i class="fas fa-search" style="font-size: 3rem; color: #ddd;"></i>
                <h3>Không tìm thấy đơn hàng</h3>
                <p>Vui lòng thử lại với từ khóa khác</p>
            </div>

            <!-- Pagination -->
            <div class="pagination" id="pagination">
                <!-- Dynamic content -->
            </div>
        </section>

        <!-- Account Section -->
        <section id="account-section" class="content-section">
            <h1 class="section-title">Thông tin khách hàng</h1>
            <form id="accountForm">
                <div class="form-group">
                    <label>Số điện thoại</label>
                    <input type="tel" value="{{user.phone}}" disabled>
                    <div class="form-note" style="font-size: 12px; color: #666; margin-top: 5px; font-style: italic;">
                        <i class="fas fa-lock" style="margin-right: 5px;"></i>
                        Số điện thoại không thể thay đổi vì lý do bảo mật
                    </div>
                </div>
                <div class="form-group">
                    <label>Họ và tên</label>
                    <input type="text" id="fullName" value="{{user.fullName}}" disabled>
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" id="email" value="{{user.email}}" disabled>
                </div>
                <div class="form-group">
                    <label>
                        <i class="fas fa-map-marker-alt" style="margin-right: 8px; color: var(--primary);"></i>
                        Tỉnh/Thành phố
                    </label>
                    <select id="province" disabled>
                        <option value="">-- Chọn tỉnh/thành phố --</option>
                        <!-- Dynamic options will be loaded here -->
                    </select>
                </div>
                <div class="form-group">
                    <label>
                        <i class="fas fa-building" style="margin-right: 8px; color: var(--primary);"></i>
                        Phường/Xã
                    </label>
                    <select id="ward" disabled>
                        <option value="">-- Chọn phường/xã --</option>
                        <!-- Dynamic options will be loaded here -->
                    </select>
                </div>
                <div class="form-group">
                    <label>
                        <i class="fas fa-home" style="margin-right: 8px; color: var(--primary);"></i>
                        Địa chỉ chi tiết
                    </label>
                    <input type="text" id="address" value="{{user.address.detailAddress}}" disabled 
                           placeholder="Nhập số nhà, tên đường...">
                </div>
                <div class="form-buttons" style="display: flex; gap: 15px; justify-content: center; margin-top: 30px;">
                    <button type="button" class="btn btn-primary" id="editBtn" onclick="toggleEdit()">
                        <i class="fas fa-edit" style="margin-right: 8px;"></i>
                        Chỉnh sửa thông tin
                    </button>
                    <button type="submit" class="btn btn-success" id="saveBtn" style="display: none;">
                        <i class="fas fa-save" style="margin-right: 8px;"></i>
                        Lưu thay đổi
                    </button>
                    <button type="button" class="btn btn-secondary" id="cancelBtn" style="display: none;" onclick="cancelEdit()">
                        <i class="fas fa-times" style="margin-right: 8px;"></i>
                        Hủy bỏ
                    </button>
                </div>
            </form>
        </section>

        <!-- Password Section -->
        <section id="password-section" class="content-section">
            <h1 class="section-title">Đổi mật khẩu</h1>
            <form id="passwordForm">
                <div class="form-group">
                    <label>Mật khẩu hiện tại</label>
                    <input type="password" id="currentPassword" required>
                </div>
                <div class="form-group">
                    <label>Mật khẩu mới</label>
                    <input type="password" id="newPassword" required>
                </div>
                <div class="form-group">
                    <label>Xác nhận mật khẩu mới</label>
                    <input type="password" id="confirmPassword" required>
                </div>
                <div class="form-buttons">
                    <button type="submit" class="btn btn-success">Đổi mật khẩu</button>
                </div>
            </form>
        </section>
    </main>

    <!-- Detail Modal -->
    <div id="detailModal" class="detail-modal">
        <div class="detail-modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Chi tiết đơn hàng</h2>
                <button class="modal-close" onclick="closeDetailModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div class="order-summary">
                    <h3>Thông tin đơn hàng</h3>

                    <div class="info-row">
                        <span class="info-label">Loại dịch vụ:</span>
                        <span class="info-value" id="detailServiceType"></span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Tổng tiền:</span>
                        <span class="info-value" id="detailTotalAmount"></span>
                    </div>

                    <div class="info-row">
                        <span class="info-label">Ngày đặt:</span>
                        <span class="info-value" id="detailOrderDate"></span>
                    </div>
                </div>

                <div class="sub-orders" id="subOrdersContainer">
                    <!-- Dynamic sub-orders content -->
                </div>
            </div>
        </div>
    </div>

    <!-- Rating Modal -->
    <div id="ratingModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Đánh giá dịch vụ</h2>
                <button class="modal-close" onclick="closeRatingModal()">&times;</button>
            </div>
            <div class="modal-body">
                <p>Đơn hàng: <span id="ratingOrderId"></span></p>
                <div class="form-group">
                    <label>Đánh giá của bạn</label>
                    <div class="star-rating" id="starRating">
                        <span class="star" data-rating="1">★</span>
                        <span class="star" data-rating="2">★</span>
                        <span class="star" data-rating="3">★</span>
                        <span class="star" data-rating="4">★</span>
                        <span class="star" data-rating="5">★</span>
                    </div>
                </div>

                <!-- Checkbox Section -->
                <div class="form-group">
                    <label style="margin-bottom: 15px; color: var(--dark); font-weight: 600;">Báo cáo sự cố</label>
                    <div style="display: flex; gap: 25px; flex-wrap: wrap;">
                        <label class="custom-checkbox" style="
                            display: flex;
                            align-items: center;
                            cursor: pointer;
                            font-weight: 500;
                            color: var(--dark);
                            font-size: 14px;
                            transition: all 0.3s ease;
                            margin: 0;
                        ">
                            <input type="checkbox" id="brokenItems" style="display: none;">
                            <span class="checkbox-custom" style="
                                width: 20px;
                                height: 20px;
                                border: 2px solid rgba(231, 76, 60, 0.3);
                                border-radius: 6px;
                                margin-right: 10px;
                                position: relative;
                                background: var(--white);
                                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                                box-shadow: 0 2px 8px rgba(231, 76, 60, 0.1);
                            "></span>
                            <span style="
                                display: flex;
                                align-items: center;
                                gap: 6px;
                            ">
                                <i class="fas fa-exclamation-triangle" style="color: #e74c3c; font-size: 12px;"></i>
                                Vỡ đồ
                            </span>
                        </label>

                        <label class="custom-checkbox" style="
                            display: flex;
                            align-items: center;
                            cursor: pointer;
                            font-weight: 500;
                            color: var(--dark);
                            font-size: 14px;
                            transition: all 0.3s ease;
                            margin: 0;
                        ">
                            <input type="checkbox" id="lostItems" style="display: none;">
                            <span class="checkbox-custom" style="
                                width: 20px;
                                height: 20px;
                                border: 2px solid rgba(243, 156, 18, 0.3);
                                border-radius: 6px;
                                margin-right: 10px;
                                position: relative;
                                background: var(--white);
                                transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                                box-shadow: 0 2px 8px rgba(243, 156, 18, 0.1);
                            "></span>
                            <span style="
                                display: flex;
                                align-items: center;
                                gap: 6px;
                            ">
                                <i class="fas fa-search" style="color: #f39c12; font-size: 12px;"></i>
                                Mất đồ
                            </span>
                        </label>
                    </div>
                </div>

                <div class="form-group">
                    <label>Nhận xét</label>
                    <textarea id="reviewText" rows="4" placeholder="Chia sẻ trải nghiệm của bạn..."></textarea>
                </div>
                <div class="form-buttons">
                    <button type="button" class="btn btn-secondary" onclick="closeRatingModal()">Hủy</button>
                    <button type="button" class="btn btn-success" onclick="submitRating()">Gửi đánh giá</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div id="confirmModal" class="confirm-modal">
        <div class="confirm-modal-overlay" onclick="closeConfirmModal()"></div>
        <div class="confirm-modal-content">
            <div class="confirm-modal-icon" id="confirmIcon">
                <i class="fas fa-question-circle"></i>
            </div>
            <h3 class="confirm-modal-title" id="confirmTitle">Xác nhận</h3>
            <p class="confirm-modal-message" id="confirmMessage">Bạn có chắc chắn muốn thực hiện hành động này?</p>
            <div class="confirm-modal-buttons">
                <button class="btn btn-secondary" onclick="closeConfirmModal()">Hủy bỏ</button>
                <button class="btn btn-primary" id="confirmButton" onclick="confirmAction()">Xác nhận</button>
            </div>
        </div>
    </div>

    <!-- Payment Modal -->
    <div id="paymentModal" class="payment-modal">
        <div class="payment-modal-content">
            <div class="payment-header">
                <h2><i class="fas fa-credit-card"></i> Thanh toán đơn hàng</h2>
                <div class="order-code">Mã đơn: <span id="paymentOrderCode"></span></div>
            </div>
            
            <div class="payment-info">
                <div class="payment-details">
                    <h3><i class="fas fa-info-circle"></i> Thông tin thanh toán</h3>
                    <div class="detail-item">
                        <span class="detail-label">Tài khoản:</span>
                        <span class="detail-value" id="paymentAccountName"></span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Số tài khoản:</span>
                        <span class="detail-value" id="paymentAccountNumber"></span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Ngân hàng:</span>
                        <span class="detail-value" id="paymentBankName"></span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Số tiền:</span>
                        <span class="detail-value amount-value" id="paymentAmount"></span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Nội dung:</span>
                        <span class="detail-value" id="paymentDescription"></span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Trạng thái:</span>
                        <span class="detail-value status-pending" id="paymentStatus">
                            <i class="fas fa-clock"></i> Chờ thanh toán
                        </span>
                    </div>
                </div>

                <div class="qr-section">
                    <h3><i class="fas fa-qrcode"></i> Quét mã QR</h3>
                    <div class="qr-code-container">
                        <canvas id="qrCodeCanvas" class="qr-code-image"></canvas>
                    </div>
                    <div class="qr-instructions">
                        Sử dụng ứng dụng ngân hàng để quét mã QR<br>
                        hoặc chuyển khoản thủ công theo thông tin bên trái
                    </div>
                </div>
            </div>

            <div class="payment-actions">
                <a id="checkoutUrlBtn" href="#" target="_blank" class="payment-btn primary">
                    <i class="fas fa-external-link-alt"></i> Thanh toán trực tuyến
                </a>
                <button type="button" class="payment-btn secondary" onclick="closePaymentModal()">
                    <i class="fas fa-times"></i> Đóng
                </button>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/toastify-js@1.12.0/src/toastify.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr@4.6.13/dist/flatpickr.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
                // Configure Vietnamese locale
                flatpickr.localize({
                    weekdays: {
                        shorthand: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
                        longhand: ['Chủ nhật', 'Thứ hai', 'Thứ ba', 'Thứ tư', 'Thứ năm', 'Thứ sáu', 'Thứ bảy']
                    },
                    months: {
                        shorthand: ['Th1', 'Th2', 'Th3', 'Th4', 'Th5', 'Th6', 'Th7', 'Th8', 'Th9', 'Th10', 'Th11', 'Th12'],
                        longhand: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12']
                    },
                    firstDayOfWeek: 1,
                    rangeSeparator: ' đến ',
                    weekAbbreviation: 'Tuần',
                    scrollTitle: 'Cuộn để tăng giảm',
                    toggleTitle: 'Click để chuyển đổi'
                });

                // Initialize "From Date" picker
                const dateFromPicker = flatpickr("#dateFrom", {
                    dateFormat: "d/m/Y",
                    allowInput: false,
                    placeholder: "Chọn ngày bắt đầu",
                    theme: "light",
                    position: "below",
                    disableMobile: true,
                    onChange: function (selectedDates, dateStr, instance) {
                        if (selectedDates.length > 0) {
                            dateToPickr.set('minDate', selectedDates[0]);
                        }
                        applyFilters();
                    },
                    onOpen: function (selectedDates, dateStr, instance) {
                        setTimeout(() => {
                            const calendar = document.querySelector('.flatpickr-calendar');
                            if (calendar) {
                                calendar.style.boxShadow = '0 10px 30px rgba(46, 204, 113, 0.2)';
                                calendar.style.border = '2px solid rgba(46, 204, 113, 0.3)';
                            }
                        }, 10);
                    }
                });

                // Initialize "To Date" picker
                const dateToPickr = flatpickr("#dateTo", {
                    dateFormat: "d/m/Y",
                    allowInput: false,
                    placeholder: "Chọn ngày kết thúc",
                    theme: "light",
                    position: "below",
                    disableMobile: true,
                    onChange: function (selectedDates, dateStr, instance) {
                        if (selectedDates.length > 0) {
                            dateFromPicker.set('maxDate', selectedDates[0]);
                        }
                        applyFilters();
                    },
                    onOpen: function (selectedDates, dateStr, instance) {
                        setTimeout(() => {
                            const calendar = document.querySelector('.flatpickr-calendar');
                            if (calendar) {
                                calendar.style.boxShadow = '0 10px 30px rgba(46, 204, 113, 0.2)';
                                calendar.style.border = '2px solid rgba(46, 204, 113, 0.3)';
                            }
                        }, 10);
                    }
                });

                // Custom CSS for beautiful Flatpickr
                const style = document.createElement('style');
                style.textContent = `
                .flatpickr-calendar {
                    border-radius: 12px !important;
                    box-shadow: 0 8px 25px rgba(46, 204, 113, 0.15) !important;
                    border: 1px solid rgba(46, 204, 113, 0.2) !important;
                    font-family: 'Inter', 'Roboto', sans-serif !important;
                    animation: fadeInUp 0.3s ease-out !important;
                }
                
                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(10px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                
                .flatpickr-day {
                    border-radius: 8px !important;
                    transition: all 0.2s ease !important;
                    font-weight: 500 !important;
                }
                
                .flatpickr-day:hover {
                    background: rgba(46, 204, 113, 0.1) !important;
                    border-color: var(--primary) !important;
                    transform: scale(1.1) !important;
                }
                
                .flatpickr-day.selected {
                    background: var(--gradient-primary) !important;
                    border-color: var(--primary) !important;
                    box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3) !important;
                    color: white !important;
                    font-weight: 600 !important;
                }
                
                .flatpickr-day.today {
                    border-color: var(--primary) !important;
                    color: var(--primary) !important;
                    font-weight: 700 !important;
                    background: rgba(46, 204, 113, 0.05) !important;
                }
                
                .flatpickr-months .flatpickr-month {
                    background: var(--gradient-light) !important;
                    border-radius: 8px 8px 0 0 !important;
                    padding: 0px !important;
                }
                
                .flatpickr-current-month .flatpickr-monthDropdown-months {
                    background: var(--white) !important;
                    border: 1px solid rgba(46, 204, 113, 0.2) !important;
                    border-radius: 6px !important;
                    font-weight: 600 !important;
                }
                
                .flatpickr-prev-month,
                .flatpickr-next-month {
                    color: var(--primary) !important;
                    transition: all 0.2s ease !important;
                    font-size: 16px !important;
                }
                
                .flatpickr-prev-month:hover,
                .flatpickr-next-month:hover {
                    color: var(--primary-dark) !important;
                    transform: scale(1.2) !important;
                    background: rgba(46, 204, 113, 0.1) !important;
                    border-radius: 50% !important;
                }
                
                .flatpickr-weekdays {
                    background: var(--gradient-light) !important;
                    padding: 10px 0 !important;
                }
                
                .flatpickr-weekday {
                    color: var(--dark) !important;
                    font-weight: 700 !important;
                    font-size: 12px !important;
                    text-transform: uppercase !important;
                }

                /* Custom input styling for date pickers */
                #dateFrom, #dateTo {
                    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='%232ecc71' d='M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1H2zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V5z'/%3e%3c/svg%3e") !important;
                    background-repeat: no-repeat !important;
                    background-position: right 12px center !important;
                    background-size: 16px !important;
                    padding-right: 40px !important;
                    cursor: pointer !important;
                }

                #dateFrom:focus, #dateTo:focus {
                    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='%2327ae60' d='M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1H2zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V5z'/%3e%3c/svg%3e") !important;
                }

                /* Responsive design */
                @media (max-width: 768px) {
                    .flatpickr-calendar {
                        width: 280px !important;
                        font-size: 14px !important;
                    }
                    
                    .flatpickr-day {
                        height: 35px !important;
                        line-height: 35px !important;
                    }
                }
            `;
                document.head.appendChild(style);

                // Update applyFilters function to work with Flatpickr format
                window.originalApplyFilters = window.applyFilters;
                window.applyFilters = function () {
                    const filtersElement = document.querySelector('.filters');
                    filtersElement.style.opacity = '0.7';
                    filtersElement.style.transform = 'translateY(-2px)';

                    const statusFilter = document.getElementById('statusFilter').value;
                    const dateFromStr = document.getElementById('dateFrom').value;
                    const dateToStr = document.getElementById('dateTo').value;

                    // Convert Flatpickr format (dd/mm/yyyy) to Date objects for comparison
                    let dateFrom = null;
                    let dateTo = null;

                    if (dateFromStr) {
                        const parts = dateFromStr.split('/');
                        if (parts.length === 3) {
                            dateFrom = new Date(parts[2], parts[1] - 1, parts[0]); // year, month-1, day
                        }
                    }

                    if (dateToStr) {
                        const parts = dateToStr.split('/');
                        if (parts.length === 3) {
                            dateTo = new Date(parts[2], parts[1] - 1, parts[0]);
                            dateTo.setHours(23, 59, 59); // End of day
                        }
                    }

                    filteredOrders = mockOrders.filter(order => {
                        const orderStatus = determineOrderStatus(order);

                        // Filter by service type
                        if (order.type !== currentServiceType) return false;

                        if (statusFilter && orderStatus !== statusFilter) return false;

                        // Convert order date to Date object for comparison
                        if (dateFrom || dateTo) {
                            const orderDateParts = order.date.split('/');
                            if (orderDateParts.length === 3) {
                                const orderDate = new Date(orderDateParts[2], orderDateParts[1] - 1, orderDateParts[0]);

                                if (dateFrom && orderDate < dateFrom) return false;
                                if (dateTo && orderDate > dateTo) return false;
                            }
                        }

                        return true;
                    });

                    currentPage = 1;
                    renderOrders();

                    // Reset filter animation
                    setTimeout(() => {
                        filtersElement.style.opacity = '1';
                        filtersElement.style.transform = 'translateY(0)';
                    }, 300);
                };

                // ...existing code...
            });
        // ===== REAL DATA RENDERING INSTEAD OF MOCK DATA =====

        // Get real data from server
        const realLongTermRequests = {{{ json longTermRequests }}} || [];
        const realShortTermRequests = {{{ json shortTermRequests }}} || [];
        const userData = {{{ json user }}} || {};

       

        // Initialize province and ward data
        let selectedProvince = null;
        let selectedWard = null;

        // Store original form values for cancel functionality
        let originalFormData = {};

        // Initialize form with location data
        function initializeLocationData() {
            const provinceSelect = document.getElementById('province');
            const wardSelect = document.getElementById('ward');

            // Clear existing options except the first one
            provinceSelect.innerHTML = '<option value="">-- Chọn tỉnh/thành phố --</option>';
            wardSelect.innerHTML = '<option value="">-- Chọn phường/xã --</option>';

            // Populate provinces
            locationData.forEach((province, index) => {
                if (province.status === 'active') {
                    const option = document.createElement('option');
                    option.value = index; // Use array index as value
                    option.textContent = province.name;
                    provinceSelect.appendChild(option);
                }
            });

            // Set current user's province and ward if available
            if (userData.address && userData.address.province && userData.address.province.name) {
                // Find matching province
                const provinceIndex = locationData.findIndex(p => p.name === userData.address.province.name);
                if (provinceIndex !== -1) {
                    provinceSelect.value = provinceIndex;
                    selectedProvince = provinceIndex;
                    loadWards(provinceIndex);
                    
                    // Set ward if available
                    if (userData.address.ward && userData.address.ward.name) {
                        setTimeout(() => {
                            const wardOption = Array.from(wardSelect.options).find(option => 
                                option.textContent === userData.address.ward.name
                            );
                            if (wardOption) {
                                wardOption.selected = true;
                                selectedWard = wardOption.value;
                            }
                        }, 100);
                    }
                }
            }

            // Store original form data
            storeOriginalFormData();
        }

        // Load wards based on selected province
        function loadWards(provinceIndex) {
            const wardSelect = document.getElementById('ward');
            wardSelect.innerHTML = '<option value="">-- Chọn phường/xã --</option>';

            if (provinceIndex !== '' && locationData[provinceIndex] && locationData[provinceIndex].wards) {
                locationData[provinceIndex].wards.forEach((ward, index) => {
                    const option = document.createElement('option');
                    option.value = index;
                    option.textContent = ward.name;
                    wardSelect.appendChild(option);
                });
            }
        }

        // Store original form data for cancel functionality
        function storeOriginalFormData() {
            originalFormData = {
                fullName: document.getElementById('fullName').value,
                email: document.getElementById('email').value,
                province: document.getElementById('province').value,
                ward: document.getElementById('ward').value,
                address: document.getElementById('address').value
            };
        }

        // Convert real data to format compatible with existing UI
        function convertRealDataToUIFormat() {
            const allOrders = [];

            // Process Long Term Requests
            realLongTermRequests.forEach((request, index) => {
                const order = {
                    id: request._id || `LT${index + 1}`,
                    type: 'long',
                    status: request.status || 'pending',
                    date: formatDateFromString(request.orderDate) || 'N/A',
                    total: formatCurrency(request.totalCost) || '0',
                    helper: getHelperFromSchedules(request.schedules),
                    service: request.service?.title || request.requestType || 'Dịch vụ dài hạn',
                    startTime: formatTimeFromDateTime(request.startTime) || '00:00',
                    endTime: formatTimeFromDateTime(request.endTime) || '00:00',
                    duration: calculateDuration(request.startTime, request.endTime, 'long'),
                    note: request.note || '',
                    rawData: request, // Keep original data for reference
                    subOrders: convertSchedulesToSubOrders(request.schedules, request)
                };
                allOrders.push(order);
            });

            // Process Short Term Requests  
            realShortTermRequests.forEach((request, index) => {
                const order = {
                    id: request._id || `ST${index + 1}`,
                    type: 'short',
                    status: request.status || 'pending',
                    date: formatDateFromString(request.orderDate) || 'N/A',
                    total: formatCurrency(request.totalCost) || '0',
                    helper: getHelperFromSchedules(request.schedules),
                    service: request.service?.title || request.requestType || 'Dịch vụ ngắn hạn',
                    startTime: formatTimeFromDateTime(request.startTime) || '00:00',
                    endTime: formatTimeFromDateTime(request.endTime) || '00:00',
                    duration: calculateDuration(request.startTime, request.endTime, 'short'),
                    note: request.note || '',
                    rawData: request, // Keep original data for reference
                    subOrders: convertSchedulesToSubOrders(request.schedules, request)
                };
                allOrders.push(order);
            });

            return allOrders;
        }

        // Helper Functions
        function formatDateFromString(dateString) {
            if (!dateString) return null;
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-GB'); // dd/mm/yyyy
            } catch (e) {
                return dateString.slice(0, 10); // Fallback to YYYY-MM-DD format
            }
        }

        function formatTimeFromDateTime(dateTimeString) {
            if (!dateTimeString) return null;
            try {
                const date = new Date(dateTimeString);
                return date.toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });
            } catch (e) {
                return '00:00';
            }
        }

        function formatCurrency(amount) {
            if (!amount) return '0';
            return new Intl.NumberFormat('vi-VN').format(amount);
        }

        function calculateDuration(startTime, endTime, type) {
            if (!startTime || !endTime) {
                return type === 'long' ? 'Dài hạn' : 'Ngắn hạn';
            }

            try {
                const start = new Date(startTime);
                const end = new Date(endTime);
                const diffMs = end.getTime() - start.getTime();
                const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
                const diffHours = Math.ceil(diffMs / (1000 * 60 * 60));

                if (type === 'long') {
                    return `${diffDays} ngày`;
                } else {
                    return `${diffHours} giờ`;
                }
            } catch (e) {
                return type === 'long' ? 'Dài hạn' : 'Ngắn hạn';
            }
        }

        function getHelperFromSchedules(schedules) {
            if (!schedules || !Array.isArray(schedules) || schedules.length === 0) {
                return null;
            }

            // Find first schedule with helper
            const scheduleWithHelper = schedules.find(schedule =>
                schedule.helper && schedule.helper.fullName
            );

            return scheduleWithHelper?.helper?.fullName || null;
        }

        function convertSchedulesToSubOrders(schedules, parentRequest) {
            if (!schedules || !Array.isArray(schedules)) {
                return [];
            }

            return schedules.map((schedule, index) => {
                return {
                    id: schedule._id || `SUB${parentRequest._id}_${index + 1}`,
                    date: formatDateFromString(schedule.workingDate) || 'N/A',
                    startTime: formatTimeFromDateTime(schedule.startTime) || '00:00',
                    endTime: formatTimeFromDateTime(schedule.endTime) || '00:00',
                    status: schedule.status || 'pending',
                    cost: formatCurrency(schedule.cost) || '0',
                    feedback: schedule.note || schedule.feedback || '',
                    helper: schedule.helper?.fullName || null,
                    review: schedule.comment?.review || '',
                    rating: schedule.comment?.rating || 0,
                    isBreak: schedule.isBreak || false,
                    isLose: schedule.isLose || false,
                    rawSchedule: schedule // Keep original schedule data
                };
            });
        }

        // Status mapping for real API data
        function mapApiStatusToUIStatus(apiStatus) {
            const statusMap = {
                'pending': 'pending',
                'confirmed': 'inProgress',
                'assigned': 'inProgress',
                'inProgress': 'inProgress',
                'completed': 'completed',
                'cancelled': 'cancelled',
            };

            return statusMap[apiStatus] || apiStatus;
        }

        // Enhanced status determination for real data
        function determineOrderStatus(order) {
            // Ưu tiên lấy status từ order chính trước
            // Nếu order có status là 'waitPayment', thì trả về trực tiếp
            if (order.status === 'waitPayment') {
                return 'waitPayment';
            }

            if (!order.subOrders || order.subOrders.length === 0) {
                return mapApiStatusToUIStatus(order.status);
            }

            const subStatuses = order.subOrders.map(sub => mapApiStatusToUIStatus(sub.status));

            // For short-term orders (single schedule)
            if (order.type === 'short') {
                // Nếu order chính đã có status rõ ràng, ưu tiên sử dụng
                if (['waitPayment', 'cancelled', 'pending'].includes(order.status)) {
                    return order.status;
                }
                const subOrder = order.subOrders[0];
                return mapApiStatusToUIStatus(subOrder.status);
            }

            // For long-term orders (multiple schedules)
            if (order.type === 'long') {
                if (subStatuses.every(status => status === 'pending')) return 'pending';
                if (subStatuses.every(status => status === 'completed')) return 'completed';
                if (subStatuses.every(status => status === 'cancelled')) return 'cancelled';
                if (subStatuses.some(status => status === 'inProgress')) return 'inProgress';
                if (subStatuses.some(status => status === 'waitPayment')) return 'waitPayment';
            }

            return mapApiStatusToUIStatus(order.status);
        }

        // Initialize with real data
        const mockOrders = convertRealDataToUIFormat();

        console.log('🔄 CONVERTED REAL DATA TO UI FORMAT:');
        console.log('📊 Total Orders:', mockOrders.length);
        console.log('📅 Long Term:', mockOrders.filter(o => o.type === 'long').length);
        console.log('📋 Short Term:', mockOrders.filter(o => o.type === 'short').length);
        console.log('📦 All Converted Orders:', mockOrders);

        // Rest of the existing code continues...
        let filteredOrders = [...mockOrders];
        let currentPage = 1;
        const itemsPerPage = 10;
        let currentOrderForRating = null;
        let currentSubOrderForRating = null;
        let currentRating = 0;
        let currentServiceType = 'short'; // Default to short-term

        // State management
        let isEditing = false;

        // Initialize page with real data
        document.addEventListener('DOMContentLoaded', function () {
            // Set default filter to short-term
            applyFilters();
            renderOrders();
            setupFilters();
            setupForms();
            updateDashboardStats();

            // Show welcome message with real stats

            // Show welcome message with real stats
            const totalOrders = mockOrders.length;
            const completedOrders = mockOrders.filter(order => determineOrderStatus(order) === 'completed').length;

            if (totalOrders > 0) {
                showToast(`Chào mừng! Bạn có ${totalOrders} đơn hàng, ${completedOrders} đã hoàn thành`, 'info');
            } else {
                showToast('Bạn chưa có đơn hàng nào. Hãy đặt dịch vụ đầu tiên!', 'info');
            }
        });

        // Enhanced render orders function for real data
        function renderOrders() {
            const tbody = document.getElementById('ordersTableBody');
            const noResults = document.getElementById('noResults');

            if (filteredOrders.length === 0) {
                tbody.innerHTML = `
            <tr>
                <td colspan="8" style="text-align: center; padding: 40px;">
                    <i class="fas fa-inbox" style="font-size: 3rem; color: #ddd; margin-bottom: 15px;"></i>
                    <h3>Không có đơn hàng</h3>
                    <p>Hiện tại bạn chưa có đơn hàng nào trong danh sách này.</p>
                </td>
            </tr>
        `;
                noResults.style.display = 'none'; // Hide separate no results div
                renderPagination();
                return;
            }

            noResults.style.display = 'none';

            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageOrders = filteredOrders.slice(startIndex, endIndex);

            tbody.innerHTML = pageOrders.map(order => {
                const status = determineOrderStatus(order);
                const statusClass = getStatusClass(status);
                const statusText = getStatusText(status);

                return `
            <tr data-order-id="${order.id}">
                <td>${order.date}</td>
                <td title="${order.service}">${order.service.length > 30 ? order.service.substring(0, 30) + '...' : order.service}</td>
                <td>${order.total} VNĐ</td>
                <td>${order.startTime}</td>
                <td>${order.endTime}</td>
                <td><span class="badge ${statusClass}">${statusText}</span></td>
                <td>
                    <button class="btn btn-primary" onclick="showOrderDetail('${order.id}')" title="Xem chi tiết">
                        <i class="fas fa-eye"></i> Chi tiết
                    </button>
                    ${status === 'waitPayment' ?
                        `<button class="btn btn-success" onclick="processPayment('${order.id}')" title="Thanh toán">
                            <i class="fas fa-credit-card"></i> Thanh toán
                        </button>` : ''
                    }
                    ${status === 'pending' ?
                        `<button class="btn btn-danger" onclick="cancelOrder('${order.id}')" title="Hủy đơn">
                            <i class="fas fa-times"></i> Hủy
                        </button>` : ''
                    }
                </td>
            </tr>
        `;
            }).join('');

            renderPagination();
        }

        // Enhanced show order detail for real data
        function showOrderDetail(orderId) {
            const order = mockOrders.find(o => o.id === orderId);
            if (!order) {
                showToast('Không tìm thấy thông tin đơn hàng', 'error');
                return;
            }

            const orderStatus = determineOrderStatus(order);

            // Display main order info
            document.getElementById('detailServiceType').textContent = order.type === 'short' ? 'Dịch vụ ngắn hạn' : 'Dịch vụ dài hạn';
            document.getElementById('detailTotalAmount').textContent = order.total + ' VNĐ';
            document.getElementById('detailOrderDate').textContent = order.date;

            // Render sub-orders from real API data
            const container = document.getElementById('subOrdersContainer');
            container.innerHTML = `
        <h3>Chi tiết thực hiện</h3>
        ${order.subOrders.length === 0 ?
                    '<p><i class="fas fa-info-circle"></i> Chưa có lịch trình cụ thể</p>' :
                    order.subOrders.map(subOrder => {
                        const canReview = subOrder.status === 'completed' && (!subOrder.review || subOrder.review === '');

                        return `
                    <div class="sub-order-item">
                        <div class="sub-order-header">
                            <span class="sub-order-date">📅 ${subOrder.date}</span>
                            <span class="badge ${getStatusClass(mapApiStatusToUIStatus(subOrder.status))}">${getStatusText(mapApiStatusToUIStatus(subOrder.status))}</span>
                        </div>
                        <div class="sub-order-details">
                            <div><strong>⏰ Thời gian:</strong> ${subOrder.startTime} - ${subOrder.endTime}</div>
                            <div><strong>💰 Chi phí:</strong> ${subOrder.cost} VNĐ</div>
                            <div><strong>👨‍💼 Người thực hiện:</strong> ${subOrder.helper || 'Chưa phân công'}</div>
                            <div><strong>📝 Ghi chú:</strong> ${subOrder.feedback || 'Không có'}</div>
                            ${subOrder.review ? `<div><strong>⭐ Đánh giá:</strong> ${subOrder.review}</div>` : ''}
                            
                            <div class="sub-order-actions" 
                            style="display: flex; justify-content: center; align-items: center;">
                                ${canReview ?
                                `<button class="btn btn-warning btn-sm" onclick="showSubOrderRatingModal('${order.id}', '${subOrder.id}')">
                                        <i class="fas fa-star"></i> Đánh giá
                                    </button>` : ''
                            }
                            </div>
                        </div>
                    </div>
                `;
                    }).join('')
                }
        
        <div class="main-order-actions" style="margin-top: 20px; text-align: center;">
            ${orderStatus === 'waitPayment' ?
                    `<button class="btn btn-success" onclick="processPayment('${order.id}')">
                    <i class="fas fa-credit-card"></i> Thanh toán đơn hàng
                </button>` : ''
                }
            ${orderStatus === 'pending' ?
                    `<button class="btn btn-danger" onclick="cancelOrder('${order.id}')">
                    <i class="fas fa-times"></i> Hủy đơn hàng
                </button>` : ''
                }
        </div>
    `;

            document.getElementById('detailModal').classList.add('show');
        }

        // Update dashboard stats with real data
        function updateDashboardStats() {
            const totalOrders = mockOrders.length;
            const completedOrders = mockOrders.filter(order => determineOrderStatus(order) === 'completed').length;
            const processingOrders = mockOrders.filter(order => determineOrderStatus(order) === 'inProgress').length;
            const cancelledOrders = mockOrders.filter(order => determineOrderStatus(order) === 'cancelled').length;

            // Update DOM if on dashboard
            const dashboardSection = document.getElementById('dashboard-section');
            if (dashboardSection) {
                const statCards = dashboardSection.querySelectorAll('p[style*="font-size: 2rem"]');
                if (statCards.length >= 4) {
                    statCards[0].textContent = totalOrders;
                    statCards[1].textContent = completedOrders;
                    statCards[2].textContent = processingOrders;
                    statCards[3].textContent = cancelledOrders;
                }
            }
        }

        // Log final result for debugging
        console.log('✅ REAL DATA INTEGRATION COMPLETE');
        console.log('📊 Final mockOrders array:', mockOrders);
        console.log('🔍 Sample order structure:', mockOrders[0]);

        // Continue with existing functions...
        // (All other existing functions remain the same)
    </script>
    <script>
        // Add these missing functions to your script section

        // Status helper functions
        function getStatusClass(status) {
            const statusClassMap = {
                'completed': 'badge-success',
                'pending': 'badge-warning',
                'waitPayment': 'badge-warning',
                'inProgress': 'badge-primary',
                'cancelled': 'badge-danger',
                'assigned': 'badge-primary'
            };
            return statusClassMap[status] || 'badge-secondary';
        }

        function getStatusText(status) {
            const statusTextMap = {
                'completed': 'Đã hoàn thành',
                'pending': 'Chờ xác nhận',
                'waitPayment': 'Chờ thanh toán',
                'inProgress': 'Đang thực hiện',
                'cancelled': 'Đã hủy',
                'assigned': 'Đã phân công'
            };
            return statusTextMap[status] || status;
        }

        // Render pagination
        function renderPagination() {
            const pagination = document.getElementById('pagination');
            const totalPages = Math.ceil(filteredOrders.length / itemsPerPage);

            if (totalPages <= 1) {
                pagination.innerHTML = '';
                return;
            }

            let paginationHTML = '';

            // Previous button
            if (currentPage > 1) {
                paginationHTML += `<button onclick="changePage(${currentPage - 1})">«</button>`;
            }

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const activeClass = i === currentPage ? 'active' : '';
                paginationHTML += `<button class="${activeClass}" onclick="changePage(${i})">${i}</button>`;
            }

            // Next button
            if (currentPage < totalPages) {
                paginationHTML += `<button onclick="changePage(${currentPage + 1})">»</button>`;
            }

            pagination.innerHTML = paginationHTML;
        }

        // Change page
        function changePage(page) {
            currentPage = page;
            renderOrders();
        }

        // Navigation functions
        function showSection(sectionName) {
            // Hide all sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });

            // Remove active from all sidebar items
            document.querySelectorAll('.sidebar-item').forEach(item => {
                item.classList.remove('active');
            });

            // Show selected section
            document.getElementById(sectionName + '-section').classList.add('active');

            // Add active to clicked sidebar item
            event.target.closest('.sidebar-item').classList.add('active');

            // Close sidebar on mobile
            if (window.innerWidth <= 768) {
                document.getElementById('sidebar').classList.remove('show');
            }
        }

        // Toggle sidebar function
        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('show');
        }

        // User dropdown functions
        function toggleUserDropdown() {
            document.getElementById('userDropdown').classList.toggle('show');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function (e) {
            if (!e.target.closest('.user-dropdown')) {
                document.getElementById('userDropdown').classList.remove('show');
            }
        });

        // Toggle service type function
        function toggleServiceType() {
            const toggle = document.getElementById('typeToggle');
            const slider = toggle.querySelector('.toggle-slider');

            if (currentServiceType === 'short') {
                currentServiceType = 'long';
                toggle.classList.add('long');
                slider.textContent = 'Dài hạn';
            } else {
                currentServiceType = 'short';
                toggle.classList.remove('long');
                slider.textContent = 'Ngắn hạn';
            }

            applyFilters();
        }

        // Apply filters
        function applyFilters() {
            // Add loading effect
            const filtersElement = document.querySelector('.filters');
            filtersElement.style.opacity = '0.7';
            filtersElement.style.transform = 'translateY(-2px)';

            const statusFilter = document.getElementById('statusFilter').value;
            const dateFrom = document.getElementById('dateFrom').value;
            const dateTo = document.getElementById('dateTo').value;

            filteredOrders = mockOrders.filter(order => {
                const orderStatus = determineOrderStatus(order);

                // Filter by service type (always filter by current toggle state)
                if (order.type !== currentServiceType) return false;

                if (statusFilter && orderStatus !== statusFilter) return false;
                if (dateFrom && order.date < dateFrom) return false;
                if (dateTo && order.date > dateTo) return false;

                return true;
            });

            currentPage = 1;
            renderOrders();

            // Reset filter animation
            setTimeout(() => {
                filtersElement.style.opacity = '1';
                filtersElement.style.transform = 'translateY(0)';
            }, 300);
        }

        // Setup filters
        function setupFilters() {
            document.getElementById('statusFilter').addEventListener('change', applyFilters);
            document.getElementById('dateFrom').addEventListener('change', applyFilters);
            document.getElementById('dateTo').addEventListener('change', applyFilters);
        }

        // Close detail modal
        function closeDetailModal() {
            document.getElementById('detailModal').classList.remove('show');
        }

        // Show sub-order rating modal
        function showSubOrderRatingModal(orderId, subOrderId) {
            currentOrderForRating = orderId;
            currentSubOrderForRating = subOrderId;

            const order = mockOrders.find(o => o.id === orderId);
            const subOrder = order.subOrders.find(s => s.id === subOrderId);

            document.getElementById('ratingOrderId').textContent = `${orderId} - ${subOrder.date}`;
            currentRating = 0;

            // Reset stars
            document.querySelectorAll('#starRating .star').forEach(star => {
                star.classList.remove('active');
            });

            document.getElementById('reviewText').value = '';

            document.getElementById('ratingModal').classList.add('show');
        }

        // Close rating modal
        function closeRatingModal() {
            document.getElementById('ratingModal').classList.remove('show');
            currentOrderForRating = null;
            currentSubOrderForRating = null;
            currentRating = 0;
        }

        // Setup star rating
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('#starRating .star').forEach(star => {
                star.addEventListener('click', function () {
                    currentRating = parseInt(this.dataset.rating);
                    updateStarDisplay();
                });

                star.addEventListener('mouseover', function () {
                    const rating = parseInt(this.dataset.rating);
                    document.querySelectorAll('#starRating .star').forEach((s, index) => {
                        if (index < rating) {
                            s.classList.add('active');
                        } else {
                            s.classList.remove('active');
                        }
                    });
                });
            });

            document.getElementById('starRating').addEventListener('mouseleave', updateStarDisplay);
        });

        function updateStarDisplay() {
            document.querySelectorAll('#starRating .star').forEach((star, index) => {
                if (index < currentRating) {
                    star.classList.add('active');
                } else {
                    star.classList.remove('active');
                }
            });
        }

        // Submit rating for sub-order
        function submitRating() {
            if (!currentOrderForRating || !currentSubOrderForRating || currentRating === 0) {
                showToast('Vui lòng chọn số sao đánh giá', 'error');
                return;
            }

            const reviewText = document.getElementById('reviewText').value;
            const isBreak = document.getElementById('isBreakCheckbox')?.checked || false;
            const isLose = document.getElementById('isLoseCheckbox')?.checked || false;

            // Update the sub-order with rating
            const orderIndex = mockOrders.findIndex(order => order.id === currentOrderForRating);
      /*     if (orderIndex !== -1) {
                const subOrderIndex = mockOrders[orderIndex].subOrders.findIndex(sub => sub.id === currentSubOrderForRating);
                if (subOrderIndex !== -1) {
                    mockOrders[orderIndex].subOrders[subOrderIndex].review = reviewText;
                    mockOrders[orderIndex].subOrders[subOrderIndex].rating = currentRating;
                    mockOrders[orderIndex].subOrders[subOrderIndex].isBreak = isBreak;
                    mockOrders[orderIndex].subOrders[subOrderIndex].isLose = isLose;
                }
            }*/
            fetch(`/request/review`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    detailId: mockOrders[orderIndex].subOrders.find(sub => sub.id === currentSubOrderForRating).rawSchedule._id,
                    rating: currentRating,
                    review: reviewText,
                    loseThings : isBreak,
                    breakThings:  isLose
                })
            })
            .then(response => response.json())
            .then(data => {
                if(data.success){
                    // Update local data to reflect rating
                    if (orderIndex !== -1) {
                        const subOrderIndex = mockOrders[orderIndex].subOrders.findIndex(sub => sub.id === currentSubOrderForRating);
                        if (subOrderIndex !== -1) {
                            mockOrders[orderIndex].subOrders[subOrderIndex].review = reviewText;
                            mockOrders[orderIndex].subOrders[subOrderIndex].rating = currentRating;
                            mockOrders[orderIndex].subOrders[subOrderIndex].isBreak = isBreak;
                            mockOrders[orderIndex].subOrders[subOrderIndex].isLose = isLose;
                        }
                    }
                    applyFilters();
                    showToast(`Đã gửi đánh giá ${currentRating} sao`, 'success');
                    afterSuccessfulRating();
                } else {
                    showToast('Không thể gửi đánh giá', 'error');
                }
            })
            closeRatingModal();

            // Refresh the detail view
            setTimeout(() => {
                showOrderDetail(currentOrderForRating);
            }, 100);
        }

        // Process Payment Function
        function processPayment(orderId) {
            const orderIndex = mockOrders.findIndex(order => order.id === orderId);
            if (orderIndex !== -1) {
                // Hiển thị loading
                showToast('Đang tạo link thanh toán...', 'info');
                
                // Tạo payment link với PayOS
                fetch(`/request/createpayment`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        orderId: mockOrders[orderIndex].rawData._id,
                        amount: mockOrders[orderIndex].totalAmount,
                        description: `Thanh toán đơn hàng ${mockOrders[orderIndex].id}`,
                        host: window.location.origin
                    })
                })
                .then(response => {
                    // Kiểm tra response status
                    if (response.status === 401) {
                        throw new Error('Session hết hạn, vui lòng đăng nhập lại');
                    }
                    if (response.status === 500) {
                        throw new Error('Lỗi server, vui lòng thử lại sau');
                    }
                    return response.json();
                })
                .then(data => {
                    if(data.success && data.paymentData){
                        showPaymentModal(data.paymentData, orderId);
                    } else {
                        throw new Error(data.message || 'Không thể tạo link thanh toán');
                    }
                })
                .catch(error => {
                    console.error('Error creating payment link:', error);
                    if (error.message.includes('Session hết hạn')) {
                        showToast('❌ ' + error.message, 'error');
                        // Redirect to login after 2 seconds
                        setTimeout(() => {
                            window.location.href = '/account/login';
                        }, 2000);
                    } else {
                        showToast('❌ ' + error.message, 'error');
                    }
                });
            }
        }

        // Payment Modal Functions
        function showPaymentModal(paymentData, orderId) {
            // Dừng tất cả polling cũ trước khi bắt đầu
            if (window.paymentPollingInterval) {
                clearInterval(window.paymentPollingInterval);
                window.paymentPollingInterval = null;
            }
            
            // Reset modal về trạng thái ban đầu trước khi hiển thị
            resetPaymentModal();
            
            // Populate payment information
            document.getElementById('paymentOrderCode').textContent = paymentData.orderCode;
            document.getElementById('paymentAccountName').textContent = paymentData.accountName;
            document.getElementById('paymentAccountNumber').textContent = paymentData.accountNumber;
            document.getElementById('paymentBankName').textContent = getBankName(paymentData.bin);
            document.getElementById('paymentAmount').textContent = formatCurrency(paymentData.amount) + ' ' + paymentData.currency;
            document.getElementById('paymentDescription').textContent = paymentData.description;
            
            // Set checkout URL
            document.getElementById('checkoutUrlBtn').href = paymentData.checkoutUrl;
            
            // Generate QR Code với retry logic
            setTimeout(() => {
                generateQRCode(paymentData.qrCode);
            }, 100); // Delay nhỏ để đảm bảo DOM đã sẵn sàng
            
            // Show modal
            document.getElementById('paymentModal').classList.add('show');
            
            // Store payment data for later use
            window.currentPaymentData = paymentData;
            window.currentPaymentOrderId = orderId;
            
            // Bắt đầu polling kiểm tra trạng thái thanh toán
            startPaymentStatusPolling(paymentData.orderCode);
        }

        // Polling để kiểm tra trạng thái thanh toán
        function startPaymentStatusPolling(orderCode) {
            // Dừng polling cũ nếu có
            if (window.paymentPollingInterval) {
                clearInterval(window.paymentPollingInterval);
            }
            
            console.log('Bắt đầu kiểm tra trạng thái thanh toán ');
            
            window.paymentPollingInterval = setInterval(() => {
                checkPaymentStatus(orderCode);
            }, 3000); // Kiểm tra mỗi 3 giây
            
            // Dừng polling sau 10 phút (600 seconds)
            setTimeout(() => {
                if (window.paymentPollingInterval) {
                    clearInterval(window.paymentPollingInterval);
                    console.log('Dừng polling thanh toán sau 10 phút');
                }
            }, 600000);
        }

        // Kiểm tra trạng thái thanh toán
        function checkPaymentStatus(orderCode) {
            fetch(`/request/checkpaymentstatus`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    orderCode: orderCode
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    let orderId = window.currentPaymentOrderId
                    console.log('Trạng thái thanh toán hiện tại:', data.paymentStatus.status);
                    if (data.paymentStatus.status === 'PAID' || data.paymentStatus.status === 'paid') {
                        // Thanh toán thành công
                        handlePaymentSuccess(orderId);
                    } else if (data.paymentStatus.status === 'CANCELLED' || data.paymentStatus.status === 'cancelled') {
                        // Thanh toán bị hủy
                        handlePaymentCancelled(orderId);
                    }
                    // Nếu status vẫn là PENDING thì tiếp tục polling
                }
            })
            .catch(error => {
                console.error('Error checking payment status:', error);
            });
        }

        // Xử lý khi thanh toán thành công
        function handlePaymentSuccess(orderId) {
            console.log('Thanh toán thành công cho đơn hàng:', orderId);
            
            // Dừng polling
            if (window.paymentPollingInterval) {
                clearInterval(window.paymentPollingInterval);
            }
            
            // Cập nhật UI
            showPaymentSuccessAnimation();
            
            // Cập nhật trạng thái đơn hàng trong danh sách
            const orderIndex = mockOrders.findIndex(order => order.id === orderId);
            if (orderIndex !== -1) {
                mockOrders[orderIndex].status = 'completed';
                applyFilters(); // Refresh danh sách
            }
            
            // Đóng modal sau 3 giây
            setTimeout(() => {
                closePaymentModal();
                closeDetailModal();
                showToast('✅ Thanh toán thành công! Đơn hàng đã hoàn thành.', 'success');
            }, 3000);
        }

        // Xử lý khi thanh toán bị hủy
        function handlePaymentCancelled(orderId) {
            console.log('Thanh toán bị hủy cho đơn hàng:', orderId);
            
            // Dừng polling
            if (window.paymentPollingInterval) {
                clearInterval(window.paymentPollingInterval);
            }
            
            // Hiển thị thông báo
            showToast('❌ Thanh toán đã bị hủy', 'error');
            
            // Có thể giữ modal mở để người dùng thử lại
        }

        // Animation thanh toán thành công
        function showPaymentSuccessAnimation() {
            const modal = document.getElementById('paymentModal');
            const qrSection = modal.querySelector('.qr-section');
            const qrCodeContainer = modal.querySelector('.qr-code-container');
            const qrInstructions = modal.querySelector('.qr-instructions');
            const paymentActions = modal.querySelector('.payment-actions');
            
            if (!qrSection) {
                console.error('QR section not found');
                return;
            }
            
            // Ẩn QR code container và instructions
            if (qrCodeContainer) {
                qrCodeContainer.style.display = 'none';
            }
            if (qrInstructions) {
                qrInstructions.style.display = 'none';
            }
            
            // Kiểm tra xem đã có success animation chưa
            let successAnimation = qrSection.querySelector('.payment-success-animation');
            if (!successAnimation) {
                // Tạo success animation element
                successAnimation = document.createElement('div');
                successAnimation.className = 'payment-success-animation';
                successAnimation.innerHTML = `
                    <div style="text-align: center; padding: 40px;">
                        <div style="font-size: 60px; color: #2ecc71; margin-bottom: 20px;">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <h3 style="color: #2ecc71; margin-bottom: 10px;">Thanh toán thành công!</h3>
                        <p style="color: #666;">Đơn hàng của bạn đã được xử lý</p>
                        <div style="margin-top: 20px;">
                            <div class="spinner" style="border: 3px solid #f3f3f3; border-top: 3px solid #2ecc71; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 0 auto;"></div>
                            <p style="margin-top: 10px; font-size: 14px; color: #999;">Đang cập nhật...</p>
                        </div>
                    </div>
                `;
                
                // Thêm success animation vào QR section (không thay thế)
                qrSection.appendChild(successAnimation);
            } else {
                // Nếu đã có, chỉ hiển thị lại
                successAnimation.style.display = 'block';
            }
            
            // Ẩn các nút action
            if (paymentActions) {
                paymentActions.style.display = 'none';
            }
        }

        function closePaymentModal() {
            // Dừng tất cả polling
            if (window.paymentPollingInterval) {
                clearInterval(window.paymentPollingInterval);
                window.paymentPollingInterval = null;
                console.log('Đã dừng polling thanh toán');
            }
            
            // Ẩn modal
            document.getElementById('paymentModal').classList.remove('show');
            
            // Reset modal về trạng thái ban đầu với delay
            setTimeout(() => {
                resetPaymentModal();
            }, 300); // Chờ animation đóng modal xong
        }

        // Reset payment modal về trạng thái ban đầu
        function resetPaymentModal() {
            // Dừng tất cả polling intervals
            if (window.paymentPollingInterval) {
                clearInterval(window.paymentPollingInterval);
                window.paymentPollingInterval = null;
            }
            
            // Xóa dữ liệu payment hiện tại
            window.currentPaymentData = null;
            window.currentPaymentOrderId = null;
            
            // Reset UI elements về trạng thái ban đầu
            const modal = document.getElementById('paymentModal');
            if (!modal) return;
            
            const qrSection = modal.querySelector('.qr-section');
            const qrCodeContainer = modal.querySelector('.qr-code-container');
            const qrInstructions = modal.querySelector('.qr-instructions');
            const paymentActions = modal.querySelector('.payment-actions');
            const successAnimation = modal.querySelector('.payment-success-animation');
            
            // Hiển thị lại QR code container và instructions
            if (qrCodeContainer) {
                qrCodeContainer.style.display = 'inline-block';
            }
            if (qrInstructions) {
                qrInstructions.style.display = 'block';
            }
            
            // Ẩn success animation nếu có
            if (successAnimation) {
                successAnimation.style.display = 'none';
            }
            
            // Hiển thị lại payment actions
            if (paymentActions) {
                paymentActions.style.display = 'flex';
            }
            
            // Reset QR section opacity
            if (qrSection) {
                qrSection.style.opacity = '1';
                qrSection.style.transition = '';
            }
            
            // CẢI THIỆN: Clear canvas kỹ lưỡng hơn
            const canvas = modal.querySelector('#qrCodeCanvas');
            if (canvas) {
                const ctx = canvas.getContext('2d');
                // Clear toàn bộ canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                // Reset canvas size để đảm bảo
                canvas.width = 200;
                canvas.height = 200;
                canvas.style.display = 'block';
            }
            
            // CẢI THIỆN: Xóa tất cả img backup QR nếu có
            const qrBackupImgs = modal.querySelectorAll('.qr-backup-img');
            qrBackupImgs.forEach(img => img.remove());
            
            // Reset checkout URL
            const checkoutBtn = modal.querySelector('#checkoutUrlBtn');
            if (checkoutBtn) {
                checkoutBtn.href = '#';
            }
        }

        function generateQRCode(qrData) {
            const canvas = document.getElementById('qrCodeCanvas');
            
            // Đảm bảo canvas hiển thị và được clear
            canvas.style.display = 'block';
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, 200, 200);
            
            // Kiểm tra xem thư viện QRCode đã được load chưa
            if (typeof QRCode === 'undefined') {
                console.warn('QRCode library is not loaded, using alternative method');
                generateQRCodeAlternative(qrData);
                return;
            }
            
            try {
                QRCode.toCanvas(canvas, qrData, {
                    width: 200,
                    height: 200,
                    margin: 2,
                    color: {
                        dark: '#2c3e50',
                        light: '#ffffff'
                    }
                }, function (error) {
                    if (error) {
                        console.error('Error generating QR code:', error);
                        generateQRCodeAlternative(qrData);
                    } else {
                        console.log('QR code generated successfully');
                    }
                });
            } catch (error) {
                console.error('QRCode library error:', error);
                generateQRCodeAlternative(qrData);
            }
        }

        function generateQRCodeAlternative(qrData) {
            const canvas = document.getElementById('qrCodeCanvas');
            const qrContainer = canvas.parentElement;
            
            // Xóa canvas và tạo img element
            canvas.style.display = 'none';
            
            // Kiểm tra xem đã có img backup chưa
            let qrImg = qrContainer.querySelector('.qr-backup-img');
            if (!qrImg) {
                qrImg = document.createElement('img');
                qrImg.className = 'qr-backup-img qr-code-image';
                qrContainer.appendChild(qrImg);
            }
            
            // Sử dụng QR API service
            const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qrData)}`;
            
            qrImg.src = qrApiUrl;
            qrImg.style.display = 'block';
            qrImg.onload = function() {
                console.log('QR code loaded via API successfully');
            };
            qrImg.onerror = function() {
                console.error('Failed to load QR code from API');
                // Hiển thị thông báo cuối cùng
                qrImg.style.display = 'none';
                canvas.style.display = 'block';
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, 200, 200);
                ctx.fillStyle = '#e74c3c';
                ctx.font = '12px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('Không thể tạo QR', 100, 90);
                ctx.fillText('Vui lòng chuyển khoản thủ công', 100, 110);
            };
        }

        function getBankName(bin) {
            const bankMap = {
                '970422': 'MB Bank (Military Bank)',
                '970415': 'Vietinbank',
                '970436': 'Vietcombank',
                '970418': 'BIDV',
                '970403': 'Sacombank',
                '970407': 'Techcombank',
                '970432': 'VPBank',
                '970423': 'TPBank',
                '970448': 'OCB',
                '970429': 'SCB'
            };
            return bankMap[bin] || `Ngân hàng (${bin})`;
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN').format(amount);
        }

        // Close modal when clicking outside
        document.addEventListener('click', function(e) {
            if (e.target.id === 'paymentModal') {
                closePaymentModal();
            }
        });

        // Cancel Order Function
        function cancelOrder(orderId) {
            showConfirmModal('cancel', orderId, function (id) {
                const orderIndex = mockOrders.findIndex(order => order.id === id);
                if (orderIndex !== -1) {
        /*            mockOrders[orderIndex].status = 'cancelled';
                    mockOrders[orderIndex].subOrders.forEach(subOrder => {
                        if (subOrder.status === 'pending' || subOrder.status === 'assigned') {
                            subOrder.status = 'cancelled';
                            subOrder.feedback = 'Đã hủy';
                        }s
                    });*/
                    fetch(`/request/cancel`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId: mockOrders[orderIndex].rawData._id })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if(data.success){
                            // Update local data to reflect cancellation
                            mockOrders[orderIndex].status = 'cancelled';
                            mockOrders[orderIndex].subOrders.forEach(subOrder => {
                                if (subOrder.status === 'pending' || subOrder.status === 'assigned') {
                                    subOrder.status = 'cancelled';
                                    subOrder.feedback = 'Đã hủy';
                                }
                            });
                            applyFilters();
                            closeDetailModal();
                            showToast('Đơn hàng đã được hủy thành công', 'success');
                        } else {
                            showToast('Không thể hủy đơn hàng này', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error cancelling order:', error);
                        showToast('Đã xảy ra lỗi khi hủy đơn hàng', 'error');
                    });
                }
            });
        }

        // Show confirmation modal
        function showConfirmModal(type, orderId, callback) {
            currentConfirmAction = callback;
            currentConfirmOrderId = orderId;

            const modal = document.getElementById('confirmModal');
            const icon = document.getElementById('confirmIcon');
            const title = document.getElementById('confirmTitle');
            const message = document.getElementById('confirmMessage');
            const confirmBtn = document.getElementById('confirmButton');

            if (type === 'payment') {
                icon.innerHTML = '<i class="fas fa-credit-card"></i>';
                icon.className = 'confirm-modal-icon payment';
                title.textContent = 'Xác nhận thanh toán';
                message.textContent = 'Bạn có chắc chắn muốn thanh toán cho đơn hàng này? Sau khi thanh toán, đơn hàng sẽ được chuyển sang trạng thái hoàn thành.';
                confirmBtn.textContent = 'Thanh toán';
                confirmBtn.className = 'btn btn-success';
            } else if (type === 'cancel') {
                icon.innerHTML = '<i class="fas fa-times-circle"></i>';
                icon.className = 'confirm-modal-icon cancel';
                title.textContent = 'Xác nhận hủy đơn';
                message.textContent = 'Bạn có chắc chắn muốn hủy đơn hàng này? Hành động này không thể hoàn tác.';
                confirmBtn.textContent = 'Hủy đơn';
                confirmBtn.className = 'btn btn-danger';
            }

            modal.classList.add('show');
        }

        // Close confirmation modal
        function closeConfirmModal() {
            document.getElementById('confirmModal').classList.remove('show');
            currentConfirmAction = null;
            currentConfirmOrderId = null;
        }

        // Execute confirmed action
        function confirmAction() {
            if (currentConfirmAction && currentConfirmOrderId) {
                currentConfirmAction(currentConfirmOrderId);
                closeConfirmModal();
            }
        }

        // Account form functions
        function toggleEdit() {
            isEditing = !isEditing;
            const editBtn = document.getElementById('editBtn');
            const saveBtn = document.getElementById('saveBtn');
            const cancelBtn = document.getElementById('cancelBtn');
            const inputs = document.querySelectorAll('#accountForm input:not([type="tel"]), #accountForm select');

            if (isEditing) {
                inputs.forEach(input => input.disabled = false);
                editBtn.style.display = 'none';
                saveBtn.style.display = 'inline-block';
                cancelBtn.style.display = 'inline-block';
                
                // Setup province change event
                document.getElementById('province').addEventListener('change', function() {
                    const selectedIndex = this.value;
                    selectedProvince = selectedIndex;
                    loadWards(selectedIndex);
                    selectedWard = null; // Reset ward selection
                });
                
                // Setup ward change event
                document.getElementById('ward').addEventListener('change', function() {
                    selectedWard = this.value;
                });
            } else {
                inputs.forEach(input => input.disabled = true);
                editBtn.style.display = 'inline-block';
                saveBtn.style.display = 'none';
                cancelBtn.style.display = 'none';
            }
        }

        // Cancel edit function
        function cancelEdit() {
            // Restore original values
            document.getElementById('fullName').value = originalFormData.fullName;
            document.getElementById('email').value = originalFormData.email;
            document.getElementById('province').value = originalFormData.province;
            document.getElementById('ward').value = originalFormData.ward;
            document.getElementById('address').value = originalFormData.address;
            
            // Load wards for the original province
            if (originalFormData.province !== '') {
                loadWards(originalFormData.province);
                setTimeout(() => {
                    document.getElementById('ward').value = originalFormData.ward;
                }, 100);
            }
            
            toggleEdit(); // Exit edit mode
            showToast('Đã hủy thay đổi', 'info');
        }

        // Setup forms with enhanced location handling
        function setupForms() {
            // Initialize location data
            initializeLocationData();
            
            document.getElementById('accountForm').addEventListener('submit', function (e) {
                e.preventDefault();
                
                // Validate form
                const fullName = document.getElementById('fullName').value.trim();
                const email = document.getElementById('email').value.trim();
                const provinceIndex = document.getElementById('province').value;
                const wardIndex = document.getElementById('ward').value;
                const address = document.getElementById('address').value.trim();
                
                if (!fullName) {
                    showToast('Vui lòng nhập họ và tên', 'error');
                    return;
                }
                
                if (!email) {
                    showToast('Vui lòng nhập email', 'error');
                    return;
                }
                
                if (!provinceIndex) {
                    showToast('Vui lòng chọn tỉnh/thành phố', 'error');
                    return;
                }
                
                if (!wardIndex) {
                    showToast('Vui lòng chọn phường/xã', 'error');
                    return;
                }
                
                if (!address) {
                    showToast('Vui lòng nhập địa chỉ chi tiết', 'error');
                    return;
                }
                
                // Prepare data for submission
                const updateData = {
                    fullName: fullName,
                    email: email,
                    addresses: [{
                        province: locationData[provinceIndex].name,
                        ward: locationData[provinceIndex].wards[wardIndex].name,
                        detailAddress: address
                    }]
                };
                
                // Show loading state
                const saveBtn = document.getElementById('saveBtn');
                const originalText = saveBtn.innerHTML;
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin" style="margin-right: 8px;"></i>Đang lưu...';
                saveBtn.disabled = true;
                
                fetch('/account/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updateData)
                })
                .then(response => response.json())
                .then(data => {
                    // Reset button state
                    saveBtn.innerHTML = originalText;
                    saveBtn.disabled = false;
                    
                    if (data.success) {
                        // Update stored original data
                        storeOriginalFormData();
                        toggleEdit(); // Exit edit mode
                        showToast('Cập nhật thông tin thành công!', 'success');
                    } else {
                        showToast(data.message || 'Có lỗi xảy ra khi cập nhật thông tin', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Reset button state
                    saveBtn.innerHTML = originalText;
                    saveBtn.disabled = false;
                    showToast('Có lỗi xảy ra khi cập nhật thông tin', 'error');
                });
            });

            // Password form handling
            document.getElementById('passwordForm').addEventListener('submit', function (e) {
                e.preventDefault();
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                if (newPassword !== confirmPassword) {
                    showToast('Mật khẩu xác nhận không khớp', 'error');
                    return;
                }

                if (newPassword.length < 6) {
                    showToast('Mật khẩu mới phải có ít nhất 6 ký tự', 'error');
                    return;
                }

                // Show loading state
                const submitBtn = e.target.querySelector('button[type="submit"]');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin" style="margin-right: 8px;"></i>Đang xử lý...';
                submitBtn.disabled = true;

                fetch('/account/changepassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        currentPassword: currentPassword,
                        newPassword: newPassword
                    })
                })
                .then(response => response.json())
                .then(data=> {
                    // Reset button state
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;

                    if (data.success) {
                        showToast('Đổi mật khẩu thành công!', 'success');
                        // Clear form
                        document.getElementById('passwordForm').reset();
                    } else {
                        showToast(data.message || 'Có lỗi xảy ra khi đổi mật khẩu', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Reset button state
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                    showToast('Có lỗi xảy ra khi đổi mật khẩu', 'error');
                });
          //      showToast('Mật khẩu đã được thay đổi thành công', 'success');
                this.reset();
            });
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            if (typeof Toastify !== 'undefined') {
                Toastify({
                    text: message,
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    className: `toast-${type}`,
                    stopOnFocus: true
                }).showToast();
            } else {
                alert(message);
            }
        }

        // Logout function
        function logout() {
            if (confirm('Bạn có chắc chắn muốn đăng xuất?')) {
                showToast('Đăng xuất thành công', 'success');
                setTimeout(() => {
                    window.location.href = '/account/logout';
                }, 1000);
            }
        }

        // Global variables for confirmation
        let currentConfirmAction = null;
        let currentConfirmOrderId = null;

        // Close modals when clicking outside
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('detailModal')?.addEventListener('click', function (e) {
                if (e.target === this) {
                    closeDetailModal();
                }
            });

            document.getElementById('ratingModal')?.addEventListener('click', function (e) {
                if (e.target === this) {
                    closeRatingModal();
                }
            });

            // Close confirmation modal with Escape key
            document.addEventListener('keydown', function (e) {
                if (e.key === 'Escape') {
                    const confirmModal = document.getElementById('confirmModal');
                    if (confirmModal.classList.contains('show')) {
                        closeConfirmModal();
                    }
                }
            });
        });

        // Debug function để kiểm tra trạng thái modal
        function debugPaymentModal() {
            const modal = document.getElementById('paymentModal');
            const qrSection = modal.querySelector('.qr-section');
            const qrCodeContainer = modal.querySelector('.qr-code-container');
            const successAnimation = modal.querySelector('.payment-success-animation');
            const canvas = modal.querySelector('#qrCodeCanvas');
            const backupImg = modal.querySelector('.qr-backup-img');
            
            console.log('=== Payment Modal Debug ===');
            console.log('Modal exists:', !!modal);
            console.log('QR Section exists:', !!qrSection);
            console.log('QR Container exists:', !!qrCodeContainer);
            console.log('QR Container display:', qrCodeContainer?.style.display || 'default');
            console.log('Success Animation exists:', !!successAnimation);
            console.log('Success Animation display:', successAnimation?.style.display || 'default');
            console.log('Canvas exists:', !!canvas);
            console.log('Backup Image exists:', !!backupImg);
            console.log('Current Payment Data:', window.currentPaymentData);
            console.log('Current Payment Order ID:', window.currentPaymentOrderId);
            console.log('==========================');
        }

        // Expose debug function to global scope for testing
        window.debugPaymentModal = debugPaymentModal;
    </script>

</body>

</html>
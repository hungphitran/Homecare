<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Homecare</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="/js/scripts.js"></script>
</head>
<body>
    <div class="container-request" style="margin-top: 100px">
        
    <div class="confirmation-container-form-homecare">
        <h1 class="title-form-homecare">Xác Nhận Thông Tin Đặt Dịch Vụ</h1>
    
        <form id="confirmationForm" class="form-form-homecare" action="/request/save" method="POST">
            <input type="hidden" id="customerInfo" name="customerInfo" value="">
            <input type="hidden" name="requestType" value="{{request.requestType}}">
            <input type="hidden" name="orderDate" value="{{request.orderDate}}">
            <div class="grid-form-homecare">
                <div class="group-form-homecare">
                    <label class="label-form-homecare" for="phone">Số điện thoại</label>
                    <input class="input-form-homecare" type="tel" id="phone" name="phone" value="{{customer.phone}}" required readonly style="background:#f2f2f2; pointer-events:none;">
                </div>
    
                <div class="group-form-homecare">
                    <label class="label-form-homecare" for="fullname">Họ và tên</label>
                    <input class="input-form-homecare" type="text" id="fullname" name="fullname" value="{{customer.fullName}}"  required>
                </div>
    
                <div class="group-form-homecare">
                    <label class="label-form-homecare" for="city">Tỉnh/Thành phố</label>
                    <select class="select-form-homecare" id="city" required disabled style="background:#f2f2f2; pointer-events:none;">
                        <option value="{{request.province}}">{{request.province}}</option>
                    </select>
                    <!-- Hidden field retains province value for submission -->
                    <input type="hidden" name="province" value="{{request.province}}">
                </div>
    
                <div class="group-form-homecare">
                    <label class="label-form-homecare" for="ward">Phường/Xã</label>
                    <select class="select-form-homecare" id="ward" required disabled style="background:#f2f2f2; pointer-events:none;">
                        <option value="{{request.ward}}">{{request.ward}}</option>
                    </select>
                    <!-- Hidden field retains district value for submission -->
                    <input type="hidden" name="ward" value="{{request.ward}}">
                </div>
    
    
                <div class="group-form-homecare full-width-form-homecare">
                    <label class="label-form-homecare" for="address">Địa chỉ chi tiết</label>
                    <input class="input-form-homecare" type="text" id="address" name="address" value="{{customer.address}}" required>
                </div>
    
                <div class="group-form-homecare">
                    <label class="label-form-homecare" for="date">Ngày thực hiện</label>
                    {{#each request.dates}}
                    <input class="input-form-homecare date-readonly" type="date" id="date" name="dates[]" value="{{this}}" required onfocus="this.blur();" style="background:#f2f2f2; pointer-events:none;">
                    {{/each}}
                </div>
    
                <div class="group-form-homecare">
                    <label class="label-form-homecare" for="startTime">Giờ bắt đầu</label>
                    <input class="input-form-homecare" type="time" id="startTime" name="startTime" value="{{formatTime request.startTime}}" required readonly style="background:#f2f2f2; pointer-events:none;">
                </div>
    
                <div class="group-form-homecare">
                    <label class="label-form-homecare" for="endTime">Giờ kết thúc</label>
                    <input class="input-form-homecare" type="time" id="endTime" name="endTime" value="{{formatTime request.endTime}}" required readonly style="background:#f2f2f2; pointer-events:none;">
                </div>
    
                <div class="group-form-homecare full-width-form-homecare">
                    <label class="label-form-homecare" for="service-confirm">Dịch vụ đã chọn</label>
                    {{#if service.title}}
                    <input class="input-form-homecare readonly-form-homecare" type="text" id="service-confirm" name="service" value="{{service.title}}"
                        readonly>
                    <input class="input-form-homecare readonly-form-homecare" type="hidden" id="service-confirm" name="service_id"
                        value="{{service._id}}" readonly>
                    {{else}}
                    <input class="input-form-homecare readonly-form-homecare" type="text" id="service-confirm" name="service" value="Lỗi: Không có thông tin dịch vụ"
                        readonly style="border-color: red; color: red;">
                    <input class="input-form-homecare readonly-form-homecare" type="hidden" id="service-confirm" name="service_id"
                        value="" readonly>
                    {{/if}}
                </div>
    
                <div class="group-form-homecare full-width-form-homecare">
                    <label class="label-form-homecare" for="totalAmount">Tổng số tiền</label>
                    <input class="input-form-homecare total-form-homecare" type="text" id="totalAmount" name="totalCost" value="{{request.totalCost}}"
                        readonly>
                </div>
            </div>
    
            <div class="button-group-form-homecare">
                <button type="button" class="button-form-homecare cancel-form-homecare" onclick="cancelForm()">Hủy</button>
                <button type="submit" class="button-form-homecare confirm-form-homecare" id="submitBtn">Xác nhận</button>
            </div>

            <input type="hidden" name="helperId" value="{{#if request.helperId}}{{#unless (eq request.helperId 'default')}}{{request.helperId}}{{/unless}}{{/if}}">
        </form>
    </div>
    </div>
</body>
<script>

    const submitBtn = document.getElementById('submitBtn');
    const customerInfo = document.querySelector('#customerInfo')
    const nameInput = document.querySelector('#fullname');
    const phoneInput = document.querySelector('#phone');
    const addressInput = document.querySelector('#address');
    const wardField = document.getElementById('ward');
    console.log(submitBtn);
    console.log(customerInfo);
    console.log(nameInput);
    console.log(phoneInput);
    console.log(addressInput);
    
    function updateSubmitState(){
        if(!wardField){
            submitBtn.removeAttribute('disabled');
            return;
        }
        const val = wardField.value && wardField.value.trim();
        if(!val){
            submitBtn.setAttribute('disabled','true');
            submitBtn.style.opacity = '0.6';
            submitBtn.style.cursor = 'not-allowed';
        } else {
            submitBtn.removeAttribute('disabled');
            submitBtn.style.opacity = '1';
            submitBtn.style.cursor = 'pointer';
        }
    }

    document.addEventListener('DOMContentLoaded',()=>{
        updateSubmitState();
        if(wardField){
            wardField.addEventListener('change', updateSubmitState);
            wardField.addEventListener('input', updateSubmitState);
        }
    });

    submitBtn.onclick = function () {
        if(submitBtn.hasAttribute('disabled')) return false;
        // Validate service title
        const serviceInput = document.querySelector('input[name="service"]');
        if (!serviceInput.value || serviceInput.value.trim() === '') {
            alert('Lỗi: Không có thông tin dịch vụ. Vui lòng quay lại trang trước và chọn dịch vụ.');
            return false;
        }
        
        customerInfo.value = JSON.stringify({
            fullName: nameInput.value,
            phone: phoneInput.value,
            address: addressInput.value
        })
    }
</script>
<script>
    /*document.getElementById('form-2').addEventListener('submit', function(event) {
        const startDateInput = document.getElementById('myID');
        const startDateValue = new Date(startDateInput.value);
        
        // Format the date to ensure leading zeros
        const formattedDate = startDateValue.getFullYear() + '-' +
            String(startDateValue.getMonth() + 1).padStart(2, '0') + '-' +
            String(startDateValue.getDate()).padStart(2, '0');
        
        // Set the formatted date back to the input
        startDateInput.value = formattedDate;
    });*/
    // Inject real locations data (provinces/districts/wards) from server
    const locations = {{{ json locations }}} || [];

    // Helper to normalize names (remove administrative prefixes)
    function normalizeName(name) {
        if (!name) return '';
        return name.replace(/^(Tỉnh|Thành phố|Quận|Huyện|Thị xã|Thành Phố)\s+/i, '').trim();
    }

    // Populate ward select based on currently selected province & district (server provided values)
    function populateWardSelect() {
        const provinceValue = document.querySelector('[name="province"]').value || '{{request.province}}';
        const districtValue = document.querySelector('[name="district"]').value || '{{request.district}}';
        const wardSelect = document.getElementById('ward');
        if (!wardSelect || !Array.isArray(locations) || locations.length === 0) return;

        const provinceObj = locations.find(l => normalizeName(l.Name) === normalizeName(provinceValue));
        if (!provinceObj) return;
        let districtObj;
        if (provinceObj.Districts) {
            districtObj = provinceObj.Districts.find(d => normalizeName(d.Name) === normalizeName(districtValue));
        }
        if (!districtObj || !districtObj.Wards) return;

        const currentWard = '{{request.ward}}';
        wardSelect.innerHTML = '<option value="">Chọn phường/xã</option>';
        districtObj.Wards.forEach(w => {
            const wardName = normalizeName(w.Name || w);
            const opt = document.createElement('option');
            opt.value = wardName;
            opt.textContent = wardName;
            if (currentWard && normalizeName(currentWard) === wardName) opt.selected = true;
            wardSelect.appendChild(opt);
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        try { 
            populateWardSelect(); 
            // Re-evaluate submit state after wards populated (async safe via setTimeout)
            setTimeout(updateSubmitState, 0);
        } catch(e) { console.error('Populate ward error', e); }
    });

        // Handle form submission
        function handleSubmit(e) {
            e.preventDefault();

            // Basic validation
            const requiredFields = ['phone', 'fullname', 'city', 'district', 'ward', 'address', 'date', 'startTime', 'endTime'];
            const isValid = requiredFields.every(field => {
                const element = document.getElementById(field);
                if (!element.value) {
                    element.style.borderColor = 'var(--error-red)';
                    return false;
                }
                element.style.borderColor = 'var(--gray-medium)';
                return true;
            });

            if (isValid) {
                // Show success message
                alert('Đặt dịch vụ thành công!');
                // Redirect to home page
                goToHomePage();
            }
        }

        // Cancel form
        function cancelForm() {
            if (confirm('Bạn có chắc muốn hủy không?')) {
                goToHomePage();
            }
        }

        // Navigate to home page
        function goToHomePage() {
            // Redirect to home page
            window.location.href = '/';
        }

        document.getElementById('confirmationForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Debug: Log all form data
            const formData = new FormData(this);
            const formObject = {};
            for (let [key, value] of formData.entries()) {
                formObject[key] = value;
            }
            console.log('Form submission data:', formObject);
            
            // Validate required fields
            const requiredFields = ['phone', 'fullname', 'province', 'ward', 'address', 'startTime', 'endTime'];
            let isValid = true;
            
            for (let field of requiredFields) {
                const input = document.querySelector(`[name="${field}"]`);
                if (!input || !input.value.trim()) {
                    alert(`Vui lòng điền ${field}`);
                    isValid = false;
                    break;
                }
            }
            
            if (isValid) {
                // Submit form
                this.submit();
            }
        });

        // Validate phone number
        document.getElementById('phone').addEventListener('input', function (e) {
            const phoneNumber = e.target.value.replace(/\D/g, '');
            if (phoneNumber.length > 10) {
                e.target.value = phoneNumber.slice(0, 10);
            } else {
                e.target.value = phoneNumber;
            }
        });

        // Validate time selection
        document.getElementById('startTime').addEventListener('change', function () {
            document.getElementById('endTime').min = this.value;
        });

        document.getElementById('endTime').addEventListener('change', function () {
            if (this.value <= document.getElementById('startTime').value) {
                alert('Giờ kết thúc phải sau giờ bắt đầu');
                this.value = '';
            }
        });
</script>

</html>